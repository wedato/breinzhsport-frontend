{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SearchFacesByImageRequest, SearchFacesByImageResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1SearchFacesByImageCommand, serializeAws_json1_1SearchFacesByImageCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>For a given input image, first detects the largest face in the image, and then searches\n *       the specified collection for matching faces. The operation compares the features of the input\n *       face with faces in the specified collection. </p>\n *          <note>\n *             <p>To search for all faces in an input image, you might first call the <a>IndexFaces</a> operation, and then use the face IDs returned in subsequent\n *         calls to the <a>SearchFaces</a> operation. </p>\n *             <p> You can also call the <code>DetectFaces</code> operation and use the bounding boxes\n *         in the response to make face crops, which then you can pass in to the\n *           <code>SearchFacesByImage</code> operation. </p>\n *          </note>\n *\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p>\n *       The response returns an array of faces that match, ordered by similarity score with the\n *       highest similarity first. More specifically, it is an\n *       array of metadata for each face match found. Along with the metadata, the response also\n *       includes a <code>similarity</code> indicating how similar the face is\n *       to the input face.\n *\n *       In the response, the operation also returns the bounding\n *       box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition\n *       used for the input image.\n *     </p>\n *\n *          <p>For an example, Searching for a Face Using an Image in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that don’t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases.\n *       Use <code>QualityFilter</code> to set the quality bar for\n *       filtering by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. The default\n *       value is <code>NONE</code>.</p>\n *          <note>\n *             <p>To use quality filtering, you need a collection associated with version 3 of the\n *       face model or higher. To get the version of the face model associated with a collection, call\n *       <a>DescribeCollection</a>. </p>\n *          </note>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code>\n *       action.</p>\n */\nvar SearchFacesByImageCommand = /** @class */function (_super) {\n  __extends(SearchFacesByImageCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function SearchFacesByImageCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  SearchFacesByImageCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"SearchFacesByImageCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SearchFacesByImageRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesByImageResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  SearchFacesByImageCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SearchFacesByImageCommand(input, context);\n  };\n  SearchFacesByImageCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SearchFacesByImageCommand(output, context);\n  };\n  return SearchFacesByImageCommand;\n}($Command);\nexport { SearchFacesByImageCommand };","map":{"version":3,"names":["SearchFacesByImageRequest","SearchFacesByImageResponse","deserializeAws_json1_1SearchFacesByImageCommand","serializeAws_json1_1SearchFacesByImageCommand","getSerdePlugin","Command","$Command","SearchFacesByImageCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-sdk\\client-rekognition\\commands\\SearchFacesByImageCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { SearchFacesByImageRequest, SearchFacesByImageResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1SearchFacesByImageCommand,\n  serializeAws_json1_1SearchFacesByImageCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type SearchFacesByImageCommandInput = SearchFacesByImageRequest;\nexport type SearchFacesByImageCommandOutput = SearchFacesByImageResponse & __MetadataBearer;\n\n/**\n * <p>For a given input image, first detects the largest face in the image, and then searches\n *       the specified collection for matching faces. The operation compares the features of the input\n *       face with faces in the specified collection. </p>\n *          <note>\n *             <p>To search for all faces in an input image, you might first call the <a>IndexFaces</a> operation, and then use the face IDs returned in subsequent\n *         calls to the <a>SearchFaces</a> operation. </p>\n *             <p> You can also call the <code>DetectFaces</code> operation and use the bounding boxes\n *         in the response to make face crops, which then you can pass in to the\n *           <code>SearchFacesByImage</code> operation. </p>\n *          </note>\n *\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p>\n *       The response returns an array of faces that match, ordered by similarity score with the\n *       highest similarity first. More specifically, it is an\n *       array of metadata for each face match found. Along with the metadata, the response also\n *       includes a <code>similarity</code> indicating how similar the face is\n *       to the input face.\n *\n *       In the response, the operation also returns the bounding\n *       box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition\n *       used for the input image.\n *     </p>\n *\n *          <p>For an example, Searching for a Face Using an Image in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that don’t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases.\n *       Use <code>QualityFilter</code> to set the quality bar for\n *       filtering by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. The default\n *       value is <code>NONE</code>.</p>\n *          <note>\n *             <p>To use quality filtering, you need a collection associated with version 3 of the\n *       face model or higher. To get the version of the face model associated with a collection, call\n *       <a>DescribeCollection</a>. </p>\n *          </note>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code>\n *       action.</p>\n */\nexport class SearchFacesByImageCommand extends $Command<\n  SearchFacesByImageCommandInput,\n  SearchFacesByImageCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: SearchFacesByImageCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<SearchFacesByImageCommandInput, SearchFacesByImageCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"SearchFacesByImageCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: SearchFacesByImageRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesByImageResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: SearchFacesByImageCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1SearchFacesByImageCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<SearchFacesByImageCommandOutput> {\n    return deserializeAws_json1_1SearchFacesByImageCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,yBAAyB,EAAEC,0BAA0B,QAAQ,oBAAoB;AAC1F,SACEC,+CAA+C,EAC/CC,6CAA6C,QACxC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,IAAAC,yBAAA,0BAAAC,MAAA;EAA+CC,SAAA,CAAAF,yBAAA,EAAAC,MAAA;EAK7C;EACA;EAEA,SAAAD,0BAAqBG,KAAqC;IAA1D,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,yBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,2BAA2B;IAC/C,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,yBAAyB,CAAC6B,kBAAkB;MACrEC,wBAAwB,EAAE7B,0BAA0B,CAAC4B;KACtD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,yBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAqC,EAAEyB,OAAuB;IAC9E,OAAOhC,6CAA6C,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACtE,CAAC;EAEO5B,yBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,+CAA+C,CAACkC,MAAM,EAAED,OAAO,CAAC;EACzE,CAAC;EAIH,OAAA5B,yBAAC;AAAD,CAAC,CAtD8CD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}