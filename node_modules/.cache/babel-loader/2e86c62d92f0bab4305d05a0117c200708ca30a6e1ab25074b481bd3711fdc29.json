{"ast":null,"code":"import * as CommonSelectors from '../lib/common_selectors.js';\nimport isEventAtCoordinates from '../lib/is_event_at_coordinates.js';\nimport doubleClickZoom from '../lib/double_click_zoom.js';\nimport * as Constants from '../constants.js';\nimport createVertex from '../lib/create_vertex.js';\nconst DrawLineString = {};\nDrawLineString.onSetup = function (opts) {\n  opts = opts || {};\n  const featureId = opts.featureId;\n  let line, currentVertexPosition;\n  let direction = 'forward';\n  if (featureId) {\n    line = this.getFeature(featureId);\n    if (!line) {\n      throw new Error('Could not find a feature with the provided featureId');\n    }\n    let from = opts.from;\n    if (from && from.type === 'Feature' && from.geometry && from.geometry.type === 'Point') {\n      from = from.geometry;\n    }\n    if (from && from.type === 'Point' && from.coordinates && from.coordinates.length === 2) {\n      from = from.coordinates;\n    }\n    if (!from || !Array.isArray(from)) {\n      throw new Error('Please use the `from` property to indicate which point to continue the line from');\n    }\n    const lastCoord = line.coordinates.length - 1;\n    if (line.coordinates[lastCoord][0] === from[0] && line.coordinates[lastCoord][1] === from[1]) {\n      currentVertexPosition = lastCoord + 1;\n      // add one new coordinate to continue from\n      line.addCoordinate(currentVertexPosition, ...line.coordinates[lastCoord]);\n    } else if (line.coordinates[0][0] === from[0] && line.coordinates[0][1] === from[1]) {\n      direction = 'backwards';\n      currentVertexPosition = 0;\n      // add one new coordinate to continue from\n      line.addCoordinate(currentVertexPosition, ...line.coordinates[0]);\n    } else {\n      throw new Error('`from` should match the point at either the start or the end of the provided LineString');\n    }\n  } else {\n    line = this.newFeature({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: {},\n      geometry: {\n        type: Constants.geojsonTypes.LINE_STRING,\n        coordinates: []\n      }\n    });\n    currentVertexPosition = 0;\n    this.addFeature(line);\n  }\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  this.activateUIButton(Constants.types.LINE);\n  this.setActionableState({\n    trash: true\n  });\n  return {\n    line,\n    currentVertexPosition,\n    direction\n  };\n};\nDrawLineString.clickAnywhere = function (state, e) {\n  if (state.currentVertexPosition > 0 && isEventAtCoordinates(e, state.line.coordinates[state.currentVertexPosition - 1]) || state.direction === 'backwards' && isEventAtCoordinates(e, state.line.coordinates[state.currentVertexPosition + 1])) {\n    return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n      featureIds: [state.line.id]\n    });\n  }\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  state.line.updateCoordinate(state.currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n  if (state.direction === 'forward') {\n    state.currentVertexPosition++;\n    state.line.updateCoordinate(state.currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n  } else {\n    state.line.addCoordinate(0, e.lngLat.lng, e.lngLat.lat);\n  }\n};\nDrawLineString.clickOnVertex = function (state) {\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n    featureIds: [state.line.id]\n  });\n};\nDrawLineString.onMouseMove = function (state, e) {\n  state.line.updateCoordinate(state.currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n  if (CommonSelectors.isVertex(e)) {\n    this.updateUIClasses({\n      mouse: Constants.cursors.POINTER\n    });\n  }\n};\nDrawLineString.onTap = DrawLineString.onClick = function (state, e) {\n  if (CommonSelectors.isVertex(e)) return this.clickOnVertex(state, e);\n  this.clickAnywhere(state, e);\n};\nDrawLineString.onKeyUp = function (state, e) {\n  if (CommonSelectors.isEnterKey(e)) {\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {\n      featureIds: [state.line.id]\n    });\n  } else if (CommonSelectors.isEscapeKey(e)) {\n    this.deleteFeature([state.line.id], {\n      silent: true\n    });\n    this.changeMode(Constants.modes.SIMPLE_SELECT);\n  }\n};\nDrawLineString.onStop = function (state) {\n  doubleClickZoom.enable(this);\n  this.activateUIButton();\n\n  // check to see if we've deleted this feature\n  if (this.getFeature(state.line.id) === undefined) return;\n\n  //remove last added coordinate\n  state.line.removeCoordinate(`${state.currentVertexPosition}`);\n  if (state.line.isValid()) {\n    this.fire(Constants.events.CREATE, {\n      features: [state.line.toGeoJSON()]\n    });\n  } else {\n    this.deleteFeature([state.line.id], {\n      silent: true\n    });\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {}, {\n      silent: true\n    });\n  }\n};\nDrawLineString.onTrash = function (state) {\n  this.deleteFeature([state.line.id], {\n    silent: true\n  });\n  this.changeMode(Constants.modes.SIMPLE_SELECT);\n};\nDrawLineString.toDisplayFeatures = function (state, geojson, display) {\n  const isActiveLine = geojson.properties.id === state.line.id;\n  geojson.properties.active = isActiveLine ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  if (!isActiveLine) return display(geojson);\n  // Only render the line if it has at least one real coordinate\n  if (geojson.geometry.coordinates.length < 2) return;\n  geojson.properties.meta = Constants.meta.FEATURE;\n  display(createVertex(state.line.id, geojson.geometry.coordinates[state.direction === 'forward' ? geojson.geometry.coordinates.length - 2 : 1], `${state.direction === 'forward' ? geojson.geometry.coordinates.length - 2 : 1}`, false));\n  display(geojson);\n};\nexport default DrawLineString;","map":{"version":3,"names":["CommonSelectors","isEventAtCoordinates","doubleClickZoom","Constants","createVertex","DrawLineString","onSetup","opts","featureId","line","currentVertexPosition","direction","getFeature","Error","from","type","geometry","coordinates","length","Array","isArray","lastCoord","addCoordinate","newFeature","geojsonTypes","FEATURE","properties","LINE_STRING","addFeature","clearSelectedFeatures","disable","updateUIClasses","mouse","cursors","ADD","activateUIButton","types","LINE","setActionableState","trash","clickAnywhere","state","e","changeMode","modes","SIMPLE_SELECT","featureIds","id","updateCoordinate","lngLat","lng","lat","clickOnVertex","onMouseMove","isVertex","POINTER","onTap","onClick","onKeyUp","isEnterKey","isEscapeKey","deleteFeature","silent","onStop","enable","undefined","removeCoordinate","isValid","fire","events","CREATE","features","toGeoJSON","onTrash","toDisplayFeatures","geojson","display","isActiveLine","active","activeStates","ACTIVE","INACTIVE","meta"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@mapbox/mapbox-gl-draw/src/modes/draw_line_string.js"],"sourcesContent":["import * as CommonSelectors from '../lib/common_selectors.js';\nimport isEventAtCoordinates from '../lib/is_event_at_coordinates.js';\nimport doubleClickZoom from '../lib/double_click_zoom.js';\nimport * as Constants from '../constants.js';\nimport createVertex from '../lib/create_vertex.js';\n\nconst DrawLineString = {};\n\nDrawLineString.onSetup = function(opts) {\n  opts = opts || {};\n  const featureId = opts.featureId;\n\n  let line, currentVertexPosition;\n  let direction = 'forward';\n  if (featureId) {\n    line = this.getFeature(featureId);\n    if (!line) {\n      throw new Error('Could not find a feature with the provided featureId');\n    }\n    let from = opts.from;\n    if (from && from.type === 'Feature' && from.geometry && from.geometry.type === 'Point') {\n      from = from.geometry;\n    }\n    if (from && from.type === 'Point' && from.coordinates && from.coordinates.length === 2) {\n      from = from.coordinates;\n    }\n    if (!from || !Array.isArray(from)) {\n      throw new Error('Please use the `from` property to indicate which point to continue the line from');\n    }\n    const lastCoord = line.coordinates.length - 1;\n    if (line.coordinates[lastCoord][0] === from[0] && line.coordinates[lastCoord][1] === from[1]) {\n      currentVertexPosition = lastCoord + 1;\n      // add one new coordinate to continue from\n      line.addCoordinate(currentVertexPosition, ...line.coordinates[lastCoord]);\n    } else if (line.coordinates[0][0] === from[0] && line.coordinates[0][1] === from[1]) {\n      direction = 'backwards';\n      currentVertexPosition = 0;\n      // add one new coordinate to continue from\n      line.addCoordinate(currentVertexPosition, ...line.coordinates[0]);\n    } else {\n      throw new Error('`from` should match the point at either the start or the end of the provided LineString');\n    }\n  } else {\n    line = this.newFeature({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: {},\n      geometry: {\n        type: Constants.geojsonTypes.LINE_STRING,\n        coordinates: []\n      }\n    });\n    currentVertexPosition = 0;\n    this.addFeature(line);\n  }\n\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  this.activateUIButton(Constants.types.LINE);\n  this.setActionableState({\n    trash: true\n  });\n\n  return {\n    line,\n    currentVertexPosition,\n    direction\n  };\n};\n\nDrawLineString.clickAnywhere = function(state, e) {\n  if (state.currentVertexPosition > 0 && isEventAtCoordinates(e, state.line.coordinates[state.currentVertexPosition - 1]) ||\n      state.direction === 'backwards' && isEventAtCoordinates(e, state.line.coordinates[state.currentVertexPosition + 1])) {\n    return this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.line.id] });\n  }\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  state.line.updateCoordinate(state.currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n  if (state.direction === 'forward') {\n    state.currentVertexPosition++;\n    state.line.updateCoordinate(state.currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n  } else {\n    state.line.addCoordinate(0, e.lngLat.lng, e.lngLat.lat);\n  }\n};\n\nDrawLineString.clickOnVertex = function(state) {\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.line.id] });\n};\n\nDrawLineString.onMouseMove = function(state, e) {\n  state.line.updateCoordinate(state.currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n  if (CommonSelectors.isVertex(e)) {\n    this.updateUIClasses({ mouse: Constants.cursors.POINTER });\n  }\n};\n\nDrawLineString.onTap = DrawLineString.onClick = function(state, e) {\n  if (CommonSelectors.isVertex(e)) return this.clickOnVertex(state, e);\n  this.clickAnywhere(state, e);\n};\n\nDrawLineString.onKeyUp = function(state, e) {\n  if (CommonSelectors.isEnterKey(e)) {\n    this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.line.id] });\n  } else if (CommonSelectors.isEscapeKey(e)) {\n    this.deleteFeature([state.line.id], { silent: true });\n    this.changeMode(Constants.modes.SIMPLE_SELECT);\n  }\n};\n\nDrawLineString.onStop = function(state) {\n  doubleClickZoom.enable(this);\n  this.activateUIButton();\n\n  // check to see if we've deleted this feature\n  if (this.getFeature(state.line.id) === undefined) return;\n\n  //remove last added coordinate\n  state.line.removeCoordinate(`${state.currentVertexPosition}`);\n  if (state.line.isValid()) {\n    this.fire(Constants.events.CREATE, {\n      features: [state.line.toGeoJSON()]\n    });\n  } else {\n    this.deleteFeature([state.line.id], { silent: true });\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {}, { silent: true });\n  }\n};\n\nDrawLineString.onTrash = function(state) {\n  this.deleteFeature([state.line.id], { silent: true });\n  this.changeMode(Constants.modes.SIMPLE_SELECT);\n};\n\nDrawLineString.toDisplayFeatures = function(state, geojson, display) {\n  const isActiveLine = geojson.properties.id === state.line.id;\n  geojson.properties.active = (isActiveLine) ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  if (!isActiveLine) return display(geojson);\n  // Only render the line if it has at least one real coordinate\n  if (geojson.geometry.coordinates.length < 2) return;\n  geojson.properties.meta = Constants.meta.FEATURE;\n  display(createVertex(\n    state.line.id,\n    geojson.geometry.coordinates[state.direction === 'forward' ? geojson.geometry.coordinates.length - 2 : 1],\n    `${state.direction === 'forward' ? geojson.geometry.coordinates.length - 2 : 1}`,\n    false\n  ));\n\n  display(geojson);\n};\n\nexport default DrawLineString;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}