{"ast":null,"code":"'use strict';\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar whichTypedArray = require('which-typed-array');\nvar availableTypedArrays = require('available-typed-arrays')();\nvar IsArray = require('./IsArray');\nvar SpeciesConstructor = require('./SpeciesConstructor');\nvar TypedArrayCreateFromConstructor = require('./TypedArrayCreateFromConstructor');\nvar getConstructor = require('../helpers/typedArrayConstructors');\n\n// https://262.ecma-international.org/15.0/#typedarray-species-create\n\nmodule.exports = function TypedArraySpeciesCreate(exemplar, argumentList) {\n  if (availableTypedArrays.length === 0) {\n    throw new $SyntaxError('Assertion failed: Typed Arrays are not supported in this environment');\n  }\n  var kind = whichTypedArray(exemplar);\n  if (!kind) {\n    throw new $TypeError('Assertion failed: exemplar must be a TypedArray'); // step 1\n  }\n  if (!IsArray(argumentList)) {\n    throw new $TypeError('Assertion failed: `argumentList` must be a List'); // step 1\n  }\n  var defaultConstructor = getConstructor(kind); // step 2\n  if (typeof defaultConstructor !== 'function') {\n    throw new $SyntaxError('Assertion failed: `constructor` of `exemplar` (' + kind + ') must exist. Please report this!');\n  }\n  var constructor = SpeciesConstructor(exemplar, defaultConstructor); // step 3\n\n  return TypedArrayCreateFromConstructor(constructor, argumentList); // step 4\n};","map":{"version":3,"names":["$SyntaxError","require","$TypeError","whichTypedArray","availableTypedArrays","IsArray","SpeciesConstructor","TypedArrayCreateFromConstructor","getConstructor","module","exports","TypedArraySpeciesCreate","exemplar","argumentList","length","kind","defaultConstructor","constructor"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/2024/TypedArraySpeciesCreate.js"],"sourcesContent":["'use strict';\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\n\nvar whichTypedArray = require('which-typed-array');\nvar availableTypedArrays = require('available-typed-arrays')();\n\nvar IsArray = require('./IsArray');\nvar SpeciesConstructor = require('./SpeciesConstructor');\nvar TypedArrayCreateFromConstructor = require('./TypedArrayCreateFromConstructor');\n\nvar getConstructor = require('../helpers/typedArrayConstructors');\n\n// https://262.ecma-international.org/15.0/#typedarray-species-create\n\nmodule.exports = function TypedArraySpeciesCreate(exemplar, argumentList) {\n\tif (availableTypedArrays.length === 0) {\n\t\tthrow new $SyntaxError('Assertion failed: Typed Arrays are not supported in this environment');\n\t}\n\n\tvar kind = whichTypedArray(exemplar);\n\tif (!kind) {\n\t\tthrow new $TypeError('Assertion failed: exemplar must be a TypedArray'); // step 1\n\t}\n\tif (!IsArray(argumentList)) {\n\t\tthrow new $TypeError('Assertion failed: `argumentList` must be a List'); // step 1\n\t}\n\n\tvar defaultConstructor = getConstructor(kind); // step 2\n\tif (typeof defaultConstructor !== 'function') {\n\t\tthrow new $SyntaxError('Assertion failed: `constructor` of `exemplar` (' + kind + ') must exist. Please report this!');\n\t}\n\tvar constructor = SpeciesConstructor(exemplar, defaultConstructor); // step 3\n\n\treturn TypedArrayCreateFromConstructor(constructor, argumentList); // step 4\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC9C,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE1C,IAAIE,eAAe,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAClD,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;AAE9D,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIK,kBAAkB,GAAGL,OAAO,CAAC,sBAAsB,CAAC;AACxD,IAAIM,+BAA+B,GAAGN,OAAO,CAAC,mCAAmC,CAAC;AAElF,IAAIO,cAAc,GAAGP,OAAO,CAAC,mCAAmC,CAAC;;AAEjE;;AAEAQ,MAAM,CAACC,OAAO,GAAG,SAASC,uBAAuBA,CAACC,QAAQ,EAAEC,YAAY,EAAE;EACzE,IAAIT,oBAAoB,CAACU,MAAM,KAAK,CAAC,EAAE;IACtC,MAAM,IAAId,YAAY,CAAC,sEAAsE,CAAC;EAC/F;EAEA,IAAIe,IAAI,GAAGZ,eAAe,CAACS,QAAQ,CAAC;EACpC,IAAI,CAACG,IAAI,EAAE;IACV,MAAM,IAAIb,UAAU,CAAC,iDAAiD,CAAC,CAAC,CAAC;EAC1E;EACA,IAAI,CAACG,OAAO,CAACQ,YAAY,CAAC,EAAE;IAC3B,MAAM,IAAIX,UAAU,CAAC,iDAAiD,CAAC,CAAC,CAAC;EAC1E;EAEA,IAAIc,kBAAkB,GAAGR,cAAc,CAACO,IAAI,CAAC,CAAC,CAAC;EAC/C,IAAI,OAAOC,kBAAkB,KAAK,UAAU,EAAE;IAC7C,MAAM,IAAIhB,YAAY,CAAC,iDAAiD,GAAGe,IAAI,GAAG,mCAAmC,CAAC;EACvH;EACA,IAAIE,WAAW,GAAGX,kBAAkB,CAACM,QAAQ,EAAEI,kBAAkB,CAAC,CAAC,CAAC;;EAEpE,OAAOT,+BAA+B,CAACU,WAAW,EAAEJ,YAAY,CAAC,CAAC,CAAC;AACpE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}