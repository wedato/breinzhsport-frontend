{"ast":null,"code":"\"use strict\";\n\nvar {\n  getHttpResponseData\n} = require('../segments/segment_utils');\n/**\n * Represents an incoming HTTP/HTTPS call.\n * @constructor\n * @param {http.IncomingMessage|https.IncomingMessage} req - The request object from the HTTP/HTTPS call.\n */\nfunction IncomingRequestData(req) {\n  this.init(req);\n}\nIncomingRequestData.prototype.init = function init(req) {\n  var forwarded = !!req.headers['x-forwarded-for'];\n  var url;\n  if (req.connection) {\n    url = (req.connection.secure || req.connection.encrypted ? 'https://' : 'http://') + ((req.headers['host'] || '') + (req.url || ''));\n  }\n  this.request = {\n    method: req.method || '',\n    user_agent: req.headers['user-agent'] || '',\n    client_ip: getClientIp(req) || '',\n    url: url || ''\n  };\n  if (forwarded) {\n    this.request.x_forwarded_for = forwarded;\n  }\n};\nvar getClientIp = function getClientIp(req) {\n  var clientIp;\n  if (req.headers['x-forwarded-for']) {\n    clientIp = (req.headers['x-forwarded-for'] || '').split(',')[0];\n  } else if (req.connection && req.connection.remoteAddress) {\n    clientIp = req.connection.remoteAddress;\n  } else if (req.socket && req.socket.remoteAddress) {\n    clientIp = req.socket.remoteAddress;\n  } else if (req.connection && req.connection.socket && req.connection.socket.remoteAddress) {\n    clientIp = req.connection.socket.remoteAddress;\n  }\n  return clientIp;\n};\n/**\n * Closes the local and automatically captures the response data.\n * @param {http.ServerResponse|https.ServerResponse} res - The response object from the HTTP/HTTPS call.\n */\nIncomingRequestData.prototype.close = function close(res) {\n  this.response = getHttpResponseData(res);\n};\nmodule.exports = IncomingRequestData;","map":{"version":3,"names":["getHttpResponseData","require","IncomingRequestData","req","init","prototype","forwarded","headers","url","connection","secure","encrypted","request","method","user_agent","client_ip","getClientIp","x_forwarded_for","clientIp","split","remoteAddress","socket","close","res","response","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/middleware/incoming_request_data.js"],"sourcesContent":["\"use strict\";\nvar { getHttpResponseData } = require('../segments/segment_utils');\n/**\n * Represents an incoming HTTP/HTTPS call.\n * @constructor\n * @param {http.IncomingMessage|https.IncomingMessage} req - The request object from the HTTP/HTTPS call.\n */\nfunction IncomingRequestData(req) {\n    this.init(req);\n}\nIncomingRequestData.prototype.init = function init(req) {\n    var forwarded = !!req.headers['x-forwarded-for'];\n    var url;\n    if (req.connection) {\n        url = ((req.connection.secure || req.connection.encrypted) ? 'https://' : 'http://') +\n            ((req.headers['host'] || '') + (req.url || ''));\n    }\n    this.request = {\n        method: req.method || '',\n        user_agent: req.headers['user-agent'] || '',\n        client_ip: getClientIp(req) || '',\n        url: url || '',\n    };\n    if (forwarded) {\n        this.request.x_forwarded_for = forwarded;\n    }\n};\nvar getClientIp = function getClientIp(req) {\n    var clientIp;\n    if (req.headers['x-forwarded-for']) {\n        clientIp = (req.headers['x-forwarded-for'] || '').split(',')[0];\n    }\n    else if (req.connection && req.connection.remoteAddress) {\n        clientIp = req.connection.remoteAddress;\n    }\n    else if (req.socket && req.socket.remoteAddress) {\n        clientIp = req.socket.remoteAddress;\n    }\n    else if (req.connection && req.connection.socket && req.connection.socket.remoteAddress) {\n        clientIp = req.connection.socket.remoteAddress;\n    }\n    return clientIp;\n};\n/**\n * Closes the local and automatically captures the response data.\n * @param {http.ServerResponse|https.ServerResponse} res - The response object from the HTTP/HTTPS call.\n */\nIncomingRequestData.prototype.close = function close(res) {\n    this.response = getHttpResponseData(res);\n};\nmodule.exports = IncomingRequestData;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAI;EAAEA;AAAoB,CAAC,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,GAAG,EAAE;EAC9B,IAAI,CAACC,IAAI,CAACD,GAAG,CAAC;AAClB;AACAD,mBAAmB,CAACG,SAAS,CAACD,IAAI,GAAG,SAASA,IAAIA,CAACD,GAAG,EAAE;EACpD,IAAIG,SAAS,GAAG,CAAC,CAACH,GAAG,CAACI,OAAO,CAAC,iBAAiB,CAAC;EAChD,IAAIC,GAAG;EACP,IAAIL,GAAG,CAACM,UAAU,EAAE;IAChBD,GAAG,GAAG,CAAEL,GAAG,CAACM,UAAU,CAACC,MAAM,IAAIP,GAAG,CAACM,UAAU,CAACE,SAAS,GAAI,UAAU,GAAG,SAAS,KAC9E,CAACR,GAAG,CAACI,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,KAAKJ,GAAG,CAACK,GAAG,IAAI,EAAE,CAAC,CAAC;EACvD;EACA,IAAI,CAACI,OAAO,GAAG;IACXC,MAAM,EAAEV,GAAG,CAACU,MAAM,IAAI,EAAE;IACxBC,UAAU,EAAEX,GAAG,CAACI,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE;IAC3CQ,SAAS,EAAEC,WAAW,CAACb,GAAG,CAAC,IAAI,EAAE;IACjCK,GAAG,EAAEA,GAAG,IAAI;EAChB,CAAC;EACD,IAAIF,SAAS,EAAE;IACX,IAAI,CAACM,OAAO,CAACK,eAAe,GAAGX,SAAS;EAC5C;AACJ,CAAC;AACD,IAAIU,WAAW,GAAG,SAASA,WAAWA,CAACb,GAAG,EAAE;EACxC,IAAIe,QAAQ;EACZ,IAAIf,GAAG,CAACI,OAAO,CAAC,iBAAiB,CAAC,EAAE;IAChCW,QAAQ,GAAG,CAACf,GAAG,CAACI,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAEY,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnE,CAAC,MACI,IAAIhB,GAAG,CAACM,UAAU,IAAIN,GAAG,CAACM,UAAU,CAACW,aAAa,EAAE;IACrDF,QAAQ,GAAGf,GAAG,CAACM,UAAU,CAACW,aAAa;EAC3C,CAAC,MACI,IAAIjB,GAAG,CAACkB,MAAM,IAAIlB,GAAG,CAACkB,MAAM,CAACD,aAAa,EAAE;IAC7CF,QAAQ,GAAGf,GAAG,CAACkB,MAAM,CAACD,aAAa;EACvC,CAAC,MACI,IAAIjB,GAAG,CAACM,UAAU,IAAIN,GAAG,CAACM,UAAU,CAACY,MAAM,IAAIlB,GAAG,CAACM,UAAU,CAACY,MAAM,CAACD,aAAa,EAAE;IACrFF,QAAQ,GAAGf,GAAG,CAACM,UAAU,CAACY,MAAM,CAACD,aAAa;EAClD;EACA,OAAOF,QAAQ;AACnB,CAAC;AACD;AACA;AACA;AACA;AACAhB,mBAAmB,CAACG,SAAS,CAACiB,KAAK,GAAG,SAASA,KAAKA,CAACC,GAAG,EAAE;EACtD,IAAI,CAACC,QAAQ,GAAGxB,mBAAmB,CAACuB,GAAG,CAAC;AAC5C,CAAC;AACDE,MAAM,CAACC,OAAO,GAAGxB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}