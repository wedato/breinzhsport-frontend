{"ast":null,"code":"'use strict';\n\nvar $pow = require('math-intrinsics/pow');\nmodule.exports = function bytesAsFloat32(rawBytes) {\n  // return new $Float32Array(new $Uint8Array(rawBytes).buffer)[0];\n\n  /*\n         Let value be the byte elements of rawBytes concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary32 value.\n  If value is an IEEE 754-2008 binary32 NaN value, return the NaN Number value.\n  Return the Number value that corresponds to value.\n         */\n  var sign = rawBytes[3] & 0x80 ? -1 : 1; // Check the sign bit\n  var exponent = (rawBytes[3] & 0x7F) << 1 | rawBytes[2] >> 7; // Combine bits for exponent\n  var mantissa = (rawBytes[2] & 0x7F) << 16 | rawBytes[1] << 8 | rawBytes[0]; // Combine bits for mantissa\n\n  if (exponent === 0 && mantissa === 0) {\n    return sign === 1 ? 0 : -0;\n  }\n  if (exponent === 0xFF && mantissa === 0) {\n    return sign === 1 ? Infinity : -Infinity;\n  }\n  if (exponent === 0xFF && mantissa !== 0) {\n    return NaN;\n  }\n  exponent -= 127; // subtract the bias\n\n  if (exponent === -127) {\n    return sign * mantissa * $pow(2, -126 - 23);\n  }\n  return sign * (1 + mantissa * $pow(2, -23)) * $pow(2, exponent);\n};","map":{"version":3,"names":["$pow","require","module","exports","bytesAsFloat32","rawBytes","sign","exponent","mantissa","Infinity","NaN"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/helpers/bytesAsFloat32.js"],"sourcesContent":["'use strict';\n\nvar $pow = require('math-intrinsics/pow');\n\nmodule.exports = function bytesAsFloat32(rawBytes) {\n\t// return new $Float32Array(new $Uint8Array(rawBytes).buffer)[0];\n\n\t/*\n        Let value be the byte elements of rawBytes concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary32 value.\nIf value is an IEEE 754-2008 binary32 NaN value, return the NaN Number value.\nReturn the Number value that corresponds to value.\n        */\n\tvar sign = rawBytes[3] & 0x80 ? -1 : 1; // Check the sign bit\n\tvar exponent = ((rawBytes[3] & 0x7F) << 1)\n\t\t| (rawBytes[2] >> 7); // Combine bits for exponent\n\tvar mantissa = ((rawBytes[2] & 0x7F) << 16)\n\t\t| (rawBytes[1] << 8)\n\t\t| rawBytes[0]; // Combine bits for mantissa\n\n\tif (exponent === 0 && mantissa === 0) {\n\t\treturn sign === 1 ? 0 : -0;\n\t}\n\tif (exponent === 0xFF && mantissa === 0) {\n\t\treturn sign === 1 ? Infinity : -Infinity;\n\t}\n\tif (exponent === 0xFF && mantissa !== 0) {\n\t\treturn NaN;\n\t}\n\n\texponent -= 127; // subtract the bias\n\n\tif (exponent === -127) {\n\t\treturn sign * mantissa * $pow(2, -126 - 23);\n\t}\n\treturn sign * (1 + (mantissa * $pow(2, -23))) * $pow(2, exponent);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAEzCC,MAAM,CAACC,OAAO,GAAG,SAASC,cAAcA,CAACC,QAAQ,EAAE;EAClD;;EAEA;AACD;AACA;AACA;AACA;EACC,IAAIC,IAAI,GAAGD,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACxC,IAAIE,QAAQ,GAAI,CAACF,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GACrCA,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC,CAAC;EACvB,IAAIG,QAAQ,GAAI,CAACH,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,GACtCA,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAE,GAClBA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEhB,IAAIE,QAAQ,KAAK,CAAC,IAAIC,QAAQ,KAAK,CAAC,EAAE;IACrC,OAAOF,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC3B;EACA,IAAIC,QAAQ,KAAK,IAAI,IAAIC,QAAQ,KAAK,CAAC,EAAE;IACxC,OAAOF,IAAI,KAAK,CAAC,GAAGG,QAAQ,GAAG,CAACA,QAAQ;EACzC;EACA,IAAIF,QAAQ,KAAK,IAAI,IAAIC,QAAQ,KAAK,CAAC,EAAE;IACxC,OAAOE,GAAG;EACX;EAEAH,QAAQ,IAAI,GAAG,CAAC,CAAC;;EAEjB,IAAIA,QAAQ,KAAK,CAAC,GAAG,EAAE;IACtB,OAAOD,IAAI,GAAGE,QAAQ,GAAGR,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC;EAC5C;EACA,OAAOM,IAAI,IAAI,CAAC,GAAIE,QAAQ,GAAGR,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,GAAGA,IAAI,CAAC,CAAC,EAAEO,QAAQ,CAAC;AAClE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}