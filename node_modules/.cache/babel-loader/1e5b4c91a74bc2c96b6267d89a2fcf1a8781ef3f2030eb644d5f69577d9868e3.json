{"ast":null,"code":"/**\n * Note: This file was copied from mapbox-gl-draw@1.1.1 because it is no longer accessible in later versions of mapbox-gl-draw which are required for security benefits.\n *\n * If this PR gets merged https://github.com/mapbox/mapbox-gl-draw/pull/1100 or mapbox-gl-draw is forked to maplibre-gl-draw we should investigate removing these files and getting the dependencies from mapbox-gl-draw\n */\n\nconst extent = require(\"@mapbox/geojson-extent\");\nconst Constants = require(\"./constants\");\nconst {\n  LAT_MIN,\n  LAT_MAX,\n  LAT_RENDERED_MIN,\n  LAT_RENDERED_MAX,\n  LNG_MIN,\n  LNG_MAX\n} = Constants;\n\n// Ensure that we do not drag north-south far enough for\n// - any part of any feature to exceed the poles\n// - any feature to be completely lost in the space between the projection's\n//   edge and the poles, such that it couldn't be re-selected and moved back\nmodule.exports = function (geojsonFeatures, delta) {\n  // \"inner edge\" = a feature's latitude closest to the equator\n  let northInnerEdge = LAT_MIN;\n  let southInnerEdge = LAT_MAX;\n  // \"outer edge\" = a feature's latitude furthest from the equator\n  let northOuterEdge = LAT_MIN;\n  let southOuterEdge = LAT_MAX;\n  let westEdge = LNG_MAX;\n  let eastEdge = LNG_MIN;\n  geojsonFeatures.forEach(feature => {\n    const bounds = extent(feature);\n    const featureSouthEdge = bounds[1];\n    const featureNorthEdge = bounds[3];\n    const featureWestEdge = bounds[0];\n    const featureEastEdge = bounds[2];\n    if (featureSouthEdge > northInnerEdge) northInnerEdge = featureSouthEdge;\n    if (featureNorthEdge < southInnerEdge) southInnerEdge = featureNorthEdge;\n    if (featureNorthEdge > northOuterEdge) northOuterEdge = featureNorthEdge;\n    if (featureSouthEdge < southOuterEdge) southOuterEdge = featureSouthEdge;\n    if (featureWestEdge < westEdge) westEdge = featureWestEdge;\n    if (featureEastEdge > eastEdge) eastEdge = featureEastEdge;\n  });\n\n  // These changes are not mutually exclusive: we might hit the inner\n  // edge but also have hit the outer edge and therefore need\n  // another readjustment\n  const constrainedDelta = delta;\n  if (northInnerEdge + constrainedDelta.lat > LAT_RENDERED_MAX) {\n    constrainedDelta.lat = LAT_RENDERED_MAX - northInnerEdge;\n  }\n  if (northOuterEdge + constrainedDelta.lat > LAT_MAX) {\n    constrainedDelta.lat = LAT_MAX - northOuterEdge;\n  }\n  if (southInnerEdge + constrainedDelta.lat < LAT_RENDERED_MIN) {\n    constrainedDelta.lat = LAT_RENDERED_MIN - southInnerEdge;\n  }\n  if (southOuterEdge + constrainedDelta.lat < LAT_MIN) {\n    constrainedDelta.lat = LAT_MIN - southOuterEdge;\n  }\n  if (westEdge + constrainedDelta.lng <= LNG_MIN) {\n    constrainedDelta.lng += Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;\n  }\n  if (eastEdge + constrainedDelta.lng >= LNG_MAX) {\n    constrainedDelta.lng -= Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;\n  }\n  return constrainedDelta;\n};","map":{"version":3,"names":["extent","require","Constants","LAT_MIN","LAT_MAX","LAT_RENDERED_MIN","LAT_RENDERED_MAX","LNG_MIN","LNG_MAX","module","exports","geojsonFeatures","delta","northInnerEdge","southInnerEdge","northOuterEdge","southOuterEdge","westEdge","eastEdge","forEach","feature","bounds","featureSouthEdge","featureNorthEdge","featureWestEdge","featureEastEdge","constrainedDelta","lat","lng","Math","ceil","abs"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/maplibre-gl-draw-circle/lib/utils/constrain_feature_movement.js"],"sourcesContent":["/**\n * Note: This file was copied from mapbox-gl-draw@1.1.1 because it is no longer accessible in later versions of mapbox-gl-draw which are required for security benefits.\n *\n * If this PR gets merged https://github.com/mapbox/mapbox-gl-draw/pull/1100 or mapbox-gl-draw is forked to maplibre-gl-draw we should investigate removing these files and getting the dependencies from mapbox-gl-draw\n */\n\nconst extent = require(\"@mapbox/geojson-extent\");\nconst Constants = require(\"./constants\");\n\nconst { LAT_MIN, LAT_MAX, LAT_RENDERED_MIN, LAT_RENDERED_MAX, LNG_MIN, LNG_MAX } = Constants;\n\n// Ensure that we do not drag north-south far enough for\n// - any part of any feature to exceed the poles\n// - any feature to be completely lost in the space between the projection's\n//   edge and the poles, such that it couldn't be re-selected and moved back\nmodule.exports = function (geojsonFeatures, delta) {\n  // \"inner edge\" = a feature's latitude closest to the equator\n  let northInnerEdge = LAT_MIN;\n  let southInnerEdge = LAT_MAX;\n  // \"outer edge\" = a feature's latitude furthest from the equator\n  let northOuterEdge = LAT_MIN;\n  let southOuterEdge = LAT_MAX;\n\n  let westEdge = LNG_MAX;\n  let eastEdge = LNG_MIN;\n\n  geojsonFeatures.forEach((feature) => {\n    const bounds = extent(feature);\n    const featureSouthEdge = bounds[1];\n    const featureNorthEdge = bounds[3];\n    const featureWestEdge = bounds[0];\n    const featureEastEdge = bounds[2];\n    if (featureSouthEdge > northInnerEdge) northInnerEdge = featureSouthEdge;\n    if (featureNorthEdge < southInnerEdge) southInnerEdge = featureNorthEdge;\n    if (featureNorthEdge > northOuterEdge) northOuterEdge = featureNorthEdge;\n    if (featureSouthEdge < southOuterEdge) southOuterEdge = featureSouthEdge;\n    if (featureWestEdge < westEdge) westEdge = featureWestEdge;\n    if (featureEastEdge > eastEdge) eastEdge = featureEastEdge;\n  });\n\n  // These changes are not mutually exclusive: we might hit the inner\n  // edge but also have hit the outer edge and therefore need\n  // another readjustment\n  const constrainedDelta = delta;\n  if (northInnerEdge + constrainedDelta.lat > LAT_RENDERED_MAX) {\n    constrainedDelta.lat = LAT_RENDERED_MAX - northInnerEdge;\n  }\n  if (northOuterEdge + constrainedDelta.lat > LAT_MAX) {\n    constrainedDelta.lat = LAT_MAX - northOuterEdge;\n  }\n  if (southInnerEdge + constrainedDelta.lat < LAT_RENDERED_MIN) {\n    constrainedDelta.lat = LAT_RENDERED_MIN - southInnerEdge;\n  }\n  if (southOuterEdge + constrainedDelta.lat < LAT_MIN) {\n    constrainedDelta.lat = LAT_MIN - southOuterEdge;\n  }\n  if (westEdge + constrainedDelta.lng <= LNG_MIN) {\n    constrainedDelta.lng += Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;\n  }\n  if (eastEdge + constrainedDelta.lng >= LNG_MAX) {\n    constrainedDelta.lng -= Math.ceil(Math.abs(constrainedDelta.lng) / 360) * 360;\n  }\n\n  return constrainedDelta;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAChD,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AAExC,MAAM;EAAEE,OAAO;EAAEC,OAAO;EAAEC,gBAAgB;EAAEC,gBAAgB;EAAEC,OAAO;EAAEC;AAAQ,CAAC,GAAGN,SAAS;;AAE5F;AACA;AACA;AACA;AACAO,MAAM,CAACC,OAAO,GAAG,UAAUC,eAAe,EAAEC,KAAK,EAAE;EACjD;EACA,IAAIC,cAAc,GAAGV,OAAO;EAC5B,IAAIW,cAAc,GAAGV,OAAO;EAC5B;EACA,IAAIW,cAAc,GAAGZ,OAAO;EAC5B,IAAIa,cAAc,GAAGZ,OAAO;EAE5B,IAAIa,QAAQ,GAAGT,OAAO;EACtB,IAAIU,QAAQ,GAAGX,OAAO;EAEtBI,eAAe,CAACQ,OAAO,CAAEC,OAAO,IAAK;IACnC,MAAMC,MAAM,GAAGrB,MAAM,CAACoB,OAAO,CAAC;IAC9B,MAAME,gBAAgB,GAAGD,MAAM,CAAC,CAAC,CAAC;IAClC,MAAME,gBAAgB,GAAGF,MAAM,CAAC,CAAC,CAAC;IAClC,MAAMG,eAAe,GAAGH,MAAM,CAAC,CAAC,CAAC;IACjC,MAAMI,eAAe,GAAGJ,MAAM,CAAC,CAAC,CAAC;IACjC,IAAIC,gBAAgB,GAAGT,cAAc,EAAEA,cAAc,GAAGS,gBAAgB;IACxE,IAAIC,gBAAgB,GAAGT,cAAc,EAAEA,cAAc,GAAGS,gBAAgB;IACxE,IAAIA,gBAAgB,GAAGR,cAAc,EAAEA,cAAc,GAAGQ,gBAAgB;IACxE,IAAID,gBAAgB,GAAGN,cAAc,EAAEA,cAAc,GAAGM,gBAAgB;IACxE,IAAIE,eAAe,GAAGP,QAAQ,EAAEA,QAAQ,GAAGO,eAAe;IAC1D,IAAIC,eAAe,GAAGP,QAAQ,EAAEA,QAAQ,GAAGO,eAAe;EAC5D,CAAC,CAAC;;EAEF;EACA;EACA;EACA,MAAMC,gBAAgB,GAAGd,KAAK;EAC9B,IAAIC,cAAc,GAAGa,gBAAgB,CAACC,GAAG,GAAGrB,gBAAgB,EAAE;IAC5DoB,gBAAgB,CAACC,GAAG,GAAGrB,gBAAgB,GAAGO,cAAc;EAC1D;EACA,IAAIE,cAAc,GAAGW,gBAAgB,CAACC,GAAG,GAAGvB,OAAO,EAAE;IACnDsB,gBAAgB,CAACC,GAAG,GAAGvB,OAAO,GAAGW,cAAc;EACjD;EACA,IAAID,cAAc,GAAGY,gBAAgB,CAACC,GAAG,GAAGtB,gBAAgB,EAAE;IAC5DqB,gBAAgB,CAACC,GAAG,GAAGtB,gBAAgB,GAAGS,cAAc;EAC1D;EACA,IAAIE,cAAc,GAAGU,gBAAgB,CAACC,GAAG,GAAGxB,OAAO,EAAE;IACnDuB,gBAAgB,CAACC,GAAG,GAAGxB,OAAO,GAAGa,cAAc;EACjD;EACA,IAAIC,QAAQ,GAAGS,gBAAgB,CAACE,GAAG,IAAIrB,OAAO,EAAE;IAC9CmB,gBAAgB,CAACE,GAAG,IAAIC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAACL,gBAAgB,CAACE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/E;EACA,IAAIV,QAAQ,GAAGQ,gBAAgB,CAACE,GAAG,IAAIpB,OAAO,EAAE;IAC9CkB,gBAAgB,CAACE,GAAG,IAAIC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAACL,gBAAgB,CAACE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/E;EAEA,OAAOF,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}