{"ast":null,"code":"const MapboxDraw = require('@mapbox/mapbox-gl-draw');\nconst createSupplementaryPoints = require('../utils/create_supplementary_points');\nconst moveFeatures = require('../utils/move_features');\nconst Constants = require('../utils/constants');\nconst constrainFeatureMovement = require(\"../utils/constrain_feature_movement\");\nconst distance = require('@turf/distance').default;\nconst turfHelpers = require('@turf/helpers');\nconst circle = require('@turf/circle').default;\nconst createSupplementaryPointsForCircle = require('../utils/create_supplementary_points_circle');\nconst DirectModeOverride = MapboxDraw.modes.direct_select;\nDirectModeOverride.dragFeature = function (state, e, delta) {\n  moveFeatures(this.getSelected(), delta);\n  this.getSelected().filter(feature => feature.properties.isCircle).map(circle => circle.properties.center).forEach(center => {\n    center[0] += delta.lng;\n    center[1] += delta.lat;\n  });\n  state.dragMoveLocation = e.lngLat;\n};\nDirectModeOverride.dragVertex = function (state, e, delta) {\n  if (state.feature.properties.isCircle) {\n    const center = state.feature.properties.center;\n    const movedVertex = [e.lngLat.lng, e.lngLat.lat];\n    const radius = distance(turfHelpers.point(center), turfHelpers.point(movedVertex), {\n      units: 'kilometers'\n    });\n    const circleFeature = circle(center, radius);\n    state.feature.incomingCoords(circleFeature.geometry.coordinates);\n    state.feature.properties.radiusInKm = radius;\n  } else {\n    const selectedCoords = state.selectedCoordPaths.map(coord_path => state.feature.getCoordinate(coord_path));\n    const selectedCoordPoints = selectedCoords.map(coords => ({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: {},\n      geometry: {\n        type: Constants.geojsonTypes.POINT,\n        coordinates: coords\n      }\n    }));\n    const constrainedDelta = constrainFeatureMovement(selectedCoordPoints, delta);\n    for (let i = 0; i < selectedCoords.length; i++) {\n      const coord = selectedCoords[i];\n      state.feature.updateCoordinate(state.selectedCoordPaths[i], coord[0] + constrainedDelta.lng, coord[1] + constrainedDelta.lat);\n    }\n  }\n};\nDirectModeOverride.toDisplayFeatures = function (state, geojson, push) {\n  if (state.featureId === geojson.properties.id) {\n    geojson.properties.active = Constants.activeStates.ACTIVE;\n    push(geojson);\n    const supplementaryPoints = geojson.properties.user_isCircle ? createSupplementaryPointsForCircle(geojson) : createSupplementaryPoints(geojson, {\n      map: this.map,\n      midpoints: true,\n      selectedPaths: state.selectedCoordPaths\n    });\n    supplementaryPoints.forEach(push);\n  } else {\n    geojson.properties.active = Constants.activeStates.INACTIVE;\n    push(geojson);\n  }\n  this.fireActionable(state);\n};\nmodule.exports = DirectModeOverride;","map":{"version":3,"names":["MapboxDraw","require","createSupplementaryPoints","moveFeatures","Constants","constrainFeatureMovement","distance","default","turfHelpers","circle","createSupplementaryPointsForCircle","DirectModeOverride","modes","direct_select","dragFeature","state","e","delta","getSelected","filter","feature","properties","isCircle","map","center","forEach","lng","lat","dragMoveLocation","lngLat","dragVertex","movedVertex","radius","point","units","circleFeature","incomingCoords","geometry","coordinates","radiusInKm","selectedCoords","selectedCoordPaths","coord_path","getCoordinate","selectedCoordPoints","coords","type","geojsonTypes","FEATURE","POINT","constrainedDelta","i","length","coord","updateCoordinate","toDisplayFeatures","geojson","push","featureId","id","active","activeStates","ACTIVE","supplementaryPoints","user_isCircle","midpoints","selectedPaths","INACTIVE","fireActionable","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/maplibre-gl-draw-circle/lib/modes/DirectModeOverride.js"],"sourcesContent":["const MapboxDraw = require('@mapbox/mapbox-gl-draw');\nconst createSupplementaryPoints = require('../utils/create_supplementary_points');\nconst moveFeatures = require('../utils/move_features');\nconst Constants = require('../utils/constants');\nconst constrainFeatureMovement = require(\"../utils/constrain_feature_movement\");\nconst distance = require('@turf/distance').default;\nconst turfHelpers = require('@turf/helpers');\nconst circle = require('@turf/circle').default;\nconst createSupplementaryPointsForCircle = require('../utils/create_supplementary_points_circle');\n\n\nconst DirectModeOverride = MapboxDraw.modes.direct_select;\n\nDirectModeOverride.dragFeature = function(state, e, delta) {\n  moveFeatures(this.getSelected(), delta);\n  this.getSelected()\n    .filter(feature => feature.properties.isCircle)\n    .map(circle => circle.properties.center)\n    .forEach(center => {\n      center[0] += delta.lng;\n      center[1] += delta.lat;\n    });\n  state.dragMoveLocation = e.lngLat;\n};\n\nDirectModeOverride.dragVertex = function(state, e, delta) {\n  if (state.feature.properties.isCircle) {\n    const center = state.feature.properties.center;\n    const movedVertex = [e.lngLat.lng, e.lngLat.lat];\n    const radius = distance(turfHelpers.point(center), turfHelpers.point(movedVertex), {units: 'kilometers'});\n    const circleFeature = circle(center, radius);\n    state.feature.incomingCoords(circleFeature.geometry.coordinates);\n    state.feature.properties.radiusInKm = radius;\n  } else {\n    const selectedCoords = state.selectedCoordPaths.map(coord_path => state.feature.getCoordinate(coord_path));\n    const selectedCoordPoints = selectedCoords.map(coords => ({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: {},\n      geometry: {\n        type: Constants.geojsonTypes.POINT,\n        coordinates: coords\n      }\n    }));\n\n    const constrainedDelta = constrainFeatureMovement(selectedCoordPoints, delta);\n    for (let i = 0; i < selectedCoords.length; i++) {\n      const coord = selectedCoords[i];\n      state.feature.updateCoordinate(state.selectedCoordPaths[i], coord[0] + constrainedDelta.lng, coord[1] + constrainedDelta.lat);\n    }\n  }\n};\n\nDirectModeOverride.toDisplayFeatures = function (state, geojson, push) {\n  if (state.featureId === geojson.properties.id) {\n    geojson.properties.active = Constants.activeStates.ACTIVE;\n    push(geojson);\n    const supplementaryPoints = geojson.properties.user_isCircle ? createSupplementaryPointsForCircle(geojson)\n      : createSupplementaryPoints(geojson, {\n        map: this.map,\n        midpoints: true,\n        selectedPaths: state.selectedCoordPaths\n      });\n    supplementaryPoints.forEach(push);\n  } else {\n    geojson.properties.active = Constants.activeStates.INACTIVE;\n    push(geojson);\n  }\n  this.fireActionable(state);\n\n}\n\nmodule.exports = DirectModeOverride;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}