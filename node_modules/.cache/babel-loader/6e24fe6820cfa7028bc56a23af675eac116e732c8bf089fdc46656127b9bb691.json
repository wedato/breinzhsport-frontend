{"ast":null,"code":"/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Buffer } from 'buffer';\nimport { Sha256 } from '@aws-crypto/sha256-js';\nimport { Platform } from './Platform';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\nvar isNavigatorAvailable = typeof navigator !== 'undefined';\nvar userAgent = isNavigatorAvailable ? Platform.isReactNative ? 'react-native' : navigator.userAgent : 'nodejs';\n\n/** @class */\nvar CognitoUser = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and Pool information are required.');\n    }\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + \".\" + this.username + \".userData\";\n  }\n\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n  var _proto = CognitoUser.prototype;\n  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  }\n\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */;\n  _proto.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  }\n\n  /**\n   * @returns {string} the user's username\n   */;\n  _proto.getUsername = function getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {String} the authentication flow type\n   */;\n  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */;\n  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n  _proto.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n      _this.cacheTokens();\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  }\n\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n  _proto.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());\n    var dateHelper = new DateHelper();\n    var serverBValue;\n    var salt;\n    var authParameters = {};\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n      authParameters.SRP_A = aValue.toString(16);\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        _this2.userDataKey = _this2.keyPrefix + \".\" + _this2.username + \".userData\";\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n        _this2.getCachedDeviceKeyAndPassword();\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n          var dateNow = dateHelper.getNowString();\n          var concatBuffer = Buffer.concat([Buffer.from(_this2.pool.getUserPoolName(), 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]);\n          var awsCryptoHash = new Sha256(hkdf);\n          awsCryptoHash.update(concatBuffer);\n          var resultFromAWSCrypto = awsCryptoHash.digestSync();\n          var signatureString = Buffer.from(resultFromAWSCrypto).toString('base64');\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n          var _respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n                _this2.clearCachedDeviceKeyAndPassword();\n                return _respondToAuthChallenge(challenge, challengeCallback);\n              }\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n          _respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined;\n          // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      });\n      // getLargeAValue callback end\n    });\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    }\n    // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */;\n  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.Session = dataAuthenticate.Session;\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n        _this4.cacheDeviceKeyAndPassword();\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n      return undefined;\n    });\n    return undefined;\n  }\n\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */;\n  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata,\n        Session: _this6.Session\n      };\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n          var dateNow = dateHelper.getNowString();\n          var concatBuffer = Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]);\n          var awsCryptoHash = new Sha256(hkdf);\n          awsCryptoHash.update(concatBuffer);\n          var resultFromAWSCrypto = awsCryptoHash.digestSync();\n          var signatureString = Buffer.from(resultFromAWSCrypto).toString('base64');\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n            _this6.cacheTokens();\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n          return undefined;\n          // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      });\n      // getLargeAValue callback end\n    });\n  }\n\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  }\n\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      var challengeName = dataAuthenticate.ChallengeName;\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n        return undefined;\n      }\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n      _this8.cacheTokens();\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolName());\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n          _this8.cacheDeviceKeyAndPassword();\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n        return undefined;\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      _this9.clearCachedUser();\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    var _this10 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      // update cached user\n      return _this10.getUserData(function () {\n        return callback(null, 'SUCCESS', result);\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n      var attributeList = [];\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.createGetUserRequest = function createGetUserRequest() {\n    return this.client.promisifyRequest('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    });\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {\n    var _this11 = this;\n    if (options === void 0) {\n      options = {};\n    }\n    // best effort, if not possible\n    return new Promise(function (resolve) {\n      var refresh = _this11.signInUserSession.getRefreshToken();\n      if (refresh && refresh.getToken()) {\n        _this11.refreshSession(refresh, resolve, options.clientMetadata);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * @typedef {Object} GetUserDataOptions\n   * @property {boolean} bypassCache - force getting data from Cognito service\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @param {GetUserDataOptions} params\n   * @returns {void}\n   */;\n  _proto.getUserData = function getUserData(callback, params) {\n    var _this12 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var userData = this.getUserDataFromCache();\n    if (!userData) {\n      this.fetchUserData().then(function (data) {\n        callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n    if (this.isFetchUserDataAndTokenRequired(params)) {\n      this.fetchUserData().then(function (data) {\n        return _this12.refreshSessionIfPossible(params).then(function () {\n          return data;\n        });\n      }).then(function (data) {\n        return callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n    try {\n      callback(null, JSON.parse(userData));\n      return;\n    } catch (err) {\n      this.clearCachedUserData();\n      callback(err, null);\n      return;\n    }\n  }\n\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.getUserDataFromCache = function getUserDataFromCache() {\n    var userData = this.storage.getItem(this.userDataKey);\n    return userData;\n  }\n\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {\n    var _ref = params || {},\n      _ref$bypassCache = _ref.bypassCache,\n      bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;\n    return bypassCache;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.fetchUserData = function fetchUserData() {\n    var _this13 = this;\n    return this.createGetUserRequest().then(function (data) {\n      _this13.cacheUserData(data);\n      return data;\n    });\n  }\n\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    var _this14 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      // update cached user\n      return _this14.getUserData(function () {\n        return callback(null, 'SUCCESS');\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, result);\n    });\n  }\n\n  /**\n   * @typedef {Object} GetSessionOptions\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {GetSessionOptions} options\n   * @returns {void}\n   */;\n  _proto.getSession = function getSession(callback, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var idTokenKey = keyPrefix + \".idToken\";\n    var accessTokenKey = keyPrefix + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".clockDrift\";\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n      this.refreshSession(refreshToken, callback, options.clientMetadata);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this15 = this;\n    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + \".\" + this.username + \".deviceKey\";\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.requestWithRetry('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this15.clearCachedUser();\n        }\n        return wrappedCallback(err, null);\n      }\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n        _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);\n        _this15.cacheTokens();\n        return wrappedCallback(null, _this15.signInUserSession);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */;\n  _proto.cacheTokens = function cacheTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, \"\" + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  }\n\n  /**\n   * This is to cache user data\n   */;\n  _proto.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  }\n\n  /**\n   * This is to remove cached user data\n   */;\n  _proto.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n  _proto.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  }\n\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */;\n  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */;\n  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  }\n\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */;\n  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  }\n\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */;\n  _proto.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  }\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */;\n  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  }\n\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess(data);\n    });\n  }\n\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n  }\n\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */;\n  _proto.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.forgetDevice = function forgetDevice(callback) {\n    var _this16 = this;\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this16.deviceKey = null;\n        _this16.deviceGroupKey = null;\n        _this16.randomPassword = null;\n        _this16.clearCachedDeviceKeyAndPassword();\n        return callback.onSuccess(result);\n      }\n    });\n  }\n\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string | null} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */;\n  _proto.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    var requestParams = {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit\n    };\n    if (paginationToken) {\n      requestParams.PaginationToken = paginationToken;\n    }\n    this.client.request('ListDevices', requestParams, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.globalSignOut = function globalSignOut(callback) {\n    var _this17 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this17.clearCachedUser();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */;\n  _proto.signOut = function signOut(revokeTokenCallback) {\n    var _this18 = this;\n    // If tokens won't be revoked, we just clean the client data.\n    if (!revokeTokenCallback || typeof revokeTokenCallback !== 'function') {\n      this.cleanClientData();\n      return;\n    }\n    this.getSession(function (error, _session) {\n      if (error) {\n        return revokeTokenCallback(error);\n      }\n      _this18.revokeTokens(function (err) {\n        _this18.cleanClientData();\n        revokeTokenCallback(err);\n      });\n    });\n  };\n  _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {\n    if (revokeTokenCallback === void 0) {\n      revokeTokenCallback = function revokeTokenCallback() {};\n    }\n    if (typeof revokeTokenCallback !== 'function') {\n      throw new Error('Invalid revokeTokenCallback. It should be a function.');\n    }\n    var tokensToBeRevoked = [];\n    if (!this.signInUserSession) {\n      var error = new Error('User is not authenticated');\n      return revokeTokenCallback(error);\n    }\n    if (!this.signInUserSession.getAccessToken()) {\n      var _error = new Error('No Access token available');\n      return revokeTokenCallback(_error);\n    }\n    var refreshToken = this.signInUserSession.getRefreshToken().getToken();\n    var accessToken = this.signInUserSession.getAccessToken();\n    if (this.isSessionRevocable(accessToken)) {\n      if (refreshToken) {\n        return this.revokeToken({\n          token: refreshToken,\n          callback: revokeTokenCallback\n        });\n      }\n    }\n    revokeTokenCallback();\n  };\n  _proto.isSessionRevocable = function isSessionRevocable(token) {\n    if (token && typeof token.decodePayload === 'function') {\n      try {\n        var _token$decodePayload = token.decodePayload(),\n          origin_jti = _token$decodePayload.origin_jti;\n        return !!origin_jti;\n      } catch (err) {\n        // Nothing to do, token doesnt have origin_jti claim\n      }\n    }\n    return false;\n  };\n  _proto.cleanClientData = function cleanClientData() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  };\n  _proto.revokeToken = function revokeToken(_ref2) {\n    var token = _ref2.token,\n      callback = _ref2.callback;\n    this.client.requestWithRetry('RevokeToken', {\n      Token: token,\n      ClientId: this.pool.getClientId()\n    }, function (err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    });\n  }\n\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this19 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this19.Session = data.Session;\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {string} the user context data from CognitoUserPool\n   */;\n  _proto.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  }\n\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this20 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this20.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  }\n\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this21 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this21.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this21.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this21.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this21.Session\n        };\n        if (_this21.getUserContextData()) {\n          jsonReq.UserContextData = _this21.getUserContextData();\n        }\n        _this21.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n          _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);\n          _this21.cacheTokens();\n          return callback.onSuccess(_this21.signInUserSession);\n        });\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.onSuccess(data);\n      });\n    }\n  };\n  return CognitoUser;\n}();\nexport { CognitoUser as default };","map":{"version":3,"names":["Buffer","Sha256","Platform","BigInteger","AuthenticationHelper","CognitoAccessToken","CognitoIdToken","CognitoRefreshToken","CognitoUserSession","DateHelper","CognitoUserAttribute","StorageHelper","isNavigatorAvailable","navigator","userAgent","isReactNative","CognitoUser","data","Username","Pool","Error","username","pool","Session","client","signInUserSession","authenticationFlowType","storage","Storage","getStorage","keyPrefix","getClientId","userDataKey","_proto","prototype","setSignInUserSession","clearCachedUserData","cacheTokens","getSignInUserSession","getUsername","getAuthenticationFlowType","setAuthenticationFlowType","initiateAuth","authDetails","callback","_this","authParameters","getAuthParameters","USERNAME","clientMetaData","Object","keys","getValidationData","length","getClientMetadata","jsonReq","AuthFlow","ClientId","AuthParameters","ClientMetadata","getUserContextData","UserContextData","request","err","onFailure","challengeName","ChallengeName","challengeParameters","ChallengeParameters","customChallenge","getCognitoUserSession","AuthenticationResult","onSuccess","authenticateUser","authenticateUserPlainUsernamePassword","authenticateUserDefaultAuth","_this2","authenticationHelper","getUserPoolName","dateHelper","serverBValue","salt","deviceKey","DEVICE_KEY","getLargeAValue","errOnAValue","aValue","SRP_A","toString","CHALLENGE_NAME","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","errOnHkdf","hkdf","dateNow","getNowString","concatBuffer","concat","from","SECRET_BLOCK","awsCryptoHash","update","resultFromAWSCrypto","digestSync","signatureString","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","_respondToAuthChallenge","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","message","toLowerCase","indexOf","randomPassword","deviceGroupKey","clearCachedDeviceKeyAndPassword","jsonReqResp","ChallengeResponses","errAuthenticate","dataAuthenticate","authenticateUserInternal","undefined","_this3","PASSWORD","authResult","_this4","mfaRequired","selectMFAType","mfaSetup","totpRequired","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","JSON","parse","i","substr","newPasswordRequired","getDeviceResponse","newDeviceMetadata","NewDeviceMetadata","generateHashDevice","DeviceGroupKey","DeviceKey","errGenHash","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","verifierDevices","getRandomPassword","AccessToken","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","completeNewPasswordChallenge","newPassword","requiredAttributeData","clientMetadata","_this5","finalUserAttributes","forEach","key","NEW_PASSWORD","_this6","errAValue","errHkdf","confirmRegistration","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","sendCustomChallengeAnswer","answerChallenge","_this7","ANSWER","sendMFACode","mfaType","_this8","SMS_MFA_CODE","mfaTypeSelection","SOFTWARE_TOKEN_MFA_CODE","changePassword","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","enableMFA","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","setUserMfaPreference","smsMfaSettings","softwareTokenMfaSettings","SMSMfaSettings","SoftwareTokenMfaSettings","disableMFA","deleteUser","_this9","clearCachedUser","updateAttributes","attributes","_this10","UserAttributes","result","getUserData","bypassCache","getUserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","getMFAOptions","createGetUserRequest","promisifyRequest","refreshSessionIfPossible","options","_this11","Promise","resolve","refresh","getRefreshToken","getToken","refreshSession","params","_this12","getUserDataFromCache","fetchUserData","then","isFetchUserDataAndTokenRequired","getItem","_ref","_ref$bypassCache","_this13","cacheUserData","deleteAttributes","_this14","UserAttributeNames","resendConfirmationCode","getSession","idTokenKey","accessTokenKey","refreshTokenKey","clockDriftKey","idToken","IdToken","accessToken","refreshToken","RefreshToken","clockDrift","parseInt","sessionData","ClockDrift","cachedSession","_this15","wrappedCallback","wrapRefreshSessionCallback","REFRESH_TOKEN","lastUserKey","deviceKeyKey","requestWithRetry","authenticationResult","hasOwnProperty","call","setItem","getIdToken","getClockDrift","stringify","removeItem","clearCachedTokens","randomPasswordKey","deviceGroupKeyKey","forgotPassword","inputVerificationCode","confirmPassword","Password","getAttributeVerificationCode","attributeName","verifyAttribute","Code","getDevice","forgetSpecificDevice","forgetDevice","_this16","setDeviceStatusRemembered","DeviceRememberedStatus","setDeviceStatusNotRemembered","listDevices","limit","paginationToken","requestParams","Limit","PaginationToken","globalSignOut","_this17","signOut","revokeTokenCallback","_this18","cleanClientData","error","_session","revokeTokens","tokensToBeRevoked","_error","isSessionRevocable","revokeToken","token","decodePayload","_token$decodePayload","origin_jti","_ref2","Token","sendMFASelectionAnswer","_this19","associateSoftwareToken","_this20","associateSecretCode","SecretCode","verifySoftwareToken","totpCode","friendlyDeviceName","_this21","UserCode","FriendlyDeviceName","errRespond","dataRespond","default"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/amazon-cognito-identity-js/es/CognitoUser.js"],"sourcesContent":["/*!\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Buffer } from 'buffer';\nimport { Sha256 } from '@aws-crypto/sha256-js';\nimport { Platform } from './Platform';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\nvar isNavigatorAvailable = typeof navigator !== 'undefined';\nvar userAgent = isNavigatorAvailable ? Platform.isReactNative ? 'react-native' : navigator.userAgent : 'nodejs';\n\n/** @class */\nvar CognitoUser = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and Pool information are required.');\n    }\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + \".\" + this.username + \".userData\";\n  }\n\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n  var _proto = CognitoUser.prototype;\n  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  }\n\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */;\n  _proto.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  }\n\n  /**\n   * @returns {string} the user's username\n   */;\n  _proto.getUsername = function getUsername() {\n    return this.username;\n  }\n\n  /**\n   * @returns {String} the authentication flow type\n   */;\n  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */;\n  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n  _proto.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n      _this.cacheTokens();\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  }\n\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n  _proto.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());\n    var dateHelper = new DateHelper();\n    var serverBValue;\n    var salt;\n    var authParameters = {};\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n      authParameters.SRP_A = aValue.toString(16);\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        _this2.userDataKey = _this2.keyPrefix + \".\" + _this2.username + \".userData\";\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n        _this2.getCachedDeviceKeyAndPassword();\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n          var dateNow = dateHelper.getNowString();\n          var concatBuffer = Buffer.concat([Buffer.from(_this2.pool.getUserPoolName(), 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]);\n          var awsCryptoHash = new Sha256(hkdf);\n          awsCryptoHash.update(concatBuffer);\n          var resultFromAWSCrypto = awsCryptoHash.digestSync();\n          var signatureString = Buffer.from(resultFromAWSCrypto).toString('base64');\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n          var _respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n                _this2.clearCachedDeviceKeyAndPassword();\n                return _respondToAuthChallenge(challenge, challengeCallback);\n              }\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n          _respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined;\n          // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      });\n      // getLargeAValue callback end\n    });\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    }\n    // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */;\n  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.Session = dataAuthenticate.Session;\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n        _this4.cacheDeviceKeyAndPassword();\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n      return undefined;\n    });\n    return undefined;\n  }\n\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */;\n  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata,\n        Session: _this6.Session\n      };\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n          var dateNow = dateHelper.getNowString();\n          var concatBuffer = Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]);\n          var awsCryptoHash = new Sha256(hkdf);\n          awsCryptoHash.update(concatBuffer);\n          var resultFromAWSCrypto = awsCryptoHash.digestSync();\n          var signatureString = Buffer.from(resultFromAWSCrypto).toString('base64');\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n            _this6.cacheTokens();\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n          return undefined;\n          // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      });\n      // getLargeAValue callback end\n    });\n  }\n\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolName());\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  }\n\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      var challengeName = dataAuthenticate.ChallengeName;\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n        return undefined;\n      }\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n      _this8.cacheTokens();\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolName());\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n          _this8.cacheDeviceKeyAndPassword();\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n        return undefined;\n      });\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      _this9.clearCachedUser();\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    var _this10 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      // update cached user\n      return _this10.getUserData(function () {\n        return callback(null, 'SUCCESS', result);\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n      var attributeList = [];\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.createGetUserRequest = function createGetUserRequest() {\n    return this.client.promisifyRequest('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    });\n  }\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {\n    var _this11 = this;\n    if (options === void 0) {\n      options = {};\n    }\n    // best effort, if not possible\n    return new Promise(function (resolve) {\n      var refresh = _this11.signInUserSession.getRefreshToken();\n      if (refresh && refresh.getToken()) {\n        _this11.refreshSession(refresh, resolve, options.clientMetadata);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * @typedef {Object} GetUserDataOptions\n   * @property {boolean} bypassCache - force getting data from Cognito service\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @param {GetUserDataOptions} params\n   * @returns {void}\n   */;\n  _proto.getUserData = function getUserData(callback, params) {\n    var _this12 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var userData = this.getUserDataFromCache();\n    if (!userData) {\n      this.fetchUserData().then(function (data) {\n        callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n    if (this.isFetchUserDataAndTokenRequired(params)) {\n      this.fetchUserData().then(function (data) {\n        return _this12.refreshSessionIfPossible(params).then(function () {\n          return data;\n        });\n      }).then(function (data) {\n        return callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n    try {\n      callback(null, JSON.parse(userData));\n      return;\n    } catch (err) {\n      this.clearCachedUserData();\n      callback(err, null);\n      return;\n    }\n  }\n\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.getUserDataFromCache = function getUserDataFromCache() {\n    var userData = this.storage.getItem(this.userDataKey);\n    return userData;\n  }\n\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {\n    var _ref = params || {},\n      _ref$bypassCache = _ref.bypassCache,\n      bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;\n    return bypassCache;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n  _proto.fetchUserData = function fetchUserData() {\n    var _this13 = this;\n    return this.createGetUserRequest().then(function (data) {\n      _this13.cacheUserData(data);\n      return data;\n    });\n  }\n\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    var _this14 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      // update cached user\n      return _this14.getUserData(function () {\n        return callback(null, 'SUCCESS');\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, result);\n    });\n  }\n\n  /**\n   * @typedef {Object} GetSessionOptions\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {GetSessionOptions} options\n   * @returns {void}\n   */;\n  _proto.getSession = function getSession(callback, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var idTokenKey = keyPrefix + \".idToken\";\n    var accessTokenKey = keyPrefix + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".clockDrift\";\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n      this.refreshSession(refreshToken, callback, options.clientMetadata);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n    return undefined;\n  }\n\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this15 = this;\n    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + \".\" + this.username + \".deviceKey\";\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.requestWithRetry('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this15.clearCachedUser();\n        }\n        return wrappedCallback(err, null);\n      }\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n        _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);\n        _this15.cacheTokens();\n        return wrappedCallback(null, _this15.signInUserSession);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */;\n  _proto.cacheTokens = function cacheTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, \"\" + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  }\n\n  /**\n   * This is to cache user data\n   */;\n  _proto.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  }\n\n  /**\n   * This is to remove cached user data\n   */;\n  _proto.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n  _proto.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  }\n\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */;\n  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */;\n  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  }\n\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */;\n  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  }\n\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */;\n  _proto.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  }\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */;\n  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  }\n\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess(data);\n    });\n  }\n\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n  }\n\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */;\n  _proto.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.forgetDevice = function forgetDevice(callback) {\n    var _this16 = this;\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this16.deviceKey = null;\n        _this16.deviceGroupKey = null;\n        _this16.randomPassword = null;\n        _this16.clearCachedDeviceKeyAndPassword();\n        return callback.onSuccess(result);\n      }\n    });\n  }\n\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string | null} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */;\n  _proto.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    var requestParams = {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit\n    };\n    if (paginationToken) {\n      requestParams.PaginationToken = paginationToken;\n    }\n    this.client.request('ListDevices', requestParams, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n  _proto.globalSignOut = function globalSignOut(callback) {\n    var _this17 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this17.clearCachedUser();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */;\n  _proto.signOut = function signOut(revokeTokenCallback) {\n    var _this18 = this;\n    // If tokens won't be revoked, we just clean the client data.\n    if (!revokeTokenCallback || typeof revokeTokenCallback !== 'function') {\n      this.cleanClientData();\n      return;\n    }\n    this.getSession(function (error, _session) {\n      if (error) {\n        return revokeTokenCallback(error);\n      }\n      _this18.revokeTokens(function (err) {\n        _this18.cleanClientData();\n        revokeTokenCallback(err);\n      });\n    });\n  };\n  _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {\n    if (revokeTokenCallback === void 0) {\n      revokeTokenCallback = function revokeTokenCallback() {};\n    }\n    if (typeof revokeTokenCallback !== 'function') {\n      throw new Error('Invalid revokeTokenCallback. It should be a function.');\n    }\n    var tokensToBeRevoked = [];\n    if (!this.signInUserSession) {\n      var error = new Error('User is not authenticated');\n      return revokeTokenCallback(error);\n    }\n    if (!this.signInUserSession.getAccessToken()) {\n      var _error = new Error('No Access token available');\n      return revokeTokenCallback(_error);\n    }\n    var refreshToken = this.signInUserSession.getRefreshToken().getToken();\n    var accessToken = this.signInUserSession.getAccessToken();\n    if (this.isSessionRevocable(accessToken)) {\n      if (refreshToken) {\n        return this.revokeToken({\n          token: refreshToken,\n          callback: revokeTokenCallback\n        });\n      }\n    }\n    revokeTokenCallback();\n  };\n  _proto.isSessionRevocable = function isSessionRevocable(token) {\n    if (token && typeof token.decodePayload === 'function') {\n      try {\n        var _token$decodePayload = token.decodePayload(),\n          origin_jti = _token$decodePayload.origin_jti;\n        return !!origin_jti;\n      } catch (err) {\n        // Nothing to do, token doesnt have origin_jti claim\n      }\n    }\n    return false;\n  };\n  _proto.cleanClientData = function cleanClientData() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  };\n  _proto.revokeToken = function revokeToken(_ref2) {\n    var token = _ref2.token,\n      callback = _ref2.callback;\n    this.client.requestWithRetry('RevokeToken', {\n      Token: token,\n      ClientId: this.pool.getClientId()\n    }, function (err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    });\n  }\n\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this19 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this19.Session = data.Session;\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {string} the user context data from CognitoUserPool\n   */;\n  _proto.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  }\n\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this20 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this20.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  }\n\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this21 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this21.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this21.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this21.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this21.Session\n        };\n        if (_this21.getUserContextData()) {\n          jsonReq.UserContextData = _this21.getUserContextData();\n        }\n        _this21.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n          _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);\n          _this21.cacheTokens();\n          return callback.onSuccess(_this21.signInUserSession);\n        });\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.onSuccess(data);\n      });\n    }\n  };\n  return CognitoUser;\n}();\nexport { CognitoUser as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}