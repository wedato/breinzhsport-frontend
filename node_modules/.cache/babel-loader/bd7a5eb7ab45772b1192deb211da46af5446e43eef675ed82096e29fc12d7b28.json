{"ast":null,"code":"\"use strict\";\n\nvar logger = require('./logger');\n/**\n * A module representing the X-Ray daemon configuration including the udp and tcp addresses.\n * @module DaemonConfig\n */\nvar DaemonConfig = {\n  udp_ip: '127.0.0.1',\n  udp_port: 2000,\n  tcp_ip: '127.0.0.1',\n  tcp_port: 2000,\n  setDaemonAddress: function setDaemonAddress(address) {\n    if (!process.env.AWS_XRAY_DAEMON_ADDRESS) {\n      processAddress(address);\n      logger.getLogger().info('Configured daemon address to ' + address + '.');\n    } else {\n      logger.getLogger().warn('Ignoring call to setDaemonAddress as AWS_XRAY_DAEMON_ADDRESS is set. ' + 'The current daemon address will not be changed.');\n    }\n  }\n};\nvar processAddress = function processAddress(address) {\n  if (address.indexOf(':') === -1) {\n    throw new Error('Invalid Daemon Address. You must specify an ip and port.');\n  } else {\n    var splitAddress = address.split(' ');\n    if (splitAddress.length === 1) {\n      // in format of 127.0.0.1:2000\n      if (address.indexOf('udp') > -1 || address.indexOf('tcp') > -1) {\n        throw new Error('Invalid Daemon Address. You must specify both tcp and udp addresses.');\n      }\n      var addr = address.split(':');\n      if (!addr[0]) {\n        throw new Error('Invalid Daemon Address. You must specify an ip.');\n      }\n      DaemonConfig.udp_ip = addr[0];\n      DaemonConfig.tcp_ip = addr[0];\n      DaemonConfig.udp_port = addr[1];\n      DaemonConfig.tcp_port = addr[1];\n    } else if (splitAddress.length === 2) {\n      // in format of udp:127.0.0.1:2000 tcp:127.0.0.1:2001\n      var part_1 = splitAddress[0].split(':');\n      var part_2 = splitAddress[1].split(':');\n      var addr_map = {};\n      addr_map[part_1[0]] = part_1;\n      addr_map[part_2[0]] = part_2;\n      DaemonConfig.udp_ip = addr_map['udp'][1];\n      DaemonConfig.udp_port = parseInt(addr_map['udp'][2]);\n      DaemonConfig.tcp_ip = addr_map['tcp'][1];\n      DaemonConfig.tcp_port = parseInt(addr_map['tcp'][2]);\n      if (!DaemonConfig.udp_port || !DaemonConfig.tcp_port) {\n        throw new Error('Invalid Daemon Address. You must specify port number.');\n      }\n    }\n  }\n};\nif (process.env.AWS_XRAY_DAEMON_ADDRESS) {\n  processAddress(process.env.AWS_XRAY_DAEMON_ADDRESS);\n}\nmodule.exports = DaemonConfig;","map":{"version":3,"names":["logger","require","DaemonConfig","udp_ip","udp_port","tcp_ip","tcp_port","setDaemonAddress","address","process","env","AWS_XRAY_DAEMON_ADDRESS","processAddress","getLogger","info","warn","indexOf","Error","splitAddress","split","length","addr","part_1","part_2","addr_map","parseInt","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/daemon_config.js"],"sourcesContent":["\"use strict\";\nvar logger = require('./logger');\n/**\n * A module representing the X-Ray daemon configuration including the udp and tcp addresses.\n * @module DaemonConfig\n */\nvar DaemonConfig = {\n    udp_ip: '127.0.0.1',\n    udp_port: 2000,\n    tcp_ip: '127.0.0.1',\n    tcp_port: 2000,\n    setDaemonAddress: function setDaemonAddress(address) {\n        if (!process.env.AWS_XRAY_DAEMON_ADDRESS) {\n            processAddress(address);\n            logger.getLogger().info('Configured daemon address to ' + address + '.');\n        }\n        else {\n            logger.getLogger().warn('Ignoring call to setDaemonAddress as AWS_XRAY_DAEMON_ADDRESS is set. ' +\n                'The current daemon address will not be changed.');\n        }\n    }\n};\nvar processAddress = function processAddress(address) {\n    if (address.indexOf(':') === -1) {\n        throw new Error('Invalid Daemon Address. You must specify an ip and port.');\n    }\n    else {\n        var splitAddress = address.split(' ');\n        if (splitAddress.length === 1) {\n            // in format of 127.0.0.1:2000\n            if (address.indexOf('udp') > -1 || address.indexOf('tcp') > -1) {\n                throw new Error('Invalid Daemon Address. You must specify both tcp and udp addresses.');\n            }\n            var addr = address.split(':');\n            if (!addr[0]) {\n                throw new Error('Invalid Daemon Address. You must specify an ip.');\n            }\n            DaemonConfig.udp_ip = addr[0];\n            DaemonConfig.tcp_ip = addr[0];\n            DaemonConfig.udp_port = addr[1];\n            DaemonConfig.tcp_port = addr[1];\n        }\n        else if (splitAddress.length === 2) {\n            // in format of udp:127.0.0.1:2000 tcp:127.0.0.1:2001\n            var part_1 = splitAddress[0].split(':');\n            var part_2 = splitAddress[1].split(':');\n            var addr_map = {};\n            addr_map[part_1[0]] = part_1;\n            addr_map[part_2[0]] = part_2;\n            DaemonConfig.udp_ip = addr_map['udp'][1];\n            DaemonConfig.udp_port = parseInt(addr_map['udp'][2]);\n            DaemonConfig.tcp_ip = addr_map['tcp'][1];\n            DaemonConfig.tcp_port = parseInt(addr_map['tcp'][2]);\n            if (!DaemonConfig.udp_port || !DaemonConfig.tcp_port) {\n                throw new Error('Invalid Daemon Address. You must specify port number.');\n            }\n        }\n    }\n};\nif (process.env.AWS_XRAY_DAEMON_ADDRESS) {\n    processAddress(process.env.AWS_XRAY_DAEMON_ADDRESS);\n}\nmodule.exports = DaemonConfig;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}