{"ast":null,"code":"import { getFeaturesFromData } from \"./utils\";\nimport { drawClusterLayer } from \"./drawClusterLayer\";\nimport { drawUnclusteredLayer } from \"./drawUnclusteredLayer\";\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n * @param {String} sourceName A user defined name used for determining the maplibre data source and the maplibre layers\n * @param {Coordinate[] | Feature[]} data An array of coordinate data or GeoJSON Features used as the data source for maplibre\n * @param {maplibre-gl-js-Map} map A maplibre-gl-js [map](https://maplibre.org/maplibre-gl-js-docs/api/map/) on which the points will be drawn\n * @param {Object} options An object containing options for changing the styles and features of the points rendered to the map, see the options for more details on available settings\n * @param {String} options.showCluster Determines whether or not points close together should be clustered into a single point\n * @param {String} options.clusterOptions Object for determining cluster options, see [ClusterOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L43) for more details\n * @param {String} options.unclusteredOptions Object for determining unclustered point options, see [UnclusteredOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L8) for more details\n * @param {MAP_STYLE} mapStyle A required parameter that indicates the map style returned from Amazon Location Service. This is used to determine the default fonts to be used with maplibre-gl-js. View existing styles [here](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/constants.ts#L8)\n * @returns {DrawPointsOutput} output An object containing the string id's of the sources and layers used to draw the points to the map. This includes the sourceId, clusterLayerId, clusterSymbolLayerId, unclusteredLayerId.\n * @property {String} sourceId The [source](https://maplibre.org/maplibre-gl-js-docs/api/sources/) used to contain all of the coordinate/feature data\n * @property {String} clusterLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/) used for creating and styling the points that are clustered together\n * @property {String} clusterSymbolLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#symbol) used for creating styling the number that shows the count of points in a cluster\n * @property {String} unclusteredLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers) used for creating and styling the individual points on the map and the popup when clicking on a point\n */\nexport function drawPoints(sourceName, data, map, {\n  showCluster = true,\n  clusterOptions = {},\n  unclusteredOptions: unclusteredMarkerOptions = {},\n  autoFit = true\n} = {}, mapStyle) {\n  var _a, _b;\n  if (!map || typeof map.addSource !== \"function\" || typeof map.addLayer !== \"function\") {\n    throw new Error(\"Please use a maplibre map\");\n  }\n  /*\n   * Convert data passed in as coordinates into features\n   */\n  const features = getFeaturesFromData(data);\n  /*\n   * Data source for features\n   */\n  const sourceId = sourceName;\n  map.addSource(sourceId, {\n    type: \"geojson\",\n    data: {\n      type: \"FeatureCollection\",\n      features\n    },\n    cluster: showCluster,\n    clusterMaxZoom: (_a = clusterOptions.clusterMaxZoom) !== null && _a !== void 0 ? _a : 14,\n    clusterRadius: (_b = clusterOptions.smCircleSize) !== null && _b !== void 0 ? _b : 60,\n    generateId: true\n  });\n  /*\n   * Draw ui layers for source data\n   */\n  let clusterLayerId, clusterSymbolLayerId;\n  if (showCluster) {\n    ({\n      clusterLayerId,\n      clusterSymbolLayerId\n    } = drawClusterLayer(sourceId, map, clusterOptions, mapStyle));\n  }\n  const {\n    unclusteredLayerId\n  } = drawUnclusteredLayer(sourceId, map, unclusteredMarkerOptions || {});\n  if (autoFit) {\n    const mapBounds = map.getBounds();\n    features.forEach(function (feature) {\n      mapBounds.extend(feature.geometry.coordinates);\n    });\n    map.fitBounds(mapBounds);\n  }\n  // utility function for setting layer visibility to none\n  const hide = () => {\n    map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"none\");\n    if (clusterLayerId) map.setLayoutProperty(clusterLayerId, \"visibility\", \"none\");\n    if (clusterSymbolLayerId) map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"none\");\n  };\n  // utility function for setting layer visibility to visible\n  const show = () => {\n    map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"visible\");\n    if (clusterLayerId) map.setLayoutProperty(clusterLayerId, \"visibility\", \"visible\");\n    if (clusterSymbolLayerId) map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"visible\");\n  };\n  // utility function updating the data source\n  const setData = data => {\n    const features = getFeaturesFromData(data);\n    map.getSource(sourceId).setData({\n      type: \"FeatureCollection\",\n      features\n    });\n  };\n  return {\n    sourceId,\n    unclusteredLayerId,\n    clusterLayerId,\n    clusterSymbolLayerId,\n    setData,\n    show,\n    hide\n  };\n}","map":{"version":3,"names":["getFeaturesFromData","drawClusterLayer","drawUnclusteredLayer","drawPoints","sourceName","data","map","showCluster","clusterOptions","unclusteredOptions","unclusteredMarkerOptions","autoFit","mapStyle","_a","_b","addSource","addLayer","Error","features","sourceId","type","cluster","clusterMaxZoom","clusterRadius","smCircleSize","generateId","clusterLayerId","clusterSymbolLayerId","unclusteredLayerId","mapBounds","getBounds","forEach","feature","extend","geometry","coordinates","fitBounds","hide","setLayoutProperty","show","setData","getSource"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/maplibre-gl-js-amplify/lib/esm/drawPoints.js"],"sourcesContent":["import { getFeaturesFromData } from \"./utils\";\nimport { drawClusterLayer } from \"./drawClusterLayer\";\nimport { drawUnclusteredLayer } from \"./drawUnclusteredLayer\";\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n * @param {String} sourceName A user defined name used for determining the maplibre data source and the maplibre layers\n * @param {Coordinate[] | Feature[]} data An array of coordinate data or GeoJSON Features used as the data source for maplibre\n * @param {maplibre-gl-js-Map} map A maplibre-gl-js [map](https://maplibre.org/maplibre-gl-js-docs/api/map/) on which the points will be drawn\n * @param {Object} options An object containing options for changing the styles and features of the points rendered to the map, see the options for more details on available settings\n * @param {String} options.showCluster Determines whether or not points close together should be clustered into a single point\n * @param {String} options.clusterOptions Object for determining cluster options, see [ClusterOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L43) for more details\n * @param {String} options.unclusteredOptions Object for determining unclustered point options, see [UnclusteredOptions](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/types.ts#L8) for more details\n * @param {MAP_STYLE} mapStyle A required parameter that indicates the map style returned from Amazon Location Service. This is used to determine the default fonts to be used with maplibre-gl-js. View existing styles [here](https://github.com/aws-amplify/maplibre-gl-js-amplify/blob/main/src/constants.ts#L8)\n * @returns {DrawPointsOutput} output An object containing the string id's of the sources and layers used to draw the points to the map. This includes the sourceId, clusterLayerId, clusterSymbolLayerId, unclusteredLayerId.\n * @property {String} sourceId The [source](https://maplibre.org/maplibre-gl-js-docs/api/sources/) used to contain all of the coordinate/feature data\n * @property {String} clusterLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/) used for creating and styling the points that are clustered together\n * @property {String} clusterSymbolLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/#symbol) used for creating styling the number that shows the count of points in a cluster\n * @property {String} unclusteredLayerId The [layer](https://maplibre.org/maplibre-gl-js-docs/style-spec/layers) used for creating and styling the individual points on the map and the popup when clicking on a point\n */\nexport function drawPoints(sourceName, data, map, { showCluster = true, clusterOptions = {}, unclusteredOptions: unclusteredMarkerOptions = {}, autoFit = true, } = {}, mapStyle) {\n    var _a, _b;\n    if (!map ||\n        typeof map.addSource !== \"function\" ||\n        typeof map.addLayer !== \"function\") {\n        throw new Error(\"Please use a maplibre map\");\n    }\n    /*\n     * Convert data passed in as coordinates into features\n     */\n    const features = getFeaturesFromData(data);\n    /*\n     * Data source for features\n     */\n    const sourceId = sourceName;\n    map.addSource(sourceId, {\n        type: \"geojson\",\n        data: {\n            type: \"FeatureCollection\",\n            features,\n        },\n        cluster: showCluster,\n        clusterMaxZoom: (_a = clusterOptions.clusterMaxZoom) !== null && _a !== void 0 ? _a : 14,\n        clusterRadius: (_b = clusterOptions.smCircleSize) !== null && _b !== void 0 ? _b : 60,\n        generateId: true,\n    });\n    /*\n     * Draw ui layers for source data\n     */\n    let clusterLayerId, clusterSymbolLayerId;\n    if (showCluster) {\n        ({ clusterLayerId, clusterSymbolLayerId } = drawClusterLayer(sourceId, map, clusterOptions, mapStyle));\n    }\n    const { unclusteredLayerId } = drawUnclusteredLayer(sourceId, map, unclusteredMarkerOptions || {});\n    if (autoFit) {\n        const mapBounds = map.getBounds();\n        features.forEach(function (feature) {\n            mapBounds.extend(feature.geometry.coordinates);\n        });\n        map.fitBounds(mapBounds);\n    }\n    // utility function for setting layer visibility to none\n    const hide = () => {\n        map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"none\");\n        if (clusterLayerId)\n            map.setLayoutProperty(clusterLayerId, \"visibility\", \"none\");\n        if (clusterSymbolLayerId)\n            map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"none\");\n    };\n    // utility function for setting layer visibility to visible\n    const show = () => {\n        map.setLayoutProperty(unclusteredLayerId, \"visibility\", \"visible\");\n        if (clusterLayerId)\n            map.setLayoutProperty(clusterLayerId, \"visibility\", \"visible\");\n        if (clusterSymbolLayerId)\n            map.setLayoutProperty(clusterSymbolLayerId, \"visibility\", \"visible\");\n    };\n    // utility function updating the data source\n    const setData = (data) => {\n        const features = getFeaturesFromData(data);\n        map.getSource(sourceId).setData({\n            type: \"FeatureCollection\",\n            features,\n        });\n    };\n    return {\n        sourceId,\n        unclusteredLayerId,\n        clusterLayerId,\n        clusterSymbolLayerId,\n        setData,\n        show,\n        hide,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}