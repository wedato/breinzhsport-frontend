{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IndexFacesRequest, IndexFacesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1IndexFacesCommand, serializeAws_json1_1IndexFacesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects faces in the input image and adds them to the specified collection. </p>\n *          <p>Amazon Rekognition doesn't save the actual faces that are detected. Instead, the underlying\n *       detection algorithm first detects the faces in the input image. For each face, the algorithm\n *       extracts facial features into a feature vector, and stores it in the backend database.\n *       Amazon Rekognition uses feature vectors when it performs face match and search operations using the\n *         <a>SearchFaces</a> and <a>SearchFacesByImage</a>\n *       operations.</p>\n *\n *          <p>For more information, see Adding Faces to a Collection in the Amazon Rekognition\n *       Developer Guide.</p>\n *          <p>To get the number of faces in a collection, call <a>DescribeCollection</a>. </p>\n *\n *          <p>If you're using version 1.0 of the face detection model, <code>IndexFaces</code>\n *       indexes the 15 largest faces in the input image. Later versions of the face detection model\n *       index the 100 largest faces in the input image. </p>\n *          <p>If you're using version 4 or later of the face model, image orientation information\n *      is not returned in the <code>OrientationCorrection</code> field. </p>\n *          <p>To determine which version of the model you're using, call <a>DescribeCollection</a>\n *       and supply the collection ID. You can also get the model version from the value of <code>FaceModelVersion</code> in the response\n *       from <code>IndexFaces</code>\n *          </p>\n *\n *          <p>For more information, see Model Versioning in the Amazon Rekognition Developer\n *       Guide.</p>\n *          <p>If you provide the optional <code>ExternalImageId</code> for the input image you\n *       provided, Amazon Rekognition associates this ID with all faces that it detects. When you call the <a>ListFaces</a> operation, the response returns the external ID. You can use this\n *       external image ID to create a client-side index to associate the faces with each image. You\n *       can then use the index to find all faces in an image.</p>\n *          <p>You can specify the maximum number of faces to index with the <code>MaxFaces</code> input\n *       parameter. This is useful when you want to index the largest faces in an image and don't want to index\n *       smaller faces, such as those belonging to people standing in the background.</p>\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that don’t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases. By default, <code>IndexFaces</code> chooses the quality bar that's\n *       used to filter faces.  You can also explicitly choose\n *       the quality bar. Use <code>QualityFilter</code>, to set the quality bar\n *       by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. </p>\n *          <note>\n *             <p>To use quality filtering, you need a collection associated with version 3 of the\n *     face model or higher. To get the version of the face model associated with a collection, call\n *       <a>DescribeCollection</a>. </p>\n *          </note>\n *          <p>Information about faces detected in an image, but not indexed, is returned in an array of\n *       <a>UnindexedFace</a> objects, <code>UnindexedFaces</code>. Faces aren't\n *       indexed for reasons such as:</p>\n *          <ul>\n *             <li>\n *                <p>The number of faces detected exceeds the value of the <code>MaxFaces</code> request\n *           parameter.</p>\n *             </li>\n *             <li>\n *                <p>The face is too small compared to the image dimensions.</p>\n *             </li>\n *             <li>\n *                <p>The face is too blurry.</p>\n *             </li>\n *             <li>\n *                <p>The image is too dark.</p>\n *             </li>\n *             <li>\n *                <p>The face has an extreme pose.</p>\n *             </li>\n *             <li>\n *                <p>The face doesn’t have enough detail to be suitable for face search.</p>\n *             </li>\n *          </ul>\n *          <p>In response, the <code>IndexFaces</code> operation returns an array of metadata for\n *       all detected faces, <code>FaceRecords</code>. This includes: </p>\n *          <ul>\n *             <li>\n *                <p>The bounding box, <code>BoundingBox</code>, of the detected face. </p>\n *             </li>\n *             <li>\n *                <p>A confidence value, <code>Confidence</code>, which indicates the confidence that the\n *           bounding box contains a face.</p>\n *             </li>\n *             <li>\n *                <p>A face ID, <code>FaceId</code>, assigned by the service for each face that's detected\n *           and stored.</p>\n *             </li>\n *             <li>\n *                <p>An image ID, <code>ImageId</code>, assigned by the service for the input image.</p>\n *             </li>\n *          </ul>\n *          <p>If you request all facial attributes (by using the <code>detectionAttributes</code>\n *       parameter), Amazon Rekognition returns detailed facial attributes, such as facial landmarks (for\n *       example, location of eye and mouth) and other facial attributes. If you provide\n *       the same image, specify the same collection, and use the same external ID in the\n *         <code>IndexFaces</code> operation, Amazon Rekognition doesn't save duplicate face metadata.</p>\n *\n *\n *          <p></p>\n *\n *\n *          <p>The input image is passed either as base64-encoded image bytes, or as a reference to an\n *       image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations,\n *       passing image bytes isn't supported. The image must be formatted as a PNG or JPEG file. </p>\n *          <p>This operation requires permissions to perform the <code>rekognition:IndexFaces</code>\n *       action.</p>\n */\nvar IndexFacesCommand = /** @class */function (_super) {\n  __extends(IndexFacesCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function IndexFacesCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  IndexFacesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"IndexFacesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: IndexFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: IndexFacesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  IndexFacesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1IndexFacesCommand(input, context);\n  };\n  IndexFacesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1IndexFacesCommand(output, context);\n  };\n  return IndexFacesCommand;\n}($Command);\nexport { IndexFacesCommand };","map":{"version":3,"names":["IndexFacesRequest","IndexFacesResponse","deserializeAws_json1_1IndexFacesCommand","serializeAws_json1_1IndexFacesCommand","getSerdePlugin","Command","$Command","IndexFacesCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-sdk\\client-rekognition\\commands\\IndexFacesCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { IndexFacesRequest, IndexFacesResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1IndexFacesCommand,\n  serializeAws_json1_1IndexFacesCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type IndexFacesCommandInput = IndexFacesRequest;\nexport type IndexFacesCommandOutput = IndexFacesResponse & __MetadataBearer;\n\n/**\n * <p>Detects faces in the input image and adds them to the specified collection. </p>\n *          <p>Amazon Rekognition doesn't save the actual faces that are detected. Instead, the underlying\n *       detection algorithm first detects the faces in the input image. For each face, the algorithm\n *       extracts facial features into a feature vector, and stores it in the backend database.\n *       Amazon Rekognition uses feature vectors when it performs face match and search operations using the\n *         <a>SearchFaces</a> and <a>SearchFacesByImage</a>\n *       operations.</p>\n *\n *          <p>For more information, see Adding Faces to a Collection in the Amazon Rekognition\n *       Developer Guide.</p>\n *          <p>To get the number of faces in a collection, call <a>DescribeCollection</a>. </p>\n *\n *          <p>If you're using version 1.0 of the face detection model, <code>IndexFaces</code>\n *       indexes the 15 largest faces in the input image. Later versions of the face detection model\n *       index the 100 largest faces in the input image. </p>\n *          <p>If you're using version 4 or later of the face model, image orientation information\n *      is not returned in the <code>OrientationCorrection</code> field. </p>\n *          <p>To determine which version of the model you're using, call <a>DescribeCollection</a>\n *       and supply the collection ID. You can also get the model version from the value of <code>FaceModelVersion</code> in the response\n *       from <code>IndexFaces</code>\n *          </p>\n *\n *          <p>For more information, see Model Versioning in the Amazon Rekognition Developer\n *       Guide.</p>\n *          <p>If you provide the optional <code>ExternalImageId</code> for the input image you\n *       provided, Amazon Rekognition associates this ID with all faces that it detects. When you call the <a>ListFaces</a> operation, the response returns the external ID. You can use this\n *       external image ID to create a client-side index to associate the faces with each image. You\n *       can then use the index to find all faces in an image.</p>\n *          <p>You can specify the maximum number of faces to index with the <code>MaxFaces</code> input\n *       parameter. This is useful when you want to index the largest faces in an image and don't want to index\n *       smaller faces, such as those belonging to people standing in the background.</p>\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that don’t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases. By default, <code>IndexFaces</code> chooses the quality bar that's\n *       used to filter faces.  You can also explicitly choose\n *       the quality bar. Use <code>QualityFilter</code>, to set the quality bar\n *       by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. </p>\n *          <note>\n *             <p>To use quality filtering, you need a collection associated with version 3 of the\n *     face model or higher. To get the version of the face model associated with a collection, call\n *       <a>DescribeCollection</a>. </p>\n *          </note>\n *          <p>Information about faces detected in an image, but not indexed, is returned in an array of\n *       <a>UnindexedFace</a> objects, <code>UnindexedFaces</code>. Faces aren't\n *       indexed for reasons such as:</p>\n *          <ul>\n *             <li>\n *                <p>The number of faces detected exceeds the value of the <code>MaxFaces</code> request\n *           parameter.</p>\n *             </li>\n *             <li>\n *                <p>The face is too small compared to the image dimensions.</p>\n *             </li>\n *             <li>\n *                <p>The face is too blurry.</p>\n *             </li>\n *             <li>\n *                <p>The image is too dark.</p>\n *             </li>\n *             <li>\n *                <p>The face has an extreme pose.</p>\n *             </li>\n *             <li>\n *                <p>The face doesn’t have enough detail to be suitable for face search.</p>\n *             </li>\n *          </ul>\n *          <p>In response, the <code>IndexFaces</code> operation returns an array of metadata for\n *       all detected faces, <code>FaceRecords</code>. This includes: </p>\n *          <ul>\n *             <li>\n *                <p>The bounding box, <code>BoundingBox</code>, of the detected face. </p>\n *             </li>\n *             <li>\n *                <p>A confidence value, <code>Confidence</code>, which indicates the confidence that the\n *           bounding box contains a face.</p>\n *             </li>\n *             <li>\n *                <p>A face ID, <code>FaceId</code>, assigned by the service for each face that's detected\n *           and stored.</p>\n *             </li>\n *             <li>\n *                <p>An image ID, <code>ImageId</code>, assigned by the service for the input image.</p>\n *             </li>\n *          </ul>\n *          <p>If you request all facial attributes (by using the <code>detectionAttributes</code>\n *       parameter), Amazon Rekognition returns detailed facial attributes, such as facial landmarks (for\n *       example, location of eye and mouth) and other facial attributes. If you provide\n *       the same image, specify the same collection, and use the same external ID in the\n *         <code>IndexFaces</code> operation, Amazon Rekognition doesn't save duplicate face metadata.</p>\n *\n *\n *          <p></p>\n *\n *\n *          <p>The input image is passed either as base64-encoded image bytes, or as a reference to an\n *       image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations,\n *       passing image bytes isn't supported. The image must be formatted as a PNG or JPEG file. </p>\n *          <p>This operation requires permissions to perform the <code>rekognition:IndexFaces</code>\n *       action.</p>\n */\nexport class IndexFacesCommand extends $Command<\n  IndexFacesCommandInput,\n  IndexFacesCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: IndexFacesCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<IndexFacesCommandInput, IndexFacesCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"IndexFacesCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: IndexFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: IndexFacesResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: IndexFacesCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1IndexFacesCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<IndexFacesCommandOutput> {\n    return deserializeAws_json1_1IndexFacesCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,iBAAiB,EAAEC,kBAAkB,QAAQ,oBAAoB;AAC1E,SACEC,uCAAuC,EACvCC,qCAAqC,QAChC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA,IAAAC,iBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAKrC;EACA;EAEA,SAAAD,kBAAqBG,KAA6B;IAAlD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,iBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,mBAAmB;IACvC,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,iBAAiB,CAAC6B,kBAAkB;MAC7DC,wBAAwB,EAAE7B,kBAAkB,CAAC4B;KAC9C;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,iBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAA6B,EAAEyB,OAAuB;IACtE,OAAOhC,qCAAqC,CAACO,KAAK,EAAEyB,OAAO,CAAC;EAC9D,CAAC;EAEO5B,iBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,uCAAuC,CAACkC,MAAM,EAAED,OAAO,CAAC;EACjE,CAAC;EAIH,OAAA5B,iBAAC;AAAD,CAAC,CAtDsCD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}