{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectTextRequest, DetectTextResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectTextCommand, serializeAws_json1_1DetectTextCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects text in the input image and converts it into machine-readable text.</p>\n *          <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an\n *       Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a\n *       reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not\n *       supported. The image must be either a .png or .jpeg formatted file. </p>\n *          <p>The <code>DetectText</code> operation returns text in an array of <a>TextDetection</a> elements, <code>TextDetections</code>. Each\n *         <code>TextDetection</code> element provides information about a single word or line of text\n *       that was detected in the image. </p>\n *          <p>A word is one or more ISO basic latin script characters that are not separated by spaces.\n *         <code>DetectText</code> can detect up to 50 words in an image.</p>\n *          <p>A line is a string of equally spaced words. A line isn't necessarily a complete\n *       sentence. For example, a driver's license number is detected as a line. A line ends when there\n *       is no aligned text after it. Also, a line ends when there is a large gap between words,\n *       relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition\n *       may detect multiple lines in text aligned in the same direction. Periods don't represent the\n *       end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation\n *       returns multiple lines.</p>\n *          <p>To determine whether a <code>TextDetection</code> element is a line of text or a word,\n *       use the <code>TextDetection</code> object <code>Type</code> field. </p>\n *          <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p>\n *\n *          <p>For more information, see DetectText in the Amazon Rekognition Developer Guide.</p>\n */\nvar DetectTextCommand = /** @class */function (_super) {\n  __extends(DetectTextCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function DetectTextCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  DetectTextCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectTextCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectTextRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectTextResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  DetectTextCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectTextCommand(input, context);\n  };\n  DetectTextCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectTextCommand(output, context);\n  };\n  return DetectTextCommand;\n}($Command);\nexport { DetectTextCommand };","map":{"version":3,"names":["DetectTextRequest","DetectTextResponse","deserializeAws_json1_1DetectTextCommand","serializeAws_json1_1DetectTextCommand","getSerdePlugin","Command","$Command","DetectTextCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-sdk\\client-rekognition\\commands\\DetectTextCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { DetectTextRequest, DetectTextResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1DetectTextCommand,\n  serializeAws_json1_1DetectTextCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DetectTextCommandInput = DetectTextRequest;\nexport type DetectTextCommandOutput = DetectTextResponse & __MetadataBearer;\n\n/**\n * <p>Detects text in the input image and converts it into machine-readable text.</p>\n *          <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an\n *       Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a\n *       reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not\n *       supported. The image must be either a .png or .jpeg formatted file. </p>\n *          <p>The <code>DetectText</code> operation returns text in an array of <a>TextDetection</a> elements, <code>TextDetections</code>. Each\n *         <code>TextDetection</code> element provides information about a single word or line of text\n *       that was detected in the image. </p>\n *          <p>A word is one or more ISO basic latin script characters that are not separated by spaces.\n *         <code>DetectText</code> can detect up to 50 words in an image.</p>\n *          <p>A line is a string of equally spaced words. A line isn't necessarily a complete\n *       sentence. For example, a driver's license number is detected as a line. A line ends when there\n *       is no aligned text after it. Also, a line ends when there is a large gap between words,\n *       relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition\n *       may detect multiple lines in text aligned in the same direction. Periods don't represent the\n *       end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation\n *       returns multiple lines.</p>\n *          <p>To determine whether a <code>TextDetection</code> element is a line of text or a word,\n *       use the <code>TextDetection</code> object <code>Type</code> field. </p>\n *          <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p>\n *\n *          <p>For more information, see DetectText in the Amazon Rekognition Developer Guide.</p>\n */\nexport class DetectTextCommand extends $Command<\n  DetectTextCommandInput,\n  DetectTextCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DetectTextCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DetectTextCommandInput, DetectTextCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"DetectTextCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DetectTextRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectTextResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DetectTextCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1DetectTextCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<DetectTextCommandOutput> {\n    return deserializeAws_json1_1DetectTextCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,iBAAiB,EAAEC,kBAAkB,QAAQ,oBAAoB;AAC1E,SACEC,uCAAuC,EACvCC,qCAAqC,QAChC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAAC,iBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAKrC;EACA;EAEA,SAAAD,kBAAqBG,KAA6B;IAAlD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,iBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,mBAAmB;IACvC,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,iBAAiB,CAAC6B,kBAAkB;MAC7DC,wBAAwB,EAAE7B,kBAAkB,CAAC4B;KAC9C;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,iBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAA6B,EAAEyB,OAAuB;IACtE,OAAOhC,qCAAqC,CAACO,KAAK,EAAEyB,OAAO,CAAC;EAC9D,CAAC;EAEO5B,iBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,uCAAuC,CAACkC,MAAM,EAAED,OAAO,CAAC;EACjE,CAAC;EAIH,OAAA5B,iBAAC;AAAD,CAAC,CAtDsCD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}