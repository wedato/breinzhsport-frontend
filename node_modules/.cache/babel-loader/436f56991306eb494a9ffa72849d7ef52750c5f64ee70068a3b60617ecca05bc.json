{"ast":null,"code":"const MapboxDraw = require('@mapbox/mapbox-gl-draw');\nconst Constants = require('../utils/constants');\nconst doubleClickZoom = require(\"../utils/double_click_zoom\");\nconst dragPan = require('../utils/drag_pan');\nconst circle = require('@turf/circle').default;\nconst distance = require('@turf/distance').default;\nconst turfHelpers = require('@turf/helpers');\nconst DragCircleMode = {\n  ...MapboxDraw.modes.draw_polygon\n};\nDragCircleMode.onSetup = function (opts) {\n  const polygon = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {\n      isCircle: true,\n      center: []\n    },\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n  this.addFeature(polygon);\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  dragPan.disable(this);\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  this.activateUIButton(Constants.types.POLYGON);\n  this.setActionableState({\n    trash: true\n  });\n  return {\n    polygon,\n    currentVertexPosition: 0\n  };\n};\nDragCircleMode.onMouseDown = DragCircleMode.onTouchStart = function (state, e) {\n  const currentCenter = state.polygon.properties.center;\n  if (currentCenter.length === 0) {\n    state.polygon.properties.center = [e.lngLat.lng, e.lngLat.lat];\n  }\n};\nDragCircleMode.onDrag = DragCircleMode.onMouseMove = function (state, e) {\n  const center = state.polygon.properties.center;\n  if (center.length > 0) {\n    const distanceInKm = distance(turfHelpers.point(center), turfHelpers.point([e.lngLat.lng, e.lngLat.lat]), {\n      units: 'kilometers'\n    });\n    const circleFeature = circle(center, distanceInKm);\n    state.polygon.incomingCoords(circleFeature.geometry.coordinates);\n    state.polygon.properties.radiusInKm = distanceInKm;\n  }\n};\nDragCircleMode.onMouseUp = DragCircleMode.onTouchEnd = function (state, e) {\n  dragPan.enable(this);\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n    featureIds: [state.polygon.id]\n  });\n};\nDragCircleMode.onClick = DragCircleMode.onTap = function (state, e) {\n  // don't draw the circle if its a tap or click event\n  state.polygon.properties.center = [];\n};\nDragCircleMode.toDisplayFeatures = function (state, geojson, display) {\n  const isActivePolygon = geojson.properties.id === state.polygon.id;\n  geojson.properties.active = isActivePolygon ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  return display(geojson);\n};\nmodule.exports = DragCircleMode;","map":{"version":3,"names":["MapboxDraw","require","Constants","doubleClickZoom","dragPan","circle","default","distance","turfHelpers","DragCircleMode","modes","draw_polygon","onSetup","opts","polygon","newFeature","type","geojsonTypes","FEATURE","properties","isCircle","center","geometry","POLYGON","coordinates","addFeature","clearSelectedFeatures","disable","updateUIClasses","mouse","cursors","ADD","activateUIButton","types","setActionableState","trash","currentVertexPosition","onMouseDown","onTouchStart","state","e","currentCenter","length","lngLat","lng","lat","onDrag","onMouseMove","distanceInKm","point","units","circleFeature","incomingCoords","radiusInKm","onMouseUp","onTouchEnd","enable","changeMode","SIMPLE_SELECT","featureIds","id","onClick","onTap","toDisplayFeatures","geojson","display","isActivePolygon","active","activeStates","ACTIVE","INACTIVE","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/maplibre-gl-draw-circle/lib/modes/DragCircleMode.js"],"sourcesContent":["const MapboxDraw = require('@mapbox/mapbox-gl-draw');\nconst Constants = require('../utils/constants');\nconst doubleClickZoom = require(\"../utils/double_click_zoom\");\nconst dragPan = require('../utils/drag_pan');\nconst circle = require('@turf/circle').default;\nconst distance = require('@turf/distance').default;\nconst turfHelpers = require('@turf/helpers');\n\nconst DragCircleMode = {...MapboxDraw.modes.draw_polygon};\n\nDragCircleMode.onSetup = function(opts) {\n  const polygon = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {\n      isCircle: true,\n      center: []\n    },\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n\n  this.addFeature(polygon);\n\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  dragPan.disable(this);\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  this.activateUIButton(Constants.types.POLYGON);\n  this.setActionableState({\n    trash: true\n  });\n\n  return {\n    polygon,\n    currentVertexPosition: 0\n  };\n};\n\nDragCircleMode.onMouseDown = DragCircleMode.onTouchStart = function (state, e) {\n  const currentCenter = state.polygon.properties.center;\n  if (currentCenter.length === 0) {\n    state.polygon.properties.center = [e.lngLat.lng, e.lngLat.lat];\n  }\n};\n\nDragCircleMode.onDrag = DragCircleMode.onMouseMove = function (state, e) {\n  const center = state.polygon.properties.center;\n  if (center.length > 0) {\n    const distanceInKm = distance(\n      turfHelpers.point(center),\n      turfHelpers.point([e.lngLat.lng, e.lngLat.lat]),\n      { units : 'kilometers'});\n    const circleFeature = circle(center, distanceInKm);\n    state.polygon.incomingCoords(circleFeature.geometry.coordinates);\n    state.polygon.properties.radiusInKm = distanceInKm;\n  }\n};\n\nDragCircleMode.onMouseUp = DragCircleMode.onTouchEnd = function (state, e) {\n  dragPan.enable(this);\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.polygon.id] });\n};\n\nDragCircleMode.onClick = DragCircleMode.onTap = function (state, e) {\n  // don't draw the circle if its a tap or click event\n  state.polygon.properties.center = [];\n};\n\nDragCircleMode.toDisplayFeatures = function(state, geojson, display) {\n  const isActivePolygon = geojson.properties.id === state.polygon.id;\n  geojson.properties.active = (isActivePolygon) ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  return display(geojson);\n};\n\nmodule.exports = DragCircleMode;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}