{"ast":null,"code":"'use strict';\n\n// / <reference types=\"node\" />\nvar callBind = require('call-bind');\nvar forEach = require('for-each');\nvar gOPD = require('gopd');\nvar isTypedArray = require('is-typed-array');\nvar typedArrays = require('possible-typed-array-names');\nvar gPO = require('reflect.getprototypeof/polyfill')();\n\n/** @typedef {(value: import('.').TypedArray) => number} TypedArrayLengthGetter */\n/** @typedef {{ [k in `$${import('.').TypedArrayName}` | '__proto__']: k extends '__proto__' ? null : TypedArrayLengthGetter }} Cache */\n\n/** @type {Cache} */\n// @ts-expect-error TS doesn't seem to have a \"will eventually satisfy\" type\nvar getters = {\n  __proto__: null\n};\nvar oDP = Object.defineProperty;\nif (gOPD) {\n  var getLength = /** @type {TypedArrayLengthGetter} */function (x) {\n    return x.length;\n  };\n  forEach(typedArrays, /** @type {(typedArray: import('.').TypedArrayName) => void} */function (typedArray) {\n    var TA = global[typedArray];\n    // In Safari 7, Typed Array constructors are typeof object\n    if (typeof TA === 'function' || typeof TA === 'object') {\n      var Proto = TA.prototype;\n      // @ts-expect-error TS doesn't narrow types inside callbacks, which is weird\n      var descriptor = gOPD(Proto, 'length');\n      if (!descriptor) {\n        var superProto = gPO(Proto);\n        // @ts-expect-error TS doesn't narrow types inside callbacks, which is weird\n        descriptor = gOPD(superProto, 'length');\n      }\n      // Opera 12.16 has a magic length data property on instances AND on Proto\n      if (descriptor && descriptor.get) {\n        // eslint-disable-next-line no-extra-parens\n        getters[(/** @type {`$${import('.').TypedArrayName}`} */'$' + typedArray)] = callBind(descriptor.get);\n      } else if (oDP) {\n        // this is likely an engine where instances have a magic length data property\n        var arr = new global[typedArray](2);\n        // @ts-expect-error TS doesn't narrow types inside callbacks, which is weird\n        descriptor = gOPD(arr, 'length');\n        if (descriptor && descriptor.configurable) {\n          oDP(arr, 'length', {\n            value: 3\n          });\n        }\n        if (arr.length === 2) {\n          // eslint-disable-next-line no-extra-parens\n          getters[(/** @type {`$${import('.').TypedArrayName}`} */'$' + typedArray)] = getLength;\n        }\n      }\n    }\n  });\n}\n\n/** @type {TypedArrayLengthGetter} */\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n  /** @type {number} */var foundLength;\n  // @ts-expect-error not sure why this won't work\n  forEach(getters, /** @type {(getter: TypedArrayLengthGetter) => void} */function (getter) {\n    if (typeof foundLength !== 'number') {\n      try {\n        var length = getter(value);\n        if (typeof length === 'number') {\n          foundLength = length;\n        }\n      } catch (e) {}\n    }\n  });\n  // @ts-expect-error TS can't guarantee the above callback is invoked sync\n  return foundLength;\n};\n\n/** @type {import('.')} */\nmodule.exports = function typedArrayLength(value) {\n  if (!isTypedArray(value)) {\n    return false;\n  }\n  return tryTypedArrays(value);\n};","map":{"version":3,"names":["callBind","require","forEach","gOPD","isTypedArray","typedArrays","gPO","getters","__proto__","oDP","Object","defineProperty","getLength","x","length","typedArray","TA","global","Proto","prototype","descriptor","superProto","get","arr","configurable","value","tryTypedArrays","tryAllTypedArrays","foundLength","getter","e","module","exports","typedArrayLength"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/typed-array-length/index.js"],"sourcesContent":["'use strict';\n\n// / <reference types=\"node\" />\n\nvar callBind = require('call-bind');\nvar forEach = require('for-each');\nvar gOPD = require('gopd');\nvar isTypedArray = require('is-typed-array');\nvar typedArrays = require('possible-typed-array-names');\nvar gPO = require('reflect.getprototypeof/polyfill')();\n\n/** @typedef {(value: import('.').TypedArray) => number} TypedArrayLengthGetter */\n/** @typedef {{ [k in `$${import('.').TypedArrayName}` | '__proto__']: k extends '__proto__' ? null : TypedArrayLengthGetter }} Cache */\n\n/** @type {Cache} */\n// @ts-expect-error TS doesn't seem to have a \"will eventually satisfy\" type\nvar getters = { __proto__: null };\nvar oDP = Object.defineProperty;\nif (gOPD) {\n\tvar getLength = /** @type {TypedArrayLengthGetter} */ function (x) {\n\t\treturn x.length;\n\t};\n\tforEach(typedArrays, /** @type {(typedArray: import('.').TypedArrayName) => void} */ function (typedArray) {\n\t\tvar TA = global[typedArray];\n\t\t// In Safari 7, Typed Array constructors are typeof object\n\t\tif (typeof TA === 'function' || typeof TA === 'object') {\n\t\t\tvar Proto = TA.prototype;\n\t\t\t// @ts-expect-error TS doesn't narrow types inside callbacks, which is weird\n\t\t\tvar descriptor = gOPD(Proto, 'length');\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = gPO(Proto);\n\t\t\t\t// @ts-expect-error TS doesn't narrow types inside callbacks, which is weird\n\t\t\t\tdescriptor = gOPD(superProto, 'length');\n\t\t\t}\n\t\t\t// Opera 12.16 has a magic length data property on instances AND on Proto\n\t\t\tif (descriptor && descriptor.get) {\n\t\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t\tgetters[/** @type {`$${import('.').TypedArrayName}`} */ ('$' + typedArray)] = callBind(descriptor.get);\n\t\t\t} else if (oDP) {\n\t\t\t\t// this is likely an engine where instances have a magic length data property\n\t\t\t\tvar arr = new global[typedArray](2);\n\t\t\t\t// @ts-expect-error TS doesn't narrow types inside callbacks, which is weird\n\t\t\t\tdescriptor = gOPD(arr, 'length');\n\t\t\t\tif (descriptor && descriptor.configurable) {\n\t\t\t\t\toDP(arr, 'length', { value: 3 });\n\t\t\t\t}\n\t\t\t\tif (arr.length === 2) {\n\t\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t\t\tgetters[/** @type {`$${import('.').TypedArrayName}`} */ ('$' + typedArray)] = getLength;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n\n/** @type {TypedArrayLengthGetter} */\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\t/** @type {number} */ var foundLength;\n\t// @ts-expect-error not sure why this won't work\n\tforEach(getters, /** @type {(getter: TypedArrayLengthGetter) => void} */ function (getter) {\n\t\tif (typeof foundLength !== 'number') {\n\t\t\ttry {\n\t\t\t\tvar length = getter(value);\n\t\t\t\tif (typeof length === 'number') {\n\t\t\t\t\tfoundLength = length;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\t// @ts-expect-error TS can't guarantee the above callback is invoked sync\n\treturn foundLength;\n};\n\n/** @type {import('.')} */\nmodule.exports = function typedArrayLength(value) {\n\tif (!isTypedArray(value)) {\n\t\treturn false;\n\t}\n\treturn tryTypedArrays(value);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}