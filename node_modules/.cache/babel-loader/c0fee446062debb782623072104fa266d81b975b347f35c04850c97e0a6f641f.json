{"ast":null,"code":"import { __rest } from '../../../node_modules/tslib/tslib.es6.mjs';\nimport React, { useCallback } from 'react';\nimport { useSelector } from '@xstate/react';\nimport { getServiceFacade } from '@aws-amplify/ui';\nimport 'aws-amplify';\nimport { AuthenticatorContext } from '../../context/AuthenticatorContext.mjs';\nimport { USE_AUTHENTICATOR_ERROR } from './constants.mjs';\nimport { getQRFields, getMachineFields, getTotpSecretCodeCallback, getComparator, defaultComparator } from './utils.mjs';\n\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)\n */\nfunction useAuthenticator(selector) {\n  const context = React.useContext(AuthenticatorContext);\n  if (!context) {\n    throw new Error(USE_AUTHENTICATOR_ERROR);\n  }\n  const {\n    service\n  } = context;\n  const {\n    send\n  } = service;\n  const xstateSelector = useCallback(state => Object.assign({}, getServiceFacade({\n    send,\n    state\n  })), [send]);\n  const comparator = selector ? getComparator(selector) : defaultComparator;\n  // the purpose of `context.authStatus`is to intentionally override `facade.authStatus`. `facade.authStatus` does\n  // not update on external sign in events (for example when a user is not using the `Authenticator`).\n  const {\n    authStatus\n  } = context;\n  const facade = useSelector(service, xstateSelector, comparator);\n  const {\n      route,\n      totpSecretCode,\n      unverifiedContactMethods,\n      user\n    } = facade,\n    rest = __rest(facade, [\"route\", \"totpSecretCode\", \"unverifiedContactMethods\", \"user\"]);\n  // do not memoize output. `service.getSnapshot` reference remains stable preventing\n  // `fields` from updating with current form state on value changes\n  const serviceSnapshot = service.getSnapshot();\n  // legacy `QRFields` values only used for SetupTOTP page to retrieve issuer information, will be removed in future\n  const QRFields = route === 'setupTOTP' ? getQRFields(serviceSnapshot) : null;\n  // legacy `formFields` values required until form state is removed from state machine\n  const fields = getMachineFields(route, serviceSnapshot, unverifiedContactMethods);\n  return Object.assign(Object.assign({}, rest), {\n    authStatus,\n    route,\n    totpSecretCode,\n    unverifiedContactMethods,\n    user,\n    /** @deprecated For internal use only */\n    fields,\n    getTotpSecretCode: getTotpSecretCodeCallback(user),\n    QRFields\n  });\n}\nexport { useAuthenticator as default };","map":{"version":3,"names":["__rest","React","useCallback","useSelector","getServiceFacade","AuthenticatorContext","USE_AUTHENTICATOR_ERROR","getQRFields","getMachineFields","getTotpSecretCodeCallback","getComparator","defaultComparator","useAuthenticator","selector","context","useContext","Error","service","send","xstateSelector","state","Object","assign","comparator","authStatus","facade","route","totpSecretCode","unverifiedContactMethods","user","rest","serviceSnapshot","getSnapshot","QRFields","fields","getTotpSecretCode","default"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/useAuthenticator.mjs"],"sourcesContent":["import { __rest } from '../../../node_modules/tslib/tslib.es6.mjs';\nimport React, { useCallback } from 'react';\nimport { useSelector } from '@xstate/react';\nimport { getServiceFacade } from '@aws-amplify/ui';\nimport 'aws-amplify';\nimport { AuthenticatorContext } from '../../context/AuthenticatorContext.mjs';\nimport { USE_AUTHENTICATOR_ERROR } from './constants.mjs';\nimport { getQRFields, getMachineFields, getTotpSecretCodeCallback, getComparator, defaultComparator } from './utils.mjs';\n\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)\n */\nfunction useAuthenticator(selector) {\n    const context = React.useContext(AuthenticatorContext);\n    if (!context) {\n        throw new Error(USE_AUTHENTICATOR_ERROR);\n    }\n    const { service } = context;\n    const { send } = service;\n    const xstateSelector = useCallback((state) => (Object.assign({}, getServiceFacade({ send, state }))), [send]);\n    const comparator = selector ? getComparator(selector) : defaultComparator;\n    // the purpose of `context.authStatus`is to intentionally override `facade.authStatus`. `facade.authStatus` does\n    // not update on external sign in events (for example when a user is not using the `Authenticator`).\n    const { authStatus } = context;\n    const facade = useSelector(service, xstateSelector, comparator);\n    const { route, totpSecretCode, unverifiedContactMethods, user } = facade, rest = __rest(facade, [\"route\", \"totpSecretCode\", \"unverifiedContactMethods\", \"user\"]);\n    // do not memoize output. `service.getSnapshot` reference remains stable preventing\n    // `fields` from updating with current form state on value changes\n    const serviceSnapshot = service.getSnapshot();\n    // legacy `QRFields` values only used for SetupTOTP page to retrieve issuer information, will be removed in future\n    const QRFields = route === 'setupTOTP' ? getQRFields(serviceSnapshot) : null;\n    // legacy `formFields` values required until form state is removed from state machine\n    const fields = getMachineFields(route, serviceSnapshot, unverifiedContactMethods);\n    return Object.assign(Object.assign({}, rest), { authStatus,\n        route,\n        totpSecretCode,\n        unverifiedContactMethods,\n        user,\n        /** @deprecated For internal use only */\n        fields, getTotpSecretCode: getTotpSecretCodeCallback(user), QRFields });\n}\n\nexport { useAuthenticator as default };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,2CAA2C;AAClE,OAAOC,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,OAAO,aAAa;AACpB,SAASC,oBAAoB,QAAQ,wCAAwC;AAC7E,SAASC,uBAAuB,QAAQ,iBAAiB;AACzD,SAASC,WAAW,EAAEC,gBAAgB,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,iBAAiB,QAAQ,aAAa;;AAExH;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EAChC,MAAMC,OAAO,GAAGb,KAAK,CAACc,UAAU,CAACV,oBAAoB,CAAC;EACtD,IAAI,CAACS,OAAO,EAAE;IACV,MAAM,IAAIE,KAAK,CAACV,uBAAuB,CAAC;EAC5C;EACA,MAAM;IAAEW;EAAQ,CAAC,GAAGH,OAAO;EAC3B,MAAM;IAAEI;EAAK,CAAC,GAAGD,OAAO;EACxB,MAAME,cAAc,GAAGjB,WAAW,CAAEkB,KAAK,IAAMC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAElB,gBAAgB,CAAC;IAAEc,IAAI;IAAEE;EAAM,CAAC,CAAC,CAAE,EAAE,CAACF,IAAI,CAAC,CAAC;EAC7G,MAAMK,UAAU,GAAGV,QAAQ,GAAGH,aAAa,CAACG,QAAQ,CAAC,GAAGF,iBAAiB;EACzE;EACA;EACA,MAAM;IAAEa;EAAW,CAAC,GAAGV,OAAO;EAC9B,MAAMW,MAAM,GAAGtB,WAAW,CAACc,OAAO,EAAEE,cAAc,EAAEI,UAAU,CAAC;EAC/D,MAAM;MAAEG,KAAK;MAAEC,cAAc;MAAEC,wBAAwB;MAAEC;IAAK,CAAC,GAAGJ,MAAM;IAAEK,IAAI,GAAG9B,MAAM,CAACyB,MAAM,EAAE,CAAC,OAAO,EAAE,gBAAgB,EAAE,0BAA0B,EAAE,MAAM,CAAC,CAAC;EAChK;EACA;EACA,MAAMM,eAAe,GAAGd,OAAO,CAACe,WAAW,CAAC,CAAC;EAC7C;EACA,MAAMC,QAAQ,GAAGP,KAAK,KAAK,WAAW,GAAGnB,WAAW,CAACwB,eAAe,CAAC,GAAG,IAAI;EAC5E;EACA,MAAMG,MAAM,GAAG1B,gBAAgB,CAACkB,KAAK,EAAEK,eAAe,EAAEH,wBAAwB,CAAC;EACjF,OAAOP,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEQ,IAAI,CAAC,EAAE;IAAEN,UAAU;IACtDE,KAAK;IACLC,cAAc;IACdC,wBAAwB;IACxBC,IAAI;IACJ;IACAK,MAAM;IAAEC,iBAAiB,EAAE1B,yBAAyB,CAACoB,IAAI,CAAC;IAAEI;EAAS,CAAC,CAAC;AAC/E;AAEA,SAASrB,gBAAgB,IAAIwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}