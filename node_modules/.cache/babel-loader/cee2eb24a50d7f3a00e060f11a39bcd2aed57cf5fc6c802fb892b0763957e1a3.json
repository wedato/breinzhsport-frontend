{"ast":null,"code":"import { strHasLength } from \"./utils\";\nimport { COLOR_BLACK, COLOR_WHITE, POPUP_BORDER_COLOR } from \"./constants\";\nexport function getPopupRenderFunction(unclusteredLayerId, {\n  popupBackgroundColor: background = COLOR_WHITE,\n  popupBorderColor: borderColor = POPUP_BORDER_COLOR,\n  popupBorderWidth: borderWidth = 2,\n  popupFontColor: fontColor = COLOR_BLACK,\n  popupPadding: padding = 20,\n  popupBorderRadius: radius = 4,\n  popupTitleFontWeight: fontWeight = \"bold\"\n}) {\n  return selectedFeature => {\n    let title, address;\n    // Try to get Title and address from existing feature properties\n    if (strHasLength(selectedFeature.properties.place_name)) {\n      const placeName = selectedFeature.properties.place_name.split(\",\");\n      title = placeName[0];\n      address = placeName.splice(1, placeName.length).join(\",\");\n    } else if (strHasLength(selectedFeature.properties.title) || strHasLength(selectedFeature.properties.address)) {\n      title = selectedFeature.properties.title;\n      address = selectedFeature.properties.address;\n    } else {\n      title = \"Coordinates\";\n      address = selectedFeature.geometry.coordinates;\n    }\n    const titleHtml = `<div class=\"${unclusteredLayerId}-popup-title\" style=\"font-weight: ${fontWeight};\">${title}</div>`;\n    const addressHtml = `<div class=\"${unclusteredLayerId}-popup-address\">${address}</div>`;\n    const popupHtmlStyle = `background: ${background}; border: ${borderWidth}px solid ${borderColor}; color: ${fontColor}; border-radius: ${radius}px; padding: ${padding}px; word-wrap: break-word; margin: -10px -10px -15px;`;\n    let popupHtml = `<div class=\"${unclusteredLayerId}-popup\" style=\"${popupHtmlStyle}\">`;\n    if (title) popupHtml += titleHtml;\n    if (address) popupHtml += addressHtml;\n    popupHtml += \"</div>\";\n    return popupHtml;\n  };\n}","map":{"version":3,"names":["strHasLength","COLOR_BLACK","COLOR_WHITE","POPUP_BORDER_COLOR","getPopupRenderFunction","unclusteredLayerId","popupBackgroundColor","background","popupBorderColor","borderColor","popupBorderWidth","borderWidth","popupFontColor","fontColor","popupPadding","padding","popupBorderRadius","radius","popupTitleFontWeight","fontWeight","selectedFeature","title","address","properties","place_name","placeName","split","splice","length","join","geometry","coordinates","titleHtml","addressHtml","popupHtmlStyle","popupHtml"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/maplibre-gl-js-amplify/lib/esm/popupRender.js"],"sourcesContent":["import { strHasLength } from \"./utils\";\nimport { COLOR_BLACK, COLOR_WHITE, POPUP_BORDER_COLOR } from \"./constants\";\nexport function getPopupRenderFunction(unclusteredLayerId, { popupBackgroundColor: background = COLOR_WHITE, popupBorderColor: borderColor = POPUP_BORDER_COLOR, popupBorderWidth: borderWidth = 2, popupFontColor: fontColor = COLOR_BLACK, popupPadding: padding = 20, popupBorderRadius: radius = 4, popupTitleFontWeight: fontWeight = \"bold\", }) {\n    return (selectedFeature) => {\n        let title, address;\n        // Try to get Title and address from existing feature properties\n        if (strHasLength(selectedFeature.properties.place_name)) {\n            const placeName = selectedFeature.properties.place_name.split(\",\");\n            title = placeName[0];\n            address = placeName.splice(1, placeName.length).join(\",\");\n        }\n        else if (strHasLength(selectedFeature.properties.title) ||\n            strHasLength(selectedFeature.properties.address)) {\n            title = selectedFeature.properties.title;\n            address = selectedFeature.properties.address;\n        }\n        else {\n            title = \"Coordinates\";\n            address = selectedFeature.geometry.coordinates;\n        }\n        const titleHtml = `<div class=\"${unclusteredLayerId}-popup-title\" style=\"font-weight: ${fontWeight};\">${title}</div>`;\n        const addressHtml = `<div class=\"${unclusteredLayerId}-popup-address\">${address}</div>`;\n        const popupHtmlStyle = `background: ${background}; border: ${borderWidth}px solid ${borderColor}; color: ${fontColor}; border-radius: ${radius}px; padding: ${padding}px; word-wrap: break-word; margin: -10px -10px -15px;`;\n        let popupHtml = `<div class=\"${unclusteredLayerId}-popup\" style=\"${popupHtmlStyle}\">`;\n        if (title)\n            popupHtml += titleHtml;\n        if (address)\n            popupHtml += addressHtml;\n        popupHtml += \"</div>\";\n        return popupHtml;\n    };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,SAAS;AACtC,SAASC,WAAW,EAAEC,WAAW,EAAEC,kBAAkB,QAAQ,aAAa;AAC1E,OAAO,SAASC,sBAAsBA,CAACC,kBAAkB,EAAE;EAAEC,oBAAoB,EAAEC,UAAU,GAAGL,WAAW;EAAEM,gBAAgB,EAAEC,WAAW,GAAGN,kBAAkB;EAAEO,gBAAgB,EAAEC,WAAW,GAAG,CAAC;EAAEC,cAAc,EAAEC,SAAS,GAAGZ,WAAW;EAAEa,YAAY,EAAEC,OAAO,GAAG,EAAE;EAAEC,iBAAiB,EAAEC,MAAM,GAAG,CAAC;EAAEC,oBAAoB,EAAEC,UAAU,GAAG;AAAQ,CAAC,EAAE;EAClV,OAAQC,eAAe,IAAK;IACxB,IAAIC,KAAK,EAAEC,OAAO;IAClB;IACA,IAAItB,YAAY,CAACoB,eAAe,CAACG,UAAU,CAACC,UAAU,CAAC,EAAE;MACrD,MAAMC,SAAS,GAAGL,eAAe,CAACG,UAAU,CAACC,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC;MAClEL,KAAK,GAAGI,SAAS,CAAC,CAAC,CAAC;MACpBH,OAAO,GAAGG,SAAS,CAACE,MAAM,CAAC,CAAC,EAAEF,SAAS,CAACG,MAAM,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IAC7D,CAAC,MACI,IAAI7B,YAAY,CAACoB,eAAe,CAACG,UAAU,CAACF,KAAK,CAAC,IACnDrB,YAAY,CAACoB,eAAe,CAACG,UAAU,CAACD,OAAO,CAAC,EAAE;MAClDD,KAAK,GAAGD,eAAe,CAACG,UAAU,CAACF,KAAK;MACxCC,OAAO,GAAGF,eAAe,CAACG,UAAU,CAACD,OAAO;IAChD,CAAC,MACI;MACDD,KAAK,GAAG,aAAa;MACrBC,OAAO,GAAGF,eAAe,CAACU,QAAQ,CAACC,WAAW;IAClD;IACA,MAAMC,SAAS,GAAG,eAAe3B,kBAAkB,qCAAqCc,UAAU,MAAME,KAAK,QAAQ;IACrH,MAAMY,WAAW,GAAG,eAAe5B,kBAAkB,mBAAmBiB,OAAO,QAAQ;IACvF,MAAMY,cAAc,GAAG,eAAe3B,UAAU,aAAaI,WAAW,YAAYF,WAAW,YAAYI,SAAS,oBAAoBI,MAAM,gBAAgBF,OAAO,uDAAuD;IAC5N,IAAIoB,SAAS,GAAG,eAAe9B,kBAAkB,kBAAkB6B,cAAc,IAAI;IACrF,IAAIb,KAAK,EACLc,SAAS,IAAIH,SAAS;IAC1B,IAAIV,OAAO,EACPa,SAAS,IAAIF,WAAW;IAC5BE,SAAS,IAAI,QAAQ;IACrB,OAAOA,SAAS;EACpB,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}