{"ast":null,"code":"\"use strict\";\n\nvar validLogLevels = ['debug', 'info', 'warn', 'error', 'silent'];\nvar defaultLogLevel = validLogLevels.indexOf('error');\nvar logLevel = calculateLogLevel(process.env.AWS_XRAY_DEBUG_MODE ? 'debug' : process.env.AWS_XRAY_LOG_LEVEL);\nvar logger = {\n  error: createLoggerForLevel('error'),\n  info: createLoggerForLevel('info'),\n  warn: createLoggerForLevel('warn'),\n  debug: createLoggerForLevel('debug')\n};\nfunction createLoggerForLevel(level) {\n  var loggerLevel = validLogLevels.indexOf(level);\n  var consoleMethod = console[level] || console.log || (() => {});\n  if (loggerLevel >= logLevel) {\n    return (message, meta) => {\n      if (message || meta) {\n        consoleMethod(formatLogMessage(level, message, meta));\n      }\n    };\n  } else {\n    return () => {};\n  }\n}\nfunction calculateLogLevel(level) {\n  if (level) {\n    var normalisedLevel = level.toLowerCase();\n    var index = validLogLevels.indexOf(normalisedLevel);\n    return index >= 0 ? index : defaultLogLevel;\n  }\n  // Silently ignore invalid log levels, default to default level\n  return defaultLogLevel;\n}\nfunction createTimestamp(date) {\n  var tzo = -date.getTimezoneOffset(),\n    // Negate to make this tzo = local - UTC\n    dif = tzo >= 0 ? '+' : '-',\n    pad = function (num) {\n      var norm = Math.floor(Math.abs(num));\n      return (norm < 10 ? '0' : '') + norm;\n    };\n  return new Date(date.getTime() + tzo * 60 * 1000).toISOString().replace(/T/, ' ').replace(/Z/, ' ') + dif + pad(tzo / 60) + ':' + pad(tzo % 60);\n}\nfunction isLambdaFunction() {\n  return process.env.LAMBDA_TASK_ROOT !== undefined;\n}\nfunction formatLogMessage(level, message, meta) {\n  var messageParts = [];\n  if (!isLambdaFunction()) {\n    messageParts.push(createTimestamp(new Date()));\n    messageParts.push(`[${level.toUpperCase()}]`);\n  }\n  if (message) {\n    messageParts.push(message);\n  }\n  var logString = messageParts.join(' ');\n  var metaDataString = formatMetaData(meta);\n  return [logString, metaDataString].filter(str => str.length > 0).join('\\n  ');\n}\nfunction formatMetaData(meta) {\n  if (!meta) {\n    return '';\n  }\n  return typeof meta === 'string' ? meta : JSON.stringify(meta);\n}\nvar logging = {\n  setLogger: function setLogger(logObj) {\n    logger = logObj;\n  },\n  getLogger: function getLogger() {\n    return logger;\n  }\n};\nmodule.exports = logging;","map":{"version":3,"names":["validLogLevels","defaultLogLevel","indexOf","logLevel","calculateLogLevel","process","env","AWS_XRAY_DEBUG_MODE","AWS_XRAY_LOG_LEVEL","logger","error","createLoggerForLevel","info","warn","debug","level","loggerLevel","consoleMethod","console","log","message","meta","formatLogMessage","normalisedLevel","toLowerCase","index","createTimestamp","date","tzo","getTimezoneOffset","dif","pad","num","norm","Math","floor","abs","Date","getTime","toISOString","replace","isLambdaFunction","LAMBDA_TASK_ROOT","undefined","messageParts","push","toUpperCase","logString","join","metaDataString","formatMetaData","filter","str","length","JSON","stringify","logging","setLogger","logObj","getLogger","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/logger.js"],"sourcesContent":["\"use strict\";\nvar validLogLevels = ['debug', 'info', 'warn', 'error', 'silent'];\nvar defaultLogLevel = validLogLevels.indexOf('error');\nvar logLevel = calculateLogLevel(process.env.AWS_XRAY_DEBUG_MODE ? 'debug' : process.env.AWS_XRAY_LOG_LEVEL);\nvar logger = {\n    error: createLoggerForLevel('error'),\n    info: createLoggerForLevel('info'),\n    warn: createLoggerForLevel('warn'),\n    debug: createLoggerForLevel('debug'),\n};\nfunction createLoggerForLevel(level) {\n    var loggerLevel = validLogLevels.indexOf(level);\n    var consoleMethod = console[level] || console.log || (() => { });\n    if (loggerLevel >= logLevel) {\n        return (message, meta) => {\n            if (message || meta) {\n                consoleMethod(formatLogMessage(level, message, meta));\n            }\n        };\n    }\n    else {\n        return () => { };\n    }\n}\nfunction calculateLogLevel(level) {\n    if (level) {\n        var normalisedLevel = level.toLowerCase();\n        var index = validLogLevels.indexOf(normalisedLevel);\n        return index >= 0 ? index : defaultLogLevel;\n    }\n    // Silently ignore invalid log levels, default to default level\n    return defaultLogLevel;\n}\nfunction createTimestamp(date) {\n    var tzo = -date.getTimezoneOffset(), // Negate to make this tzo = local - UTC\n    dif = tzo >= 0 ? '+' : '-', pad = function (num) {\n        var norm = Math.floor(Math.abs(num));\n        return (norm < 10 ? '0' : '') + norm;\n    };\n    return new Date(date.getTime() + (tzo * 60 * 1000)).toISOString()\n        .replace(/T/, ' ')\n        .replace(/Z/, ' ') +\n        dif + pad(tzo / 60) +\n        ':' + pad(tzo % 60);\n}\nfunction isLambdaFunction() {\n    return process.env.LAMBDA_TASK_ROOT !== undefined;\n}\nfunction formatLogMessage(level, message, meta) {\n    var messageParts = [];\n    if (!isLambdaFunction()) {\n        messageParts.push(createTimestamp(new Date()));\n        messageParts.push(`[${level.toUpperCase()}]`);\n    }\n    if (message) {\n        messageParts.push(message);\n    }\n    var logString = messageParts.join(' ');\n    var metaDataString = formatMetaData(meta);\n    return [logString, metaDataString].filter(str => str.length > 0).join('\\n  ');\n}\nfunction formatMetaData(meta) {\n    if (!meta) {\n        return '';\n    }\n    return ((typeof (meta) === 'string') ? meta : JSON.stringify(meta));\n}\nvar logging = {\n    setLogger: function setLogger(logObj) {\n        logger = logObj;\n    },\n    getLogger: function getLogger() {\n        return logger;\n    }\n};\nmodule.exports = logging;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}