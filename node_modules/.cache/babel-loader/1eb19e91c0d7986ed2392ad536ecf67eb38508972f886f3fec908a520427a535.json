{"ast":null,"code":"import * as CommonSelectors from '../lib/common_selectors.js';\nimport doubleClickZoom from '../lib/double_click_zoom.js';\nimport * as Constants from '../constants.js';\nimport isEventAtCoordinates from '../lib/is_event_at_coordinates.js';\nimport createVertex from '../lib/create_vertex.js';\nconst DrawPolygon = {};\nDrawPolygon.onSetup = function () {\n  const polygon = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n  this.addFeature(polygon);\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  this.activateUIButton(Constants.types.POLYGON);\n  this.setActionableState({\n    trash: true\n  });\n  return {\n    polygon,\n    currentVertexPosition: 0\n  };\n};\nDrawPolygon.clickAnywhere = function (state, e) {\n  if (state.currentVertexPosition > 0 && isEventAtCoordinates(e, state.polygon.coordinates[0][state.currentVertexPosition - 1])) {\n    return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n      featureIds: [state.polygon.id]\n    });\n  }\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n  state.currentVertexPosition++;\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n};\nDrawPolygon.clickOnVertex = function (state) {\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n    featureIds: [state.polygon.id]\n  });\n};\nDrawPolygon.onMouseMove = function (state, e) {\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n  if (CommonSelectors.isVertex(e)) {\n    this.updateUIClasses({\n      mouse: Constants.cursors.POINTER\n    });\n  }\n};\nDrawPolygon.onTap = DrawPolygon.onClick = function (state, e) {\n  if (CommonSelectors.isVertex(e)) return this.clickOnVertex(state, e);\n  return this.clickAnywhere(state, e);\n};\nDrawPolygon.onKeyUp = function (state, e) {\n  if (CommonSelectors.isEscapeKey(e)) {\n    this.deleteFeature([state.polygon.id], {\n      silent: true\n    });\n    this.changeMode(Constants.modes.SIMPLE_SELECT);\n  } else if (CommonSelectors.isEnterKey(e)) {\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {\n      featureIds: [state.polygon.id]\n    });\n  }\n};\nDrawPolygon.onStop = function (state) {\n  this.updateUIClasses({\n    mouse: Constants.cursors.NONE\n  });\n  doubleClickZoom.enable(this);\n  this.activateUIButton();\n\n  // check to see if we've deleted this feature\n  if (this.getFeature(state.polygon.id) === undefined) return;\n\n  //remove last added coordinate\n  state.polygon.removeCoordinate(`0.${state.currentVertexPosition}`);\n  if (state.polygon.isValid()) {\n    this.fire(Constants.events.CREATE, {\n      features: [state.polygon.toGeoJSON()]\n    });\n  } else {\n    this.deleteFeature([state.polygon.id], {\n      silent: true\n    });\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {}, {\n      silent: true\n    });\n  }\n};\nDrawPolygon.toDisplayFeatures = function (state, geojson, display) {\n  const isActivePolygon = geojson.properties.id === state.polygon.id;\n  geojson.properties.active = isActivePolygon ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  if (!isActivePolygon) return display(geojson);\n\n  // Don't render a polygon until it has two positions\n  // (and a 3rd which is just the first repeated)\n  if (geojson.geometry.coordinates.length === 0) return;\n  const coordinateCount = geojson.geometry.coordinates[0].length;\n  // 2 coordinates after selecting a draw type\n  // 3 after creating the first point\n  if (coordinateCount < 3) {\n    return;\n  }\n  geojson.properties.meta = Constants.meta.FEATURE;\n  display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][0], '0.0', false));\n  if (coordinateCount > 3) {\n    // Add a start position marker to the map, clicking on this will finish the feature\n    // This should only be shown when we're in a valid spot\n    const endPos = geojson.geometry.coordinates[0].length - 3;\n    display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][endPos], `0.${endPos}`, false));\n  }\n  if (coordinateCount <= 4) {\n    // If we've only drawn two positions (plus the closer),\n    // make a LineString instead of a Polygon\n    const lineCoordinates = [[geojson.geometry.coordinates[0][0][0], geojson.geometry.coordinates[0][0][1]], [geojson.geometry.coordinates[0][1][0], geojson.geometry.coordinates[0][1][1]]];\n    // create an initial vertex so that we can track the first point on mobile devices\n    display({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: geojson.properties,\n      geometry: {\n        coordinates: lineCoordinates,\n        type: Constants.geojsonTypes.LINE_STRING\n      }\n    });\n    if (coordinateCount === 3) {\n      return;\n    }\n  }\n  // render the Polygon\n  return display(geojson);\n};\nDrawPolygon.onTrash = function (state) {\n  this.deleteFeature([state.polygon.id], {\n    silent: true\n  });\n  this.changeMode(Constants.modes.SIMPLE_SELECT);\n};\nexport default DrawPolygon;","map":{"version":3,"names":["CommonSelectors","doubleClickZoom","Constants","isEventAtCoordinates","createVertex","DrawPolygon","onSetup","polygon","newFeature","type","geojsonTypes","FEATURE","properties","geometry","POLYGON","coordinates","addFeature","clearSelectedFeatures","disable","updateUIClasses","mouse","cursors","ADD","activateUIButton","types","setActionableState","trash","currentVertexPosition","clickAnywhere","state","e","changeMode","modes","SIMPLE_SELECT","featureIds","id","updateCoordinate","lngLat","lng","lat","clickOnVertex","onMouseMove","isVertex","POINTER","onTap","onClick","onKeyUp","isEscapeKey","deleteFeature","silent","isEnterKey","onStop","NONE","enable","getFeature","undefined","removeCoordinate","isValid","fire","events","CREATE","features","toGeoJSON","toDisplayFeatures","geojson","display","isActivePolygon","active","activeStates","ACTIVE","INACTIVE","length","coordinateCount","meta","endPos","lineCoordinates","LINE_STRING","onTrash"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@mapbox/mapbox-gl-draw/src/modes/draw_polygon.js"],"sourcesContent":["import * as CommonSelectors from '../lib/common_selectors.js';\nimport doubleClickZoom from '../lib/double_click_zoom.js';\nimport * as Constants from '../constants.js';\nimport isEventAtCoordinates from '../lib/is_event_at_coordinates.js';\nimport createVertex from '../lib/create_vertex.js';\n\nconst DrawPolygon = {};\n\nDrawPolygon.onSetup = function() {\n  const polygon = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n\n  this.addFeature(polygon);\n\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  this.activateUIButton(Constants.types.POLYGON);\n  this.setActionableState({\n    trash: true\n  });\n\n  return {\n    polygon,\n    currentVertexPosition: 0\n  };\n};\n\nDrawPolygon.clickAnywhere = function(state, e) {\n  if (state.currentVertexPosition > 0 && isEventAtCoordinates(e, state.polygon.coordinates[0][state.currentVertexPosition - 1])) {\n    return this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.polygon.id] });\n  }\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n  state.currentVertexPosition++;\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n};\n\nDrawPolygon.clickOnVertex = function(state) {\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.polygon.id] });\n};\n\nDrawPolygon.onMouseMove = function(state, e) {\n  state.polygon.updateCoordinate(`0.${state.currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n  if (CommonSelectors.isVertex(e)) {\n    this.updateUIClasses({ mouse: Constants.cursors.POINTER });\n  }\n};\n\nDrawPolygon.onTap = DrawPolygon.onClick = function(state, e) {\n  if (CommonSelectors.isVertex(e)) return this.clickOnVertex(state, e);\n  return this.clickAnywhere(state, e);\n};\n\nDrawPolygon.onKeyUp = function(state, e) {\n  if (CommonSelectors.isEscapeKey(e)) {\n    this.deleteFeature([state.polygon.id], { silent: true });\n    this.changeMode(Constants.modes.SIMPLE_SELECT);\n  } else if (CommonSelectors.isEnterKey(e)) {\n    this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.polygon.id] });\n  }\n};\n\nDrawPolygon.onStop = function(state) {\n  this.updateUIClasses({ mouse: Constants.cursors.NONE });\n  doubleClickZoom.enable(this);\n  this.activateUIButton();\n\n  // check to see if we've deleted this feature\n  if (this.getFeature(state.polygon.id) === undefined) return;\n\n  //remove last added coordinate\n  state.polygon.removeCoordinate(`0.${state.currentVertexPosition}`);\n  if (state.polygon.isValid()) {\n    this.fire(Constants.events.CREATE, {\n      features: [state.polygon.toGeoJSON()]\n    });\n  } else {\n    this.deleteFeature([state.polygon.id], { silent: true });\n    this.changeMode(Constants.modes.SIMPLE_SELECT, {}, { silent: true });\n  }\n};\n\nDrawPolygon.toDisplayFeatures = function(state, geojson, display) {\n  const isActivePolygon = geojson.properties.id === state.polygon.id;\n  geojson.properties.active = (isActivePolygon) ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  if (!isActivePolygon) return display(geojson);\n\n  // Don't render a polygon until it has two positions\n  // (and a 3rd which is just the first repeated)\n  if (geojson.geometry.coordinates.length === 0) return;\n\n  const coordinateCount = geojson.geometry.coordinates[0].length;\n  // 2 coordinates after selecting a draw type\n  // 3 after creating the first point\n  if (coordinateCount < 3) {\n    return;\n  }\n  geojson.properties.meta = Constants.meta.FEATURE;\n  display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][0], '0.0', false));\n  if (coordinateCount > 3) {\n    // Add a start position marker to the map, clicking on this will finish the feature\n    // This should only be shown when we're in a valid spot\n    const endPos = geojson.geometry.coordinates[0].length - 3;\n    display(createVertex(state.polygon.id, geojson.geometry.coordinates[0][endPos], `0.${endPos}`, false));\n  }\n  if (coordinateCount <= 4) {\n    // If we've only drawn two positions (plus the closer),\n    // make a LineString instead of a Polygon\n    const lineCoordinates = [\n      [geojson.geometry.coordinates[0][0][0], geojson.geometry.coordinates[0][0][1]], [geojson.geometry.coordinates[0][1][0], geojson.geometry.coordinates[0][1][1]]\n    ];\n    // create an initial vertex so that we can track the first point on mobile devices\n    display({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: geojson.properties,\n      geometry: {\n        coordinates: lineCoordinates,\n        type: Constants.geojsonTypes.LINE_STRING\n      }\n    });\n    if (coordinateCount === 3) {\n      return;\n    }\n  }\n  // render the Polygon\n  return display(geojson);\n};\n\nDrawPolygon.onTrash = function(state) {\n  this.deleteFeature([state.polygon.id], { silent: true });\n  this.changeMode(Constants.modes.SIMPLE_SELECT);\n};\n\nexport default DrawPolygon;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}