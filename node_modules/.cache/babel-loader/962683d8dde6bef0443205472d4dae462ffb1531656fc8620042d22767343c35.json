{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends, __values } from \"tslib\";\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\nvar InMemoryCacheClass = /** @class */function (_super) {\n  __extends(InMemoryCacheClass, _super);\n  /**\n   * initialize the cache\n   *\n   * @param config - the configuration of the cache\n   */\n  function InMemoryCacheClass(config) {\n    var _this = this;\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    logger.debug('now we start!');\n    _this.cacheList = [];\n    _this.curSizeInBytes = 0;\n    _this.maxPriority = 5;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this);\n    // initialize list for every priority\n    for (var i = 0; i < _this.maxPriority; i += 1) {\n      _this.cacheList[i] = new CacheList();\n    }\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n  InMemoryCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes -= amount;\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n  InMemoryCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes += amount;\n  };\n  /**\n   * check whether item is expired\n   *\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n  InMemoryCacheClass.prototype._isExpired = function (key) {\n    var text = CacheObject.getItem(key);\n    var item = JSON.parse(text);\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n  InMemoryCacheClass.prototype._removeItem = function (prefixedKey, listIdx) {\n    // delete the key from the list\n    this.cacheList[listIdx].removeItem(prefixedKey);\n    // decrease the current size of the cache\n    this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);\n    // finally remove the item from memory\n    CacheObject.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n  InMemoryCacheClass.prototype._setItem = function (prefixedKey, item, listIdx) {\n    // insert the key into the list\n    this.cacheList[listIdx].insertItem(prefixedKey);\n    // increase the current size of the cache\n    this._increaseCurSizeInBytes(item.byteSize);\n    // finally add the item into memory\n    CacheObject.setItem(prefixedKey, JSON.stringify(item));\n  };\n  /**\n   * see whether cache is full\n   *\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n  InMemoryCacheClass.prototype._isCacheFull = function (itemSize) {\n    return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n  };\n  /**\n   * check whether the cache contains the key\n   *\n   * @param key\n   */\n  InMemoryCacheClass.prototype.containsKey = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      if (this.cacheList[i].containsKey(prefixedKey)) {\n        return i + 1;\n      }\n    }\n    return -1;\n  };\n  /**\n   * * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @throws if the item is too big which exceeds the limit of single item size\n   * @throws if the key is invalid\n   */\n  InMemoryCacheClass.prototype.setItem = function (key, value, options) {\n    var prefixedKey = this.config.keyPrefix + key;\n    // invalid keys\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n    // check wether this item is too big;\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    }\n    // if key already in the cache, then delete it.\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n    // pop out items in the cache when cache is full based on LRU\n    // first start from lowest priority cache list\n    var cacheListIdx = this.maxPriority - 1;\n    while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n      if (!this.cacheList[cacheListIdx].isEmpty()) {\n        var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n        this._removeItem(popedItemKey, cacheListIdx);\n      } else {\n        cacheListIdx -= 1;\n      }\n    }\n    this._setItem(prefixedKey, item, Number(item.priority) - 1);\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   *\n   * @param key - the key of the item\n   * @param options - the options of callback function\n   */\n  InMemoryCacheClass.prototype.getItem = function (key, options) {\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    }\n    // check whether it's in the cachelist\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      if (this._isExpired(prefixedKey)) {\n        // if expired, remove that item and return null\n        this._removeItem(prefixedKey, presentKeyPrio - 1);\n      } else {\n        // if not expired, great, return the value and refresh it\n        ret = CacheObject.getItem(prefixedKey);\n        var item = JSON.parse(ret);\n        this.cacheList[item.priority - 1].refresh(prefixedKey);\n        return item.data;\n      }\n    }\n    if (options && options.callback !== undefined) {\n      var val = options.callback();\n      if (val !== null) {\n        this.setItem(key, val, options);\n      }\n      return val;\n    }\n    return null;\n  };\n  /**\n   * remove item from the cache\n   *\n   * @param key - the key of the item\n   */\n  InMemoryCacheClass.prototype.removeItem = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n    // check if the key is in the cache\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n  };\n  /**\n   * clear the entire cache\n   */\n  InMemoryCacheClass.prototype.clear = function () {\n    var e_1, _a;\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_1 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          this._removeItem(key, i);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   */\n  InMemoryCacheClass.prototype.getAllKeys = function () {\n    var e_2, _a;\n    var keys = [];\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_2 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          keys.push(key.substring(this.config.keyPrefix.length));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return the current size of the cache\n   */\n  InMemoryCacheClass.prototype.getCacheCurSize = function () {\n    return this.curSizeInBytes;\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   */\n  InMemoryCacheClass.prototype.createInstance = function (config) {\n    return new InMemoryCacheClass(config);\n  };\n  return InMemoryCacheClass;\n}(StorageCache);\nexport { InMemoryCacheClass };\nexport var InMemoryCache = new InMemoryCacheClass();","map":{"version":3,"names":["CacheList","defaultConfig","getCurrTime","CacheObject","StorageCache","ConsoleLogger","Logger","logger","InMemoryCacheClass","_super","__extends","config","_this","cacheConfig","Object","assign","call","debug","cacheList","curSizeInBytes","maxPriority","getItem","bind","setItem","removeItem","i","prototype","_decreaseCurSizeInBytes","amount","_increaseCurSizeInBytes","_isExpired","key","text","item","JSON","parse","expires","_removeItem","prefixedKey","listIdx","byteSize","_setItem","insertItem","stringify","_isCacheFull","itemSize","capacityInBytes","containsKey","keyPrefix","value","options","cacheCurSizeKey","warn","cacheItemOptions","priority","undefined","defaultPriority","defaultTTL","fillCacheItem","itemMaxSize","presentKeyPrio","cacheListIdx","isEmpty","popedItemKey","getLastItem","Number","ret","refresh","data","callback","val","clear","_b","e_1","__values","getKeys","_c","next","done","getAllKeys","keys","e_2","push","substring","length","getCacheCurSize","createInstance","InMemoryCache"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-amplify\\cache\\src\\InMemoryCache.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\r\n\r\nimport { StorageCache } from './StorageCache';\r\nimport { ICache, CacheConfig, CacheItem, CacheItemOptions } from './types';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\n\r\nconst logger = new Logger('InMemoryCache');\r\n\r\n/**\r\n * Customized in-memory cache with LRU implemented\r\n * @member cacheObj - object which store items\r\n * @member cacheList - list of keys in the cache with LRU\r\n * @member curSizeInBytes - current size of the cache\r\n * @member maxPriority - max of the priority\r\n * @member cacheSizeLimit - the limit of cache size\r\n */\r\nexport class InMemoryCacheClass extends StorageCache implements ICache {\r\n\tprivate cacheList: CacheList[];\r\n\tprivate curSizeInBytes: number;\r\n\tprivate maxPriority: number;\r\n\tprivate cacheSizeLimit: number;\r\n\r\n\t/**\r\n\t * initialize the cache\r\n\t *\r\n\t * @param config - the configuration of the cache\r\n\t */\r\n\tconstructor(config?: CacheConfig) {\r\n\t\tconst cacheConfig = config\r\n\t\t\t? Object.assign({}, defaultConfig, config)\r\n\t\t\t: defaultConfig;\r\n\t\tsuper(cacheConfig);\r\n\t\tlogger.debug('now we start!');\r\n\t\tthis.cacheList = [];\r\n\t\tthis.curSizeInBytes = 0;\r\n\t\tthis.maxPriority = 5;\r\n\r\n\t\tthis.getItem = this.getItem.bind(this);\r\n\t\tthis.setItem = this.setItem.bind(this);\r\n\t\tthis.removeItem = this.removeItem.bind(this);\r\n\r\n\t\t// initialize list for every priority\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tthis.cacheList[i] = new CacheList();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * decrease current size of the cache\r\n\t *\r\n\t * @param amount - the amount of the cache size which needs to be decreased\r\n\t */\r\n\tprivate _decreaseCurSizeInBytes(amount: number): void {\r\n\t\tthis.curSizeInBytes -= amount;\r\n\t}\r\n\r\n\t/**\r\n\t * increase current size of the cache\r\n\t *\r\n\t * @param amount - the amount of the cache szie which need to be increased\r\n\t */\r\n\tprivate _increaseCurSizeInBytes(amount: number): void {\r\n\t\tthis.curSizeInBytes += amount;\r\n\t}\r\n\r\n\t/**\r\n\t * check whether item is expired\r\n\t *\r\n\t * @param key - the key of the item\r\n\t *\r\n\t * @return true if the item is expired.\r\n\t */\r\n\tprivate _isExpired(key: string): boolean {\r\n\t\tconst text: string | null = CacheObject.getItem(key);\r\n\t\tconst item: CacheItem = JSON.parse(text);\r\n\t\tif (getCurrTime() >= item.expires) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * delete item from cache\r\n\t *\r\n\t * @param prefixedKey - the key of the item\r\n\t * @param listIdx - indicates which cache list the key belongs to\r\n\t */\r\n\tprivate _removeItem(prefixedKey: string, listIdx: number): void {\r\n\t\t// delete the key from the list\r\n\t\tthis.cacheList[listIdx].removeItem(prefixedKey);\r\n\t\t// decrease the current size of the cache\r\n\t\tthis._decreaseCurSizeInBytes(\r\n\t\t\tJSON.parse(CacheObject.getItem(prefixedKey)).byteSize\r\n\t\t);\r\n\t\t// finally remove the item from memory\r\n\t\tCacheObject.removeItem(prefixedKey);\r\n\t}\r\n\r\n\t/**\r\n\t * put item into cache\r\n\t *\r\n\t * @param prefixedKey - the key of the item\r\n\t * @param itemData - the value of the item\r\n\t * @param itemSizeInBytes - the byte size of the item\r\n\t * @param listIdx - indicates which cache list the key belongs to\r\n\t */\r\n\tprivate _setItem(\r\n\t\tprefixedKey: string,\r\n\t\titem: CacheItem,\r\n\t\tlistIdx: number\r\n\t): void {\r\n\t\t// insert the key into the list\r\n\t\tthis.cacheList[listIdx].insertItem(prefixedKey);\r\n\t\t// increase the current size of the cache\r\n\t\tthis._increaseCurSizeInBytes(item.byteSize);\r\n\t\t// finally add the item into memory\r\n\t\tCacheObject.setItem(prefixedKey, JSON.stringify(item));\r\n\t}\r\n\r\n\t/**\r\n\t * see whether cache is full\r\n\t *\r\n\t * @param itemSize\r\n\t *\r\n\t * @return true if cache is full\r\n\t */\r\n\tprivate _isCacheFull(itemSize: number): boolean {\r\n\t\treturn this.curSizeInBytes + itemSize > this.config.capacityInBytes;\r\n\t}\r\n\r\n\t/**\r\n\t * check whether the cache contains the key\r\n\t *\r\n\t * @param key\r\n\t */\r\n\tprivate containsKey(key: string): number {\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tif (this.cacheList[i].containsKey(prefixedKey)) {\r\n\t\t\t\treturn i + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * * Set item into cache. You can put number, string, boolean or object.\r\n\t * The cache will first check whether has the same key.\r\n\t * If it has, it will delete the old item and then put the new item in\r\n\t * The cache will pop out items if it is full\r\n\t * You can specify the cache item options. The cache will abort and output a warning:\r\n\t * If the key is invalid\r\n\t * If the size of the item exceeds itemMaxSize.\r\n\t * If the value is undefined\r\n\t * If incorrect cache item configuration\r\n\t * If error happened with browser storage\r\n\t *\r\n\t * @param key - the key of the item\r\n\t * @param value - the value of the item\r\n\t * @param options - optional, the specified meta-data\r\n\t *\r\n\t * @throws if the item is too big which exceeds the limit of single item size\r\n\t * @throws if the key is invalid\r\n\t */\r\n\tpublic setItem(\r\n\t\tkey: string,\r\n\t\tvalue: object | string | number | boolean,\r\n\t\toptions?: CacheItemOptions\r\n\t): void {\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\t\t// invalid keys\r\n\t\tif (\r\n\t\t\tprefixedKey === this.config.keyPrefix ||\r\n\t\t\tprefixedKey === this.cacheCurSizeKey\r\n\t\t) {\r\n\t\t\tlogger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (typeof value === 'undefined') {\r\n\t\t\tlogger.warn(`The value of item should not be undefined!`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst cacheItemOptions: CacheItemOptions = {\r\n\t\t\tpriority:\r\n\t\t\t\toptions && options.priority !== undefined\r\n\t\t\t\t\t? options.priority\r\n\t\t\t\t\t: this.config.defaultPriority,\r\n\t\t\texpires:\r\n\t\t\t\toptions && options.expires !== undefined\r\n\t\t\t\t\t? options.expires\r\n\t\t\t\t\t: this.config.defaultTTL + getCurrTime(),\r\n\t\t};\r\n\r\n\t\tif (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\r\n\t\t\tlogger.warn(\r\n\t\t\t\t`Invalid parameter: priority due to out or range. It should be within 1 and 5.`\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst item: CacheItem = this.fillCacheItem(\r\n\t\t\tprefixedKey,\r\n\t\t\tvalue,\r\n\t\t\tcacheItemOptions\r\n\t\t);\r\n\r\n\t\t// check wether this item is too big;\r\n\t\tif (item.byteSize > this.config.itemMaxSize) {\r\n\t\t\tlogger.warn(\r\n\t\t\t\t`Item with key: ${key} you are trying to put into is too big!`\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// if key already in the cache, then delete it.\r\n\t\tconst presentKeyPrio: number = this.containsKey(key);\r\n\t\tif (presentKeyPrio !== -1) {\r\n\t\t\tthis._removeItem(prefixedKey, presentKeyPrio - 1);\r\n\t\t}\r\n\r\n\t\t// pop out items in the cache when cache is full based on LRU\r\n\t\t// first start from lowest priority cache list\r\n\t\tlet cacheListIdx = this.maxPriority - 1;\r\n\t\twhile (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\r\n\t\t\tif (!this.cacheList[cacheListIdx].isEmpty()) {\r\n\t\t\t\tconst popedItemKey = this.cacheList[cacheListIdx].getLastItem();\r\n\t\t\t\tthis._removeItem(popedItemKey, cacheListIdx);\r\n\t\t\t} else {\r\n\t\t\t\tcacheListIdx -= 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._setItem(prefixedKey, item, Number(item.priority) - 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\r\n\t * If you specified callback function in the options,\r\n\t * then the function will be executed if no such item in the cache\r\n\t * and finally put the return value into cache.\r\n\t * Please make sure the callback function will return the value you want to put into the cache.\r\n\t * The cache will abort output a warning:\r\n\t * If the key is invalid\r\n\t *\r\n\t * @param key - the key of the item\r\n\t * @param options - the options of callback function\r\n\t */\r\n\tpublic getItem(key: string, options?: CacheItemOptions): any {\r\n\t\tlet ret: string | null = null;\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n\t\tif (\r\n\t\t\tprefixedKey === this.config.keyPrefix ||\r\n\t\t\tprefixedKey === this.cacheCurSizeKey\r\n\t\t) {\r\n\t\t\tlogger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// check whether it's in the cachelist\r\n\t\tconst presentKeyPrio: number = this.containsKey(key);\r\n\t\tif (presentKeyPrio !== -1) {\r\n\t\t\tif (this._isExpired(prefixedKey)) {\r\n\t\t\t\t// if expired, remove that item and return null\r\n\t\t\t\tthis._removeItem(prefixedKey, presentKeyPrio - 1);\r\n\t\t\t} else {\r\n\t\t\t\t// if not expired, great, return the value and refresh it\r\n\t\t\t\tret = CacheObject.getItem(prefixedKey);\r\n\t\t\t\tconst item: CacheItem = JSON.parse(ret);\r\n\t\t\t\tthis.cacheList[item.priority - 1].refresh(prefixedKey);\r\n\t\t\t\treturn item.data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (options && options.callback !== undefined) {\r\n\t\t\tconst val: object | string | number | boolean = options.callback();\r\n\t\t\tif (val !== null) {\r\n\t\t\t\tthis.setItem(key, val, options);\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * remove item from the cache\r\n\t *\r\n\t * @param key - the key of the item\r\n\t */\r\n\tpublic removeItem(key: string): void {\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n\t\t// check if the key is in the cache\r\n\t\tconst presentKeyPrio: number = this.containsKey(key);\r\n\t\tif (presentKeyPrio !== -1) {\r\n\t\t\tthis._removeItem(prefixedKey, presentKeyPrio - 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * clear the entire cache\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tfor (const key of this.cacheList[i].getKeys()) {\r\n\t\t\t\tthis._removeItem(key, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return all the keys in the cache.\r\n\t */\r\n\tpublic getAllKeys(): string[] {\r\n\t\tconst keys: string[] = [];\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tfor (const key of this.cacheList[i].getKeys()) {\r\n\t\t\t\tkeys.push(key.substring(this.config.keyPrefix.length));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn keys;\r\n\t}\r\n\r\n\t/**\r\n\t * return the current size of the cache\r\n\t *\r\n\t * @return the current size of the cache\r\n\t */\r\n\tpublic getCacheCurSize(): number {\r\n\t\treturn this.curSizeInBytes;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a new instance of cache with customized configuration.\r\n\t * @param config - the customized configuration\r\n\t */\r\n\tpublic createInstance(config: CacheConfig): ICache {\r\n\t\treturn new InMemoryCacheClass(config);\r\n\t}\r\n}\r\n\r\nexport const InMemoryCache: ICache = new InMemoryCacheClass();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}