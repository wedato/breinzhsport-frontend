{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var InAppMessageInteractionEvent;\n(function (InAppMessageInteractionEvent) {\n  InAppMessageInteractionEvent[\"MESSAGE_RECEIVED\"] = \"MESSAGE_RECEIVED_EVENT\";\n  InAppMessageInteractionEvent[\"MESSAGE_DISPLAYED\"] = \"MESSAGE_DISPLAYED_EVENT\";\n  InAppMessageInteractionEvent[\"MESSAGE_DISMISSED\"] = \"MESSAGE_DISMISSED_EVENT\";\n  InAppMessageInteractionEvent[\"MESSAGE_ACTION_TAKEN\"] = \"MESSAGE_ACTION_TAKEN_EVENT\";\n})(InAppMessageInteractionEvent || (InAppMessageInteractionEvent = {}));","map":{"version":3,"names":["InAppMessageInteractionEvent"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-amplify\\notifications\\src\\InAppMessaging\\types.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { EventListener } from '../common';\nimport { AWSPinpointProviderConfig } from '../common/AWSPinpointProviderCommon/types';\nimport {\n\tNotificationsProvider,\n\tNotificationsSubCategory as NotificationsSubCategories,\n\tUserInfo,\n} from '../types';\n\nexport type NotificationsSubCategory = Extract<\n\tNotificationsSubCategories,\n\t'InAppMessaging'\n>;\n\nexport interface InAppMessagingInterface {\n\tconfigure: (config: InAppMessagingConfig) => InAppMessagingConfig;\n\tgetModuleName: () => NotificationsSubCategory;\n\tgetPluggable: (providerName: string) => InAppMessagingProvider;\n\taddPluggable: (pluggable: InAppMessagingProvider) => void;\n\tremovePluggable: (providerName: string) => void;\n\tsyncMessages: () => Promise<void[]>;\n\tclearMessages: () => Promise<void[]>;\n\tdispatchEvent: (event: InAppMessagingEvent) => Promise<void>;\n\tidentifyUser: (userId: string, userInfo: UserInfo) => Promise<void[]>;\n\tonMessageReceived: (\n\t\thandler: OnMessageInteractionEventHandler\n\t) => EventListener<OnMessageInteractionEventHandler>;\n\tonMessageDisplayed: (\n\t\thandler: OnMessageInteractionEventHandler\n\t) => EventListener<OnMessageInteractionEventHandler>;\n\tonMessageDismissed: (\n\t\thandler: OnMessageInteractionEventHandler\n\t) => EventListener<OnMessageInteractionEventHandler>;\n\tonMessageActionTaken: (\n\t\thandler: OnMessageInteractionEventHandler\n\t) => EventListener<OnMessageInteractionEventHandler>;\n\tnotifyMessageInteraction: (\n\t\tmessage: InAppMessage,\n\t\ttype: InAppMessageInteractionEvent\n\t) => void;\n\tsetConflictHandler: (handler: InAppMessageConflictHandler) => void;\n}\n\nexport interface InAppMessagingProvider extends NotificationsProvider {\n\t// return sub-category ('InAppMessaging')\n\tgetSubCategory(): NotificationsSubCategory;\n\n\t// get in-app messages from provider\n\tgetInAppMessages(): Promise<any>;\n\n\t// filters in-app messages based on event input and provider logic\n\tprocessInAppMessages(\n\t\tmessages: InAppMessage[],\n\t\tevent: InAppMessagingEvent\n\t): Promise<InAppMessage[]>;\n}\n\nexport interface InAppMessagingConfig {\n\tlistenForAnalyticsEvents?: boolean;\n\tAWSPinpoint?: AWSPinpointProviderConfig;\n}\n\nexport type InAppMessagingEvent = {\n\tname: string;\n\tattributes?: Record<string, string>;\n\tmetrics?: Record<string, number>;\n};\n\nexport type InAppMessageLayout =\n\t| 'BOTTOM_BANNER'\n\t| 'CAROUSEL'\n\t| 'FULL_SCREEN'\n\t| 'MIDDLE_BANNER'\n\t| 'MODAL'\n\t| 'TOP_BANNER';\n\nexport type InAppMessageAction = 'CLOSE' | 'DEEP_LINK' | 'LINK';\n\nexport type InAppMessageTextAlign = 'center' | 'left' | 'right';\n\ninterface InAppMessageContainer {\n\tstyle?: InAppMessageStyle;\n}\n\ninterface InAppMessageHeader {\n\tcontent: string;\n\tstyle?: InAppMessageStyle;\n}\n\ninterface InAppMessageBody {\n\tcontent: string;\n\tstyle?: InAppMessageStyle;\n}\n\nexport interface InAppMessageImage {\n\tsrc: string;\n}\n\nexport interface InAppMessageButton {\n\ttitle: string;\n\taction: InAppMessageAction;\n\turl?: string;\n\tstyle?: InAppMessageStyle;\n}\n\nexport interface InAppMessageStyle {\n\tbackgroundColor?: string;\n\tborderRadius?: number;\n\tcolor?: string;\n\ttextAlign?: InAppMessageTextAlign;\n}\n\nexport interface InAppMessageContent {\n\tcontainer?: InAppMessageContainer;\n\theader?: InAppMessageHeader;\n\tbody?: InAppMessageBody;\n\timage?: InAppMessageImage;\n\tprimaryButton?: InAppMessageButton;\n\tsecondaryButton?: InAppMessageButton;\n}\n\nexport interface InAppMessage {\n\tid: string;\n\tlayout: InAppMessageLayout;\n\tcontent: InAppMessageContent[];\n\tmetadata?: any;\n}\n\nexport type OnMessageInteractionEventHandler = (message: InAppMessage) => any;\n\nexport enum InAppMessageInteractionEvent {\n\tMESSAGE_RECEIVED = 'MESSAGE_RECEIVED_EVENT',\n\tMESSAGE_DISPLAYED = 'MESSAGE_DISPLAYED_EVENT',\n\tMESSAGE_DISMISSED = 'MESSAGE_DISMISSED_EVENT',\n\tMESSAGE_ACTION_TAKEN = 'MESSAGE_ACTION_TAKEN_EVENT',\n}\n\nexport type InAppMessageConflictHandler = (\n\tmessages: InAppMessage[]\n) => InAppMessage;\n"],"mappings":"AAAA;AACA;AAmIA,WAAYA,4BAKX;AALD,WAAYA,4BAA4B;EACvCA,4BAAA,+CAA2C;EAC3CA,4BAAA,iDAA6C;EAC7CA,4BAAA,iDAA6C;EAC7CA,4BAAA,uDAAmD;AACpD,CAAC,EALWA,4BAA4B,KAA5BA,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}