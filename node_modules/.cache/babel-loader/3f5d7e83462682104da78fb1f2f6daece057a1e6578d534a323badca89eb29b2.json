{"ast":null,"code":"\"use strict\";\n\nconst {\n  safeParseInt\n} = require('../utils');\nvar logger = require('../logger');\nvar DEFAULT_STREAMING_THRESHOLD = 100;\nvar utils = {\n  streamingThreshold: DEFAULT_STREAMING_THRESHOLD,\n  getCurrentTime: function getCurrentTime() {\n    return Date.now() / 1000;\n  },\n  setOrigin: function setOrigin(origin) {\n    this.origin = origin;\n  },\n  setPluginData: function setPluginData(pluginData) {\n    this.pluginData = pluginData;\n  },\n  setSDKData: function setSDKData(sdkData) {\n    this.sdkData = sdkData;\n  },\n  setServiceData: function setServiceData(serviceData) {\n    this.serviceData = serviceData;\n  },\n  /**\n   * Overrides the default streaming threshold (100).\n   * The threshold represents the maximum number of subsegments on a single segment before\n   * the SDK beings to send the completed subsegments out of band of the main segment.\n   * Reduce this threshold if you see the 'Segment too large to send' error.\n   * @param {number} threshold - The new threshold to use.\n   * @memberof AWSXRay\n   */\n  setStreamingThreshold: function setStreamingThreshold(threshold) {\n    if (isFinite(threshold) && threshold >= 0) {\n      utils.streamingThreshold = threshold;\n      logger.getLogger().debug('Subsegment streaming threshold set to: ' + threshold);\n    } else {\n      logger.getLogger().error('Invalid threshold: ' + threshold + '. Must be a whole number >= 0.');\n    }\n  },\n  getStreamingThreshold: function getStreamingThreshold() {\n    return utils.streamingThreshold;\n  },\n  /**\n   * Parses an HTTP response object to return an X-Ray compliant HTTP response object.\n   * @param {http.ServerResponse} res\n   * @returns {Object} - X-Ray response object to be added to (sub)segment\n   */\n  getHttpResponseData: res => {\n    const ret = {};\n    if (!res) {\n      return ret;\n    }\n    const status = safeParseInt(res.statusCode);\n    if (status !== 0) {\n      ret.status = status;\n    }\n    if (res.headers && res.headers['content-length']) {\n      ret.content_length = safeParseInt(res.headers['content-length']);\n    }\n    return ret;\n  },\n  getJsonStringifyReplacer: () => (_, value) => {\n    if (typeof value === 'bigint') {\n      return value.toString();\n    }\n    return value;\n  }\n};\nmodule.exports = utils;","map":{"version":3,"names":["safeParseInt","require","logger","DEFAULT_STREAMING_THRESHOLD","utils","streamingThreshold","getCurrentTime","Date","now","setOrigin","origin","setPluginData","pluginData","setSDKData","sdkData","setServiceData","serviceData","setStreamingThreshold","threshold","isFinite","getLogger","debug","error","getStreamingThreshold","getHttpResponseData","res","ret","status","statusCode","headers","content_length","getJsonStringifyReplacer","_","value","toString","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/segments/segment_utils.js"],"sourcesContent":["\"use strict\";\nconst { safeParseInt } = require('../utils');\nvar logger = require('../logger');\nvar DEFAULT_STREAMING_THRESHOLD = 100;\nvar utils = {\n    streamingThreshold: DEFAULT_STREAMING_THRESHOLD,\n    getCurrentTime: function getCurrentTime() {\n        return Date.now() / 1000;\n    },\n    setOrigin: function setOrigin(origin) {\n        this.origin = origin;\n    },\n    setPluginData: function setPluginData(pluginData) {\n        this.pluginData = pluginData;\n    },\n    setSDKData: function setSDKData(sdkData) {\n        this.sdkData = sdkData;\n    },\n    setServiceData: function setServiceData(serviceData) {\n        this.serviceData = serviceData;\n    },\n    /**\n     * Overrides the default streaming threshold (100).\n     * The threshold represents the maximum number of subsegments on a single segment before\n     * the SDK beings to send the completed subsegments out of band of the main segment.\n     * Reduce this threshold if you see the 'Segment too large to send' error.\n     * @param {number} threshold - The new threshold to use.\n     * @memberof AWSXRay\n     */\n    setStreamingThreshold: function setStreamingThreshold(threshold) {\n        if (isFinite(threshold) && threshold >= 0) {\n            utils.streamingThreshold = threshold;\n            logger.getLogger().debug('Subsegment streaming threshold set to: ' + threshold);\n        }\n        else {\n            logger.getLogger().error('Invalid threshold: ' + threshold + '. Must be a whole number >= 0.');\n        }\n    },\n    getStreamingThreshold: function getStreamingThreshold() {\n        return utils.streamingThreshold;\n    },\n    /**\n     * Parses an HTTP response object to return an X-Ray compliant HTTP response object.\n     * @param {http.ServerResponse} res\n     * @returns {Object} - X-Ray response object to be added to (sub)segment\n     */\n    getHttpResponseData: (res) => {\n        const ret = {};\n        if (!res) {\n            return ret;\n        }\n        const status = safeParseInt(res.statusCode);\n        if (status !== 0) {\n            ret.status = status;\n        }\n        if (res.headers && res.headers['content-length']) {\n            ret.content_length = safeParseInt(res.headers['content-length']);\n        }\n        return ret;\n    },\n    getJsonStringifyReplacer: () => (_, value) => {\n        if (typeof value === 'bigint') {\n            return value.toString();\n        }\n        return value;\n    }\n};\nmodule.exports = utils;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AAC5C,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;AACjC,IAAIE,2BAA2B,GAAG,GAAG;AACrC,IAAIC,KAAK,GAAG;EACRC,kBAAkB,EAAEF,2BAA2B;EAC/CG,cAAc,EAAE,SAASA,cAAcA,CAAA,EAAG;IACtC,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;EAC5B,CAAC;EACDC,SAAS,EAAE,SAASA,SAASA,CAACC,MAAM,EAAE;IAClC,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB,CAAC;EACDC,aAAa,EAAE,SAASA,aAAaA,CAACC,UAAU,EAAE;IAC9C,IAAI,CAACA,UAAU,GAAGA,UAAU;EAChC,CAAC;EACDC,UAAU,EAAE,SAASA,UAAUA,CAACC,OAAO,EAAE;IACrC,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B,CAAC;EACDC,cAAc,EAAE,SAASA,cAAcA,CAACC,WAAW,EAAE;IACjD,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,qBAAqB,EAAE,SAASA,qBAAqBA,CAACC,SAAS,EAAE;IAC7D,IAAIC,QAAQ,CAACD,SAAS,CAAC,IAAIA,SAAS,IAAI,CAAC,EAAE;MACvCd,KAAK,CAACC,kBAAkB,GAAGa,SAAS;MACpChB,MAAM,CAACkB,SAAS,CAAC,CAAC,CAACC,KAAK,CAAC,yCAAyC,GAAGH,SAAS,CAAC;IACnF,CAAC,MACI;MACDhB,MAAM,CAACkB,SAAS,CAAC,CAAC,CAACE,KAAK,CAAC,qBAAqB,GAAGJ,SAAS,GAAG,gCAAgC,CAAC;IAClG;EACJ,CAAC;EACDK,qBAAqB,EAAE,SAASA,qBAAqBA,CAAA,EAAG;IACpD,OAAOnB,KAAK,CAACC,kBAAkB;EACnC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACImB,mBAAmB,EAAGC,GAAG,IAAK;IAC1B,MAAMC,GAAG,GAAG,CAAC,CAAC;IACd,IAAI,CAACD,GAAG,EAAE;MACN,OAAOC,GAAG;IACd;IACA,MAAMC,MAAM,GAAG3B,YAAY,CAACyB,GAAG,CAACG,UAAU,CAAC;IAC3C,IAAID,MAAM,KAAK,CAAC,EAAE;MACdD,GAAG,CAACC,MAAM,GAAGA,MAAM;IACvB;IACA,IAAIF,GAAG,CAACI,OAAO,IAAIJ,GAAG,CAACI,OAAO,CAAC,gBAAgB,CAAC,EAAE;MAC9CH,GAAG,CAACI,cAAc,GAAG9B,YAAY,CAACyB,GAAG,CAACI,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACpE;IACA,OAAOH,GAAG;EACd,CAAC;EACDK,wBAAwB,EAAEA,CAAA,KAAM,CAACC,CAAC,EAAEC,KAAK,KAAK;IAC1C,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,OAAOA,KAAK,CAACC,QAAQ,CAAC,CAAC;IAC3B;IACA,OAAOD,KAAK;EAChB;AACJ,CAAC;AACDE,MAAM,CAACC,OAAO,GAAGhC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}