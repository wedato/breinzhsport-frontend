{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __read } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError, isNonRetryableError, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { Cache } from '@aws-amplify/cache';\nimport { Auth } from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONTROL_MSG, ConnectionState } from '../../types/PubSub';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS, CONNECTION_STATE_CHANGE } from '../constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor } from '../../utils/ReconnectionMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n/**\n * @returns base64url-encoded string - https://datatracker.ietf.org/doc/html/rfc4648#section-5\n */\nvar base64urlEncode = function (str) {\n  var base64Str = Buffer.from(str).toString('base64');\n  var base64UrlStr = base64Str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  return base64UrlStr;\n};\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com(?:\\.cn)?\\/graphql$/i;\nvar customDomainPath = '/realtime';\nvar AWSAppSyncRealTimeProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n  function AWSAppSyncRealTimeProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this.reconnectionMonitor = new ReconnectionMonitor();\n    // Monitor the connection state and pass changes along to Hub\n    _this.connectionStateMonitorSubscription = _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionState) {\n      dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionState\n      }, \"Connection state is \" + connectionState);\n      _this.connectionState = connectionState;\n      // Trigger START_RECONNECT when the connection is disrupted\n      if (connectionState === ConnectionState.ConnectionDisrupted) {\n        _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n      }\n      // Trigger HALT_RECONNECT to halt reconnection attempts when the state is anything other than\n      //   ConnectionDisrupted or Connecting\n      if ([ConnectionState.Connected, ConnectionState.ConnectedPendingDisconnect, ConnectionState.ConnectedPendingKeepAlive, ConnectionState.ConnectedPendingNetwork, ConnectionState.ConnectionDisruptedPendingNetwork, ConnectionState.Disconnected].includes(connectionState)) {\n        _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n      }\n    });\n    return _this;\n  }\n  /**\n   * Mark the socket closed and release all active listeners\n   */\n  AWSAppSyncRealTimeProvider.prototype.close = function () {\n    // Mark the socket closed both in status and the connection monitor\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n    // Turn off the subscription monitor Hub publishing\n    this.connectionStateMonitorSubscription.unsubscribe();\n    // Complete all reconnect observers\n    this.reconnectionMonitor.close();\n  };\n  AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n    return new WebSocket(url, protocol);\n  };\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  // Check if url matches standard domain pattern\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options, customUserAgentDetails) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionStartActive_1 = false;\n        var subscriptionId_1 = uuid();\n        var startSubscription_1 = function () {\n          if (!subscriptionStartActive_1) {\n            subscriptionStartActive_1 = true;\n            var startSubscriptionPromise = _this._startSubscriptionWithAWSAppSyncRealTime({\n              options: options,\n              observer: observer,\n              subscriptionId: subscriptionId_1,\n              customUserAgentDetails: customUserAgentDetails\n            }).catch(function (err) {\n              logger.debug(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err);\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            });\n            startSubscriptionPromise.finally(function () {\n              subscriptionStartActive_1 = false;\n            });\n          }\n        };\n        var reconnectSubscription_1;\n        // Add an observable to the reconnection list to manage reconnection for this subscription\n        reconnectSubscription_1 = new Observable(function (observer) {\n          _this.reconnectionMonitor.addObserver(observer);\n        }).subscribe(function () {\n          startSubscription_1();\n        });\n        startSubscription_1();\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  // Cleanup reconnection subscription\n                  reconnectSubscription_1 === null || reconnectSubscription_1 === void 0 ? void 0 : reconnectSubscription_1.unsubscribe();\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 3, 4, 5]);\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                case 2:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2 /*return*/];\n                  }\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n                  return [3 /*break*/, 5];\n                case 3:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3 /*break*/, 5];\n                case 4:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n                  return [7 /*endfinally*/];\n                case 5:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options['aws_appsync_dangerously_connect_to_http_endpoint_for_testing'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n      observer = _a.observer,\n      subscriptionId = _a.subscriptionId,\n      customUserAgentDetails = _a.customUserAgentDetails;\n    var _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _c, graphql_headers, _d, additionalHeaders, subscriptionState, data, dataString, headerObj, _e, _f, subscriptionMessage, stringToAWSRealTime, err_2, _g, subscriptionFailedCallback, subscriptionReadyCallback;\n      var _h;\n      var _this = this;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _c = options.graphql_headers, graphql_headers = _c === void 0 ? function () {\n              return {};\n            } : _c, _d = options.additionalHeaders, additionalHeaders = _d === void 0 ? {} : _d;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            };\n            // Having a subscription id map will make it simple to forward messages received\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: undefined\n            });\n            dataString = JSON.stringify(data);\n            _e = [{}];\n            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 1:\n            _f = [__assign.apply(void 0, _e.concat([_j.sent()]))];\n            return [4 /*yield*/, graphql_headers()];\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), additionalHeaders]), (_h = {}, _h[USER_AGENT_HEADER] = getAmplifyUserAgent(customUserAgentDetails), _h)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _j.label = 3;\n          case 3:\n            _j.trys.push([3, 5,, 6]);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            return [4 /*yield*/, this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n          case 4:\n            _j.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            err_2 = _j.sent();\n            this._logStartSubscriptionError(subscriptionId, observer, err_2);\n            return [2 /*return*/];\n          case 6:\n            _g = (_b = this.subscriptionObserverMap.get(subscriptionId)) !== null && _b !== void 0 ? _b : {}, subscriptionFailedCallback = _g.subscriptionFailedCallback, subscriptionReadyCallback = _g.subscriptionReadyCallback;\n            // This must be done before sending the message in order to be listening immediately\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Log logic for start subscription failures\n  AWSAppSyncRealTimeProvider.prototype._logStartSubscriptionError = function (subscriptionId, observer, err) {\n    var _a;\n    logger.debug({\n      err: err\n    });\n    var message = String((_a = err.message) !== null && _a !== void 0 ? _a : '');\n    // Resolving to give the state observer time to propogate the update\n    Promise.resolve(this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED));\n    // Capture the error only when the network didn't cause disruption\n    if (this.connectionState !== ConnectionState.ConnectionDisruptedPendingNetwork) {\n      // When the error is non-retriable, error out the observable\n      if (isNonRetryableError(err)) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n        });\n      } else {\n        logger.debug(CONTROL_MSG.CONNECTION_FAILED + \": \" + message);\n      }\n      var subscriptionFailedCallback = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n      // Notify concurrent unsubscription\n      if (typeof subscriptionFailedCallback === 'function') {\n        subscriptionFailedCallback();\n      }\n    }\n  };\n  // Waiting that subscription has been connected before trying to unsubscribe\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionObserver, subscriptionState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n        if (subscriptionObserver) {\n          subscriptionState = subscriptionObserver.subscriptionState;\n          // This in case unsubscribe is invoked before sending start subscription message\n          if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n            return [2 /*return*/, new Promise(function (res, rej) {\n              var observer = subscriptionObserver.observer,\n                subscriptionState = subscriptionObserver.subscriptionState,\n                variables = subscriptionObserver.variables,\n                query = subscriptionObserver.query;\n              _this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                subscriptionState: subscriptionState,\n                variables: variables,\n                query: query,\n                subscriptionReadyCallback: res,\n                subscriptionFailedCallback: rej\n              });\n            })];\n          }\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId);\n    // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n      var tempSocket = this.awsRealTimeSocket;\n      // Cleaning callbacks to avoid race condition, socket still exists\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    var _this = this;\n    if (typeof message.data !== 'string') {\n      return;\n    }\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n    var _a = JSON.parse(String(message.data)),\n      _b = _a.id,\n      id = _b === void 0 ? '' : _b,\n      payload = _a.payload,\n      type = _a.type;\n    var _c = this.subscriptionObserverMap.get(id) || {},\n      _d = _c.observer,\n      observer = _d === void 0 ? null : _d,\n      _e = _c.query,\n      query = _e === void 0 ? '' : _e,\n      _f = _c.variables,\n      variables = _f === void 0 ? {} : _f,\n      startAckTimeoutId = _c.startAckTimeoutId,\n      subscriptionReadyCallback = _c.subscriptionReadyCallback,\n      subscriptionFailedCallback = _c.subscriptionFailedCallback;\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: undefined,\n          subscriptionState: subscriptionState,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback\n        });\n      }\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(function () {\n        return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);\n      }, this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(function () {\n        _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: startAckTimeoutId,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback,\n          subscriptionState: subscriptionState\n        });\n        logger.debug(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload));\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n    if (subscriptionObserver) {\n      var observer = subscriptionObserver.observer,\n        query = subscriptionObserver.query,\n        variables = subscriptionObserver.variables;\n      if (!observer) {\n        return;\n      }\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      authenticationType = _a.authenticationType,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, authHeader, headerString, headerQs, discoverableEndpoint, protocol, awsRealTimeUrl, authTokenSubprotocol, err_3;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1, 4,, 5]);\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n            case 2:\n              authHeader = _a.sent();\n              headerString = authHeader ? JSON.stringify(authHeader) : '';\n              headerQs = base64urlEncode(headerString);\n              discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint;\n              authTokenSubprotocol = \"header-\" + headerQs;\n              return [4 /*yield*/, this._initializeRetryableHandshake(awsRealTimeUrl, authTokenSubprotocol)];\n            case 3:\n              _a.sent();\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _a.sent();\n              logger.debug('Connection exited with', err_3);\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n              this.awsRealTimeSocket = undefined;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl, subprotocol) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl, subprotocol], MAX_DELAY_MS)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl, subprotocol) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, _a, errorType, errorCode;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var newSocket = _this.getNewWebSocket(awsRealTimeUrl, ['graphql-ws', subprotocol]);\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n                newSocket.onclose = function () {\n                  rej(new Error('Connection handshake error'));\n                };\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n          case 2:\n            _b.sent();\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                if (_this.awsRealTimeSocket) {\n                  var ackOk_1 = false;\n                  _this.awsRealTimeSocket.onerror = function (error) {\n                    logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                  };\n                  _this.awsRealTimeSocket.onclose = function (event) {\n                    logger.debug(\"WebSocket closed \" + event.reason);\n                    rej(new Error(JSON.stringify(event)));\n                  };\n                  _this.awsRealTimeSocket.onmessage = function (message) {\n                    if (typeof message.data !== 'string') {\n                      return;\n                    }\n                    logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                    var data = JSON.parse(message.data);\n                    var type = data.type,\n                      _a = data.payload,\n                      _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                      connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                      ackOk_1 = true;\n                      if (_this.awsRealTimeSocket) {\n                        _this.keepAliveTimeout = connectionTimeoutMs;\n                        _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                        _this.awsRealTimeSocket.onerror = function (err) {\n                          logger.debug(err);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                        _this.awsRealTimeSocket.onclose = function (event) {\n                          logger.debug(\"WebSocket closed \" + event.reason);\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                      }\n                      res('Cool, connected to AWS AppSyncRealTime');\n                      return;\n                    }\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                      var _c = data.payload,\n                        _d = (_c === void 0 ? {} : _c).errors,\n                        _e = __read(_d === void 0 ? [] : _d, 1),\n                        _f = _e[0],\n                        _g = _f === void 0 ? {} : _f,\n                        _h = _g.errorType,\n                        errorType = _h === void 0 ? '' : _h,\n                        _j = _g.errorCode,\n                        errorCode = _j === void 0 ? 0 : _j;\n                      rej({\n                        errorType: errorType,\n                        errorCode: errorCode\n                      });\n                    }\n                  };\n                  var gqlInit = {\n                    type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                  };\n                  _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                  var checkAckOk_1 = function (ackOk) {\n                    if (!ackOk) {\n                      _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                      rej(new Error(\"Connection timeout: ack from AWSAppSyncRealTime was not received after \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                    }\n                  };\n                  setTimeout(function () {\n                    return checkAckOk_1(ackOk_1);\n                  }, CONNECTION_INIT_TIMEOUT);\n                }\n              });\n            }()];\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            err_4 = _b.sent();\n            _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n      payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      apiKey = _a.apiKey,\n      region = _a.region,\n      additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            if (!(!authenticationType || !headerHandler[authenticationType])) return [3 /*break*/, 1];\n            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n            return [2 /*return*/, undefined];\n          case 1:\n            handler = headerHandler[authenticationType];\n            host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n            logger.debug(\"Authenticating with \" + authenticationType);\n            return [4 /*yield*/, handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n          case 2:\n            result = _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Auth.currentSession()];\n          case 1:\n            session = _b.sent();\n            return [2 /*return*/, {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3 /*break*/, 2];\n            token = federatedInfo.token;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _b.sent();\n            if (currentUser) {\n              token = currentUser.token;\n            }\n            _b.label = 4;\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n            return [2 /*return*/, {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n      host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2 /*return*/, {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              var _a = credentials,\n                secretAccessKey = _a.secretAccessKey,\n                accessKeyId = _a.accessKeyId,\n                sessionToken = _a.sessionToken;\n              return {\n                secret_key: secretAccessKey,\n                access_key: accessKeyId,\n                session_token: sessionToken\n              };\n            })];\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2 /*return*/, signed_params.headers];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n      additionalHeaders = _a.additionalHeaders;\n    if (!additionalHeaders || !additionalHeaders['Authorization']) {\n      throw new Error('No auth token specified');\n    }\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"names":["Observable","GraphQLError","url","v4","uuid","Buffer","Logger","Credentials","Signer","Hub","USER_AGENT_HEADER","jitteredExponentialRetry","NonRetryableError","isNonRetryableError","getAmplifyUserAgent","Cache","Auth","AbstractPubSubProvider","CONTROL_MSG","ConnectionState","AMPLIFY_SYMBOL","AWS_APPSYNC_REALTIME_HEADERS","CONNECTION_INIT_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT","MAX_DELAY_MS","MESSAGE_TYPES","NON_RETRYABLE_CODES","SOCKET_STATUS","START_ACK_TIMEOUT","SUBSCRIPTION_STATUS","CONNECTION_STATE_CHANGE","ConnectionStateMonitor","CONNECTION_CHANGE","ReconnectEvent","ReconnectionMonitor","logger","dispatchApiEvent","event","data","message","dispatch","base64urlEncode","str","base64Str","from","toString","base64UrlStr","replace","standardDomainPattern","customDomainPath","AWSAppSyncRealTimeProvider","_super","__extends","options","_this","call","socketStatus","CLOSED","keepAliveTimeout","subscriptionObserverMap","Map","promiseArray","connectionStateMonitor","reconnectionMonitor","connectionStateMonitorSubscription","connectionStateObservable","subscribe","connectionState","provider","ConnectionDisrupted","record","START_RECONNECT","Connected","ConnectedPendingDisconnect","ConnectedPendingKeepAlive","ConnectedPendingNetwork","ConnectionDisruptedPendingNetwork","Disconnected","includes","HALT_RECONNECT","prototype","close","CONNECTION_FAILED","unsubscribe","getNewWebSocket","protocol","WebSocket","getProviderName","newClient","Error","publish","_topics","_msg","_options","isCustomDomain","match","customUserAgentDetails","appSyncGraphqlEndpoint","observer","error","errors","complete","subscriptionStartActive_1","subscriptionId_1","startSubscription_1","startSubscriptionPromise","_startSubscriptionWithAWSAppSyncRealTime","subscriptionId","catch","err","debug","REALTIME_SUBSCRIPTION_INIT_ERROR","finally","reconnectSubscription_1","addObserver","__awaiter","_waitForSubscriptionToBeConnected","_a","sent","subscriptionState","get","CONNECTED","_sendUnsubscriptionMessage","err_1","_removeSubscriptionObserver","Object","defineProperty","authenticationType","query","variables","apiKey","region","_c","graphql_headers","_d","additionalHeaders","PENDING","set","startAckTimeoutId","undefined","dataString","JSON","stringify","_awsRealTimeHeaderBasedAuth","payload","canonicalUri","_j","headerObj","__assign","apply","_f","concat","_h","subscriptionMessage","id","extensions","authorization","type","GQL_START","stringToAWSRealTime","OPENING_CONNECTION","_initializeWebSocketConnection","_logStartSubscriptionError","err_2","_g","_b","subscriptionFailedCallback","subscriptionReadyCallback","setTimeout","_timeoutStartSubscriptionAck","awsRealTimeSocket","send","String","Promise","resolve","subscriptionObserver","res","rej","readyState","OPEN","READY","unsubscribeMessage","GQL_STOP","delete","_closeSocketIfRequired","bind","size","CLOSING_CONNECTION","bufferedAmount","keepAliveTimeoutId","clearTimeout","keepAliveAlertTimeoutId","tempSocket","onclose","onerror","_handleIncomingSubscriptionMessage","parse","_e","GQL_DATA","next","GQL_START_ACK","SUBSCRIPTION_ACK","CONNECTION_ESTABLISHED","GQL_CONNECTION_KEEP_ALIVE","_errorDisconnect","TIMEOUT_DISCONNECT","KEEP_ALIVE_MISSED","KEEP_ALIVE","GQL_ERROR","FAILED","msg","push","CONNECTING","payloadString","authHeader","headerString","headerQs","discoverableEndpoint","isSSLEnabled","awsRealTimeUrl","authTokenSubprotocol","_initializeRetryableHandshake","forEach","err_3","subprotocol","_initializeHandshake","newSocket","onopen","ackOk_1","reason","onmessage","connectionTimeoutMs","GQL_CONNECTION_ACK","CONNECTION_CLOSED","GQL_CONNECTION_ERROR","__read","errorType","errorCode","gqlInit","GQL_CONNECTION_INIT","checkAckOk_1","ackOk","err_4","headerHandler","API_KEY","_awsRealTimeApiKeyHeader","AWS_IAM","_awsRealTimeIAMHeader","OPENID_CONNECT","_awsRealTimeOPENIDHeader","AMAZON_COGNITO_USER_POOLS","_awsRealTimeCUPHeader","AWS_LAMBDA","_customAuthHeader","handler","host","result","currentSession","session","Authorization","getAccessToken","getJwtToken","getItem","federatedInfo","token","currentAuthenticatedUser","currentUser","dt","Date","dtStr","toISOString","endpointInfo","service","_ensureCredentials","credentialsOK","then","credentials","secretAccessKey","accessKeyId","sessionToken","secret_key","access_key","session_token","creds","request","method","headers","signed_params","sign","cred","shear","warn"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-amplify\\pubsub\\src\\Providers\\AWSAppSyncRealTimeProvider\\index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { ProviderOptions } from '../../types/Provider';\nimport {\n\tLogger,\n\tCredentials,\n\tSigner,\n\tHub,\n\tConstants,\n\tUSER_AGENT_HEADER,\n\tjitteredExponentialRetry,\n\tNonRetryableError,\n\tICredentials,\n\tisNonRetryableError,\n\tCustomUserAgentDetails,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { Cache } from '@aws-amplify/cache';\nimport { Auth, GRAPHQL_AUTH_MODE } from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport {\n\tCONTROL_MSG,\n\tConnectionState,\n\tPubSubContent,\n\tPubSubContentObserver,\n} from '../../types/PubSub';\n\nimport {\n\tAMPLIFY_SYMBOL,\n\tAWS_APPSYNC_REALTIME_HEADERS,\n\tCONNECTION_INIT_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_ALERT_TIMEOUT,\n\tMAX_DELAY_MS,\n\tMESSAGE_TYPES,\n\tNON_RETRYABLE_CODES,\n\tSOCKET_STATUS,\n\tSTART_ACK_TIMEOUT,\n\tSUBSCRIPTION_STATUS,\n\tCONNECTION_STATE_CHANGE,\n} from '../constants';\nimport {\n\tConnectionStateMonitor,\n\tCONNECTION_CHANGE,\n} from '../../utils/ConnectionStateMonitor';\nimport {\n\tReconnectEvent,\n\tReconnectionMonitor,\n} from '../../utils/ReconnectionMonitor';\n\nconst logger = new Logger('AWSAppSyncRealTimeProvider');\n\nconst dispatchApiEvent = (\n\tevent: string,\n\tdata: Record<string, unknown>,\n\tmessage: string\n) => {\n\tHub.dispatch('api', { event, data, message }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\n/**\n * @returns base64url-encoded string - https://datatracker.ietf.org/doc/html/rfc4648#section-5\n */\nconst base64urlEncode = (str: string): string => {\n\tconst base64Str = Buffer.from(str).toString('base64');\n\n\tconst base64UrlStr = base64Str\n\t\t.replace(/\\+/g, '-')\n\t\t.replace(/\\//g, '_')\n\t\t.replace(/=/g, '');\n\n\treturn base64UrlStr;\n};\n\nexport type ObserverQuery = {\n\tobserver: PubSubContentObserver;\n\tquery: string;\n\tvariables: Record<string, unknown>;\n\tsubscriptionState: SUBSCRIPTION_STATUS;\n\tsubscriptionReadyCallback?: Function;\n\tsubscriptionFailedCallback?: Function;\n\tstartAckTimeoutId?: ReturnType<typeof setTimeout>;\n};\n\nconst standardDomainPattern =\n\t/^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com(?:\\.cn)?\\/graphql$/i;\n\nconst customDomainPath = '/realtime';\n\ntype GraphqlAuthModes = keyof typeof GRAPHQL_AUTH_MODE;\n\ntype DataObject = {\n\tdata: Record<string, unknown>;\n};\n\ntype DataPayload = {\n\tid: string;\n\tpayload: DataObject;\n\ttype: string;\n};\n\ntype ParsedMessagePayload = {\n\ttype: string;\n\tpayload: {\n\t\tconnectionTimeoutMs: number;\n\t\terrors?: [{ errorType: string; errorCode: number }];\n\t};\n};\n\nexport interface AWSAppSyncRealTimeProviderOptions extends ProviderOptions {\n\tappSyncGraphqlEndpoint?: string;\n\tauthenticationType?: GraphqlAuthModes;\n\tquery?: string;\n\tvariables?: Record<string, unknown>;\n\tapiKey?: string;\n\tregion?: string;\n\tgraphql_headers?: () => {} | (() => Promise<{}>);\n\tadditionalHeaders?: { [key: string]: string };\n}\n\ntype AWSAppSyncRealTimeAuthInput =\n\tPartial<AWSAppSyncRealTimeProviderOptions> & {\n\t\tcanonicalUri: string;\n\t\tpayload: string;\n\t\thost?: string | undefined;\n\t};\n\nexport class AWSAppSyncRealTimeProvider extends AbstractPubSubProvider<AWSAppSyncRealTimeProviderOptions> {\n\tprivate awsRealTimeSocket?: WebSocket;\n\tprivate socketStatus: SOCKET_STATUS = SOCKET_STATUS.CLOSED;\n\tprivate keepAliveTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n\tprivate keepAliveAlertTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate subscriptionObserverMap: Map<string, ObserverQuery> = new Map();\n\tprivate promiseArray: Array<{ res: Function; rej: Function }> = [];\n\tprivate connectionState: ConnectionState;\n\tprivate readonly connectionStateMonitor = new ConnectionStateMonitor();\n\tprivate readonly reconnectionMonitor = new ReconnectionMonitor();\n\tprivate connectionStateMonitorSubscription: ZenObservable.Subscription;\n\n\tconstructor(options: ProviderOptions = {}) {\n\t\tsuper(options);\n\t\t// Monitor the connection state and pass changes along to Hub\n\t\tthis.connectionStateMonitorSubscription =\n\t\t\tthis.connectionStateMonitor.connectionStateObservable.subscribe(\n\t\t\t\tconnectionState => {\n\t\t\t\t\tdispatchApiEvent(\n\t\t\t\t\t\tCONNECTION_STATE_CHANGE,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprovider: this,\n\t\t\t\t\t\t\tconnectionState,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t`Connection state is ${connectionState}`\n\t\t\t\t\t);\n\t\t\t\t\tthis.connectionState = connectionState;\n\n\t\t\t\t\t// Trigger START_RECONNECT when the connection is disrupted\n\t\t\t\t\tif (connectionState === ConnectionState.ConnectionDisrupted) {\n\t\t\t\t\t\tthis.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Trigger HALT_RECONNECT to halt reconnection attempts when the state is anything other than\n\t\t\t\t\t//   ConnectionDisrupted or Connecting\n\t\t\t\t\tif (\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tConnectionState.Connected,\n\t\t\t\t\t\t\tConnectionState.ConnectedPendingDisconnect,\n\t\t\t\t\t\t\tConnectionState.ConnectedPendingKeepAlive,\n\t\t\t\t\t\t\tConnectionState.ConnectedPendingNetwork,\n\t\t\t\t\t\t\tConnectionState.ConnectionDisruptedPendingNetwork,\n\t\t\t\t\t\t\tConnectionState.Disconnected,\n\t\t\t\t\t\t].includes(connectionState)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t}\n\n\t/**\n\t * Mark the socket closed and release all active listeners\n\t */\n\tclose() {\n\t\t// Mark the socket closed both in status and the connection monitor\n\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n\n\t\t// Turn off the subscription monitor Hub publishing\n\t\tthis.connectionStateMonitorSubscription.unsubscribe();\n\t\t// Complete all reconnect observers\n\t\tthis.reconnectionMonitor.close();\n\t}\n\n\tgetNewWebSocket(url: string, protocol: string[]) {\n\t\treturn new WebSocket(url, protocol);\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSAppSyncRealTimeProvider';\n\t}\n\n\tnewClient(): Promise<any> {\n\t\tthrow new Error('Not used here');\n\t}\n\n\tpublic async publish(\n\t\t_topics: string[] | string,\n\t\t_msg: PubSubContent,\n\t\t_options?: AWSAppSyncRealTimeProviderOptions\n\t) {\n\t\tthrow new Error('Operation not supported');\n\t}\n\n\t// Check if url matches standard domain pattern\n\tprivate isCustomDomain(url: string): boolean {\n\t\treturn url.match(standardDomainPattern) === null;\n\t}\n\n\tsubscribe(\n\t\t_topics: string[] | string,\n\t\toptions?: AWSAppSyncRealTimeProviderOptions,\n\t\tcustomUserAgentDetails?: CustomUserAgentDetails\n\t): Observable<Record<string, unknown>> {\n\t\tconst appSyncGraphqlEndpoint = options?.appSyncGraphqlEndpoint;\n\n\t\treturn new Observable(observer => {\n\t\t\tif (!options || !appSyncGraphqlEndpoint) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`Subscribe only available for AWS AppSync endpoint`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tobserver.complete();\n\t\t\t} else {\n\t\t\t\tlet subscriptionStartActive = false;\n\t\t\t\tconst subscriptionId = uuid();\n\t\t\t\tconst startSubscription = () => {\n\t\t\t\t\tif (!subscriptionStartActive) {\n\t\t\t\t\t\tsubscriptionStartActive = true;\n\n\t\t\t\t\t\tconst startSubscriptionPromise =\n\t\t\t\t\t\t\tthis._startSubscriptionWithAWSAppSyncRealTime({\n\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\tobserver,\n\t\t\t\t\t\t\t\tsubscriptionId,\n\t\t\t\t\t\t\t\tcustomUserAgentDetails,\n\t\t\t\t\t\t\t}).catch<any>(err => {\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`${CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR}: ${err}`\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tstartSubscriptionPromise.finally(() => {\n\t\t\t\t\t\t\tsubscriptionStartActive = false;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tlet reconnectSubscription: ZenObservable.Subscription;\n\n\t\t\t\t// Add an observable to the reconnection list to manage reconnection for this subscription\n\t\t\t\treconnectSubscription = new Observable(observer => {\n\t\t\t\t\tthis.reconnectionMonitor.addObserver(observer);\n\t\t\t\t}).subscribe(() => {\n\t\t\t\t\tstartSubscription();\n\t\t\t\t});\n\n\t\t\t\tstartSubscription();\n\n\t\t\t\treturn async () => {\n\t\t\t\t\t// Cleanup reconnection subscription\n\t\t\t\t\treconnectSubscription?.unsubscribe();\n\n\t\t\t\t\t// Cleanup after unsubscribing or observer.complete was called after _startSubscriptionWithAWSAppSyncRealTime\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Waiting that subscription has been connected before trying to unsubscribe\n\t\t\t\t\t\tawait this._waitForSubscriptionToBeConnected(subscriptionId);\n\n\t\t\t\t\t\tconst { subscriptionState } =\n\t\t\t\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t\t\t\tif (!subscriptionState) {\n\t\t\t\t\t\t\t// subscription already unsubscribed\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n\t\t\t\t\t\t\tthis._sendUnsubscriptionMessage(subscriptionId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error('Subscription never connected');\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tlogger.debug(`Error while unsubscribing ${err}`);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._removeSubscriptionObserver(subscriptionId);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options[\n\t\t\t'aws_appsync_dangerously_connect_to_http_endpoint_for_testing'\n\t\t];\n\t}\n\n\tprivate async _startSubscriptionWithAWSAppSyncRealTime({\n\t\toptions,\n\t\tobserver,\n\t\tsubscriptionId,\n\t\tcustomUserAgentDetails,\n\t}: {\n\t\toptions: AWSAppSyncRealTimeProviderOptions;\n\t\tobserver: PubSubContentObserver;\n\t\tsubscriptionId: string;\n\t\tcustomUserAgentDetails: CustomUserAgentDetails;\n\t}) {\n\t\tconst {\n\t\t\tappSyncGraphqlEndpoint,\n\t\t\tauthenticationType,\n\t\t\tquery,\n\t\t\tvariables,\n\t\t\tapiKey,\n\t\t\tregion,\n\t\t\tgraphql_headers = () => ({}),\n\t\t\tadditionalHeaders = {},\n\t\t} = options;\n\n\t\tconst subscriptionState: SUBSCRIPTION_STATUS = SUBSCRIPTION_STATUS.PENDING;\n\t\tconst data = {\n\t\t\tquery,\n\t\t\tvariables,\n\t\t};\n\t\t// Having a subscription id map will make it simple to forward messages received\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionState,\n\t\t\tstartAckTimeoutId: undefined,\n\t\t});\n\n\t\t// Preparing payload for subscription message\n\n\t\tconst dataString = JSON.stringify(data);\n\t\tconst headerObj = {\n\t\t\t...(await this._awsRealTimeHeaderBasedAuth({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tpayload: dataString,\n\t\t\t\tcanonicalUri: '',\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t})),\n\t\t\t...(await graphql_headers()),\n\t\t\t...additionalHeaders,\n\t\t\t[USER_AGENT_HEADER]: getAmplifyUserAgent(customUserAgentDetails),\n\t\t};\n\n\t\tconst subscriptionMessage = {\n\t\t\tid: subscriptionId,\n\t\t\tpayload: {\n\t\t\t\tdata: dataString,\n\t\t\t\textensions: {\n\t\t\t\t\tauthorization: {\n\t\t\t\t\t\t...headerObj,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: MESSAGE_TYPES.GQL_START,\n\t\t};\n\n\t\tconst stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n\n\t\ttry {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n\t\t\tawait this._initializeWebSocketConnection({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tthis._logStartSubscriptionError(subscriptionId, observer, err);\n\t\t\treturn;\n\t\t}\n\n\t\t// Potential race condition can occur when unsubscribe is called during _initializeWebSocketConnection.\n\t\t// E.g.unsubscribe gets invoked prior to finishing WebSocket handshake or START_ACK.\n\t\t// Both subscriptionFailedCallback and subscriptionReadyCallback are used to synchronized this.\n\n\t\tconst { subscriptionFailedCallback, subscriptionReadyCallback } =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId) ?? {};\n\n\t\t// This must be done before sending the message in order to be listening immediately\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tsubscriptionState,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t\tstartAckTimeoutId: setTimeout(() => {\n\t\t\t\tthis._timeoutStartSubscriptionAck.call(this, subscriptionId);\n\t\t\t}, START_ACK_TIMEOUT),\n\t\t});\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t}\n\t}\n\n\t// Log logic for start subscription failures\n\tprivate _logStartSubscriptionError(\n\t\tsubscriptionId: string,\n\t\tobserver: PubSubContentObserver,\n\t\terr: { message?: string }\n\t) {\n\t\tlogger.debug({ err });\n\t\tconst message = String(err.message ?? '');\n\t\t// Resolving to give the state observer time to propogate the update\n\t\tPromise.resolve(\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED)\n\t\t);\n\n\t\t// Capture the error only when the network didn't cause disruption\n\t\tif (\n\t\t\tthis.connectionState !== ConnectionState.ConnectionDisruptedPendingNetwork\n\t\t) {\n\t\t\t// When the error is non-retriable, error out the observable\n\t\t\tif (isNonRetryableError(err)) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.debug(`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`);\n\t\t\t}\n\n\t\t\tconst { subscriptionFailedCallback } =\n\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t// Notify concurrent unsubscription\n\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\tsubscriptionFailedCallback();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Waiting that subscription has been connected before trying to unsubscribe\n\tprivate async _waitForSubscriptionToBeConnected(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { subscriptionState } = subscriptionObserver;\n\t\t\t// This in case unsubscribe is invoked before sending start subscription message\n\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tconst { observer, subscriptionState, variables, query } =\n\t\t\t\t\t\tsubscriptionObserver;\n\t\t\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\t\t\tobserver,\n\t\t\t\t\t\tsubscriptionState,\n\t\t\t\t\t\tvariables,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tsubscriptionReadyCallback: res,\n\t\t\t\t\t\tsubscriptionFailedCallback: rej,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _sendUnsubscriptionMessage(subscriptionId: string) {\n\t\ttry {\n\t\t\tif (\n\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n\t\t\t\tthis.socketStatus === SOCKET_STATUS.READY\n\t\t\t) {\n\t\t\t\t// Preparing unsubscribe message to stop receiving messages for that subscription\n\t\t\t\tconst unsubscribeMessage = {\n\t\t\t\t\tid: subscriptionId,\n\t\t\t\t\ttype: MESSAGE_TYPES.GQL_STOP,\n\t\t\t\t};\n\t\t\t\tconst stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n\t\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n\t\t\tlogger.debug({ err });\n\t\t}\n\t}\n\n\tprivate _removeSubscriptionObserver(subscriptionId: string) {\n\t\tthis.subscriptionObserverMap.delete(subscriptionId);\n\n\t\t// Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t}\n\n\tprivate _closeSocketIfRequired() {\n\t\tif (this.subscriptionObserverMap.size > 0) {\n\t\t\t// Active subscriptions on the WebSocket\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.awsRealTimeSocket) {\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n\t\tif (this.awsRealTimeSocket.bufferedAmount > 0) {\n\t\t\t// Still data on the WebSocket\n\t\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t\t} else {\n\t\t\tlogger.debug('closing WebSocket...');\n\t\t\tif (this.keepAliveTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveTimeoutId);\n\t\t\t}\n\t\t\tif (this.keepAliveAlertTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\t}\n\t\t\tconst tempSocket = this.awsRealTimeSocket;\n\t\t\t// Cleaning callbacks to avoid race condition, socket still exists\n\t\t\ttempSocket.onclose = null;\n\t\t\ttempSocket.onerror = null;\n\t\t\ttempSocket.close(1000);\n\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t}\n\t}\n\n\tprivate _handleIncomingSubscriptionMessage(message: MessageEvent) {\n\t\tif (typeof message.data !== 'string') {\n\t\t\treturn;\n\t\t}\n\t\tlogger.debug(\n\t\t\t`subscription message from AWS AppSync RealTime: ${message.data}`\n\t\t);\n\t\tconst {\n\t\t\tid = '',\n\t\t\tpayload,\n\t\t\ttype,\n\t\t}: DataPayload = JSON.parse(String(message.data));\n\t\tconst {\n\t\t\tobserver = null,\n\t\t\tquery = '',\n\t\t\tvariables = {},\n\t\t\tstartAckTimeoutId,\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t} = this.subscriptionObserverMap.get(id) || {};\n\n\t\tlogger.debug({ id, observer, query, variables });\n\n\t\tif (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n\t\t\tif (observer) {\n\t\t\t\tobserver.next(payload);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`observer not found for id: ${id}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_START_ACK) {\n\t\t\tlogger.debug(\n\t\t\t\t`subscription ready for ${JSON.stringify({ query, variables })}`\n\t\t\t);\n\t\t\tif (typeof subscriptionReadyCallback === 'function') {\n\t\t\t\tsubscriptionReadyCallback();\n\t\t\t}\n\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\t\t\tdispatchApiEvent(\n\t\t\t\tCONTROL_MSG.SUBSCRIPTION_ACK,\n\t\t\t\t{ query, variables },\n\t\t\t\t'Connection established for subscription'\n\t\t\t);\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId: undefined,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\tCONNECTION_CHANGE.CONNECTION_ESTABLISHED\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n\t\t\tif (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n\t\t\tif (this.keepAliveAlertTimeoutId)\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\tthis.keepAliveTimeoutId = setTimeout(\n\t\t\t\t() => this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT),\n\t\t\t\tthis.keepAliveTimeout\n\t\t\t);\n\t\t\tthis.keepAliveAlertTimeoutId = setTimeout(() => {\n\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n\t\t\t}, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_ERROR) {\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t});\n\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`\n\t\t\t\t);\n\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\n\t\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\n\t\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\t\tsubscriptionFailedCallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _errorDisconnect(msg: string) {\n\t\tlogger.debug(`Disconnect error: ${msg}`);\n\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tthis.awsRealTimeSocket.close();\n\t\t}\n\n\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t}\n\n\tprivate _timeoutStartSubscriptionAck(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { observer, query, variables } = subscriptionObserver;\n\t\t\tif (!observer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\tobserver,\n\t\t\t\tquery,\n\t\t\t\tvariables,\n\t\t\t\tsubscriptionState: SUBSCRIPTION_STATUS.FAILED,\n\t\t\t});\n\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tlogger.debug(\n\t\t\t\t'timeoutStartSubscription',\n\t\t\t\tJSON.stringify({ query, variables })\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _initializeWebSocketConnection({\n\t\tappSyncGraphqlEndpoint,\n\t\tauthenticationType,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeProviderOptions) {\n\t\tif (this.socketStatus === SOCKET_STATUS.READY) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tthis.promiseArray.push({ res, rej });\n\n\t\t\tif (this.socketStatus === SOCKET_STATUS.CLOSED) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CONNECTING;\n\n\t\t\t\t\tconst payloadString = '{}';\n\n\t\t\t\t\tconst authHeader = await this._awsRealTimeHeaderBasedAuth({\n\t\t\t\t\t\tauthenticationType,\n\t\t\t\t\t\tpayload: payloadString,\n\t\t\t\t\t\tcanonicalUri: '/connect',\n\t\t\t\t\t\tapiKey,\n\t\t\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\t\t\tregion,\n\t\t\t\t\t\tadditionalHeaders,\n\t\t\t\t\t});\n\n\t\t\t\t\tconst headerString = authHeader ? JSON.stringify(authHeader) : '';\n\t\t\t\t\tconst headerQs = base64urlEncode(headerString);\n\n\t\t\t\t\tlet discoverableEndpoint = appSyncGraphqlEndpoint ?? '';\n\n\t\t\t\t\tif (this.isCustomDomain(discoverableEndpoint)) {\n\t\t\t\t\t\tdiscoverableEndpoint =\n\t\t\t\t\t\t\tdiscoverableEndpoint.concat(customDomainPath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t\t.replace('appsync-api', 'appsync-realtime-api')\n\t\t\t\t\t\t\t.replace('gogi-beta', 'grt-beta');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Creating websocket url with required query strings\n\t\t\t\t\tconst protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t.replace('https://', protocol)\n\t\t\t\t\t\t.replace('http://', protocol);\n\n\t\t\t\t\tconst awsRealTimeUrl = discoverableEndpoint;\n\t\t\t\t\tconst authTokenSubprotocol = `header-${headerQs}`;\n\n\t\t\t\t\tawait this._initializeRetryableHandshake(\n\t\t\t\t\t\tawsRealTimeUrl,\n\t\t\t\t\t\tauthTokenSubprotocol\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.promiseArray.forEach(({ res }) => {\n\t\t\t\t\t\tlogger.debug('Notifying connection successful');\n\t\t\t\t\t\tres();\n\t\t\t\t\t});\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.READY;\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('Connection exited with', err);\n\t\t\t\t\tthis.promiseArray.forEach(({ rej }) => rej(err));\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.awsRealTimeSocket.close(3001);\n\t\t\t\t\t}\n\t\t\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _initializeRetryableHandshake(\n\t\tawsRealTimeUrl: string,\n\t\tsubprotocol: string\n\t) {\n\t\tlogger.debug(`Initializaling retryable Handshake`);\n\t\tawait jitteredExponentialRetry(\n\t\t\tthis._initializeHandshake.bind(this),\n\t\t\t[awsRealTimeUrl, subprotocol],\n\t\t\tMAX_DELAY_MS\n\t\t);\n\t}\n\n\tprivate async _initializeHandshake(\n\t\tawsRealTimeUrl: string,\n\t\tsubprotocol: string\n\t) {\n\t\tlogger.debug(`Initializing handshake ${awsRealTimeUrl}`);\n\t\t// Because connecting the socket is async, is waiting until connection is open\n\t\t// Step 1: connect websocket\n\t\ttry {\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise<void>((res, rej) => {\n\t\t\t\t\tconst newSocket = this.getNewWebSocket(awsRealTimeUrl, [\n\t\t\t\t\t\t'graphql-ws',\n\t\t\t\t\t\tsubprotocol,\n\t\t\t\t\t]);\n\t\t\t\t\tnewSocket.onerror = () => {\n\t\t\t\t\t\tlogger.debug(`WebSocket connection error`);\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onclose = () => {\n\t\t\t\t\t\trej(new Error('Connection handshake error'));\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onopen = () => {\n\t\t\t\t\t\tthis.awsRealTimeSocket = newSocket;\n\t\t\t\t\t\treturn res();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})();\n\t\t\t// Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\tlet ackOk = false;\n\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = error => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket error ${JSON.stringify(error)}`);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\trej(new Error(JSON.stringify(event)));\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage = (message: MessageEvent) => {\n\t\t\t\t\t\t\tif (typeof message.data !== 'string') {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t`subscription message from AWS AppSyncRealTime: ${message.data} `\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst data = JSON.parse(message.data) as ParsedMessagePayload;\n\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\tconnectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT,\n\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t} = data;\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n\t\t\t\t\t\t\t\tackOk = true;\n\t\t\t\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\t\t\t\tthis.keepAliveTimeout = connectionTimeoutMs;\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage =\n\t\t\t\t\t\t\t\t\t\tthis._handleIncomingSubscriptionMessage.bind(this);\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = err => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tres('Cool, connected to AWS AppSyncRealTime');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\terrors: [{ errorType = '', errorCode = 0 } = {}] = [],\n\t\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t\t} = data;\n\n\t\t\t\t\t\t\t\trej({ errorType, errorCode });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst gqlInit = {\n\t\t\t\t\t\t\ttype: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n\t\t\t\t\t\tconst checkAckOk = (ackOk: boolean) => {\n\t\t\t\t\t\t\tif (!ackOk) {\n\t\t\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\t\t\tCONNECTION_CHANGE.CONNECTION_FAILED\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t`Connection timeout: ack from AWSAppSyncRealTime was not received after ${CONNECTION_INIT_TIMEOUT} ms`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tsetTimeout(() => checkAckOk(ackOk), CONNECTION_INIT_TIMEOUT);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})();\n\t\t} catch (err) {\n\t\t\tconst { errorType, errorCode } = err as {\n\t\t\t\terrorType: string;\n\t\t\t\terrorCode: number;\n\t\t\t};\n\n\t\t\tif (NON_RETRYABLE_CODES.includes(errorCode)) {\n\t\t\t\tthrow new NonRetryableError(errorType);\n\t\t\t} else if (errorType) {\n\t\t\t\tthrow new Error(errorType);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeHeaderBasedAuth({\n\t\tauthenticationType,\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeAuthInput): Promise<\n\t\tRecord<string, unknown> | undefined\n\t> {\n\t\tconst headerHandler: {\n\t\t\t[key in GraphqlAuthModes]: (AWSAppSyncRealTimeAuthInput) => {};\n\t\t} = {\n\t\t\tAPI_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n\t\t\tAWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n\t\t\tOPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n\t\t\tAMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n\t\t\tAWS_LAMBDA: this._customAuthHeader,\n\t\t};\n\n\t\tif (!authenticationType || !headerHandler[authenticationType]) {\n\t\t\tlogger.debug(`Authentication type ${authenticationType} not supported`);\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\tconst handler = headerHandler[authenticationType];\n\n\t\t\tconst { host } = url.parse(appSyncGraphqlEndpoint ?? '');\n\n\t\t\tlogger.debug(`Authenticating with ${authenticationType}`);\n\n\t\t\tconst result = await handler({\n\t\t\t\tpayload,\n\t\t\t\tcanonicalUri,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tapiKey,\n\t\t\t\tregion,\n\t\t\t\thost,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeCUPHeader({ host }: AWSAppSyncRealTimeAuthInput) {\n\t\tconst session = await Auth.currentSession();\n\t\treturn {\n\t\t\tAuthorization: session.getAccessToken().getJwtToken(),\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeOPENIDHeader({\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tlet token;\n\t\t// backwards compatibility\n\t\tconst federatedInfo = await Cache.getItem('federatedInfo');\n\t\tif (federatedInfo) {\n\t\t\ttoken = federatedInfo.token;\n\t\t} else {\n\t\t\tconst currentUser = await Auth.currentAuthenticatedUser();\n\t\t\tif (currentUser) {\n\t\t\t\ttoken = currentUser.token;\n\t\t\t}\n\t\t}\n\t\tif (!token) {\n\t\t\tthrow new Error('No federated jwt');\n\t\t}\n\t\treturn {\n\t\t\tAuthorization: token,\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeApiKeyHeader({\n\t\tapiKey,\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst dt = new Date();\n\t\tconst dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n\n\t\treturn {\n\t\t\thost,\n\t\t\t'x-amz-date': dtStr,\n\t\t\t'x-api-key': apiKey,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeIAMHeader({\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tregion,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst endpointInfo = {\n\t\t\tregion,\n\t\t\tservice: 'appsync',\n\t\t};\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\t\tconst creds = await Credentials.get().then((credentials: any) => {\n\t\t\tconst { secretAccessKey, accessKeyId, sessionToken } =\n\t\t\t\tcredentials as ICredentials;\n\n\t\t\treturn {\n\t\t\t\tsecret_key: secretAccessKey,\n\t\t\t\taccess_key: accessKeyId,\n\t\t\t\tsession_token: sessionToken,\n\t\t\t};\n\t\t});\n\n\t\tconst request = {\n\t\t\turl: `${appSyncGraphqlEndpoint}${canonicalUri}`,\n\t\t\tdata: payload,\n\t\t\tmethod: 'POST',\n\t\t\theaders: { ...AWS_APPSYNC_REALTIME_HEADERS },\n\t\t};\n\n\t\tconst signed_params = Signer.sign(request, creds, endpointInfo);\n\t\treturn signed_params.headers;\n\t}\n\n\tprivate _customAuthHeader({\n\t\thost,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tif (!additionalHeaders || !additionalHeaders['Authorization']) {\n\t\t\tthrow new Error('No auth token specified');\n\t\t}\n\n\t\treturn {\n\t\t\tAuthorization: additionalHeaders.Authorization,\n\t\t\thost,\n\t\t};\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_ensureCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then((credentials: any) => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch((err: any) => {\n\t\t\t\tlogger.warn('ensure credentials error', err);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}