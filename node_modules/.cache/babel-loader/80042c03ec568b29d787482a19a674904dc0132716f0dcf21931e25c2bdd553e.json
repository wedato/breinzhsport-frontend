{"ast":null,"code":"import isEqual from 'fast-deep-equal';\nimport normalize from '@mapbox/geojson-normalize';\nimport { generateID } from './lib/id.js';\nimport featuresAt from './lib/features_at.js';\nimport stringSetsAreEqual from './lib/string_sets_are_equal.js';\nimport * as Constants from './constants.js';\nimport StringSet from './lib/string_set.js';\nimport Polygon from './feature_types/polygon.js';\nimport LineString from './feature_types/line_string.js';\nimport Point from './feature_types/point.js';\nimport MultiFeature from './feature_types/multi_feature.js';\nconst featureTypes = {\n  Polygon,\n  LineString,\n  Point,\n  MultiPolygon: MultiFeature,\n  MultiLineString: MultiFeature,\n  MultiPoint: MultiFeature\n};\nexport default function (ctx, api) {\n  api.modes = Constants.modes;\n\n  // API doesn't emit events by default\n  const silent = ctx.options.suppressAPIEvents !== undefined ? !!ctx.options.suppressAPIEvents : true;\n  api.getFeatureIdsAt = function (point) {\n    const features = featuresAt.click({\n      point\n    }, null, ctx);\n    return features.map(feature => feature.properties.id);\n  };\n  api.getSelectedIds = function () {\n    return ctx.store.getSelectedIds();\n  };\n  api.getSelected = function () {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getSelectedIds().map(id => ctx.store.get(id)).map(feature => feature.toGeoJSON())\n    };\n  };\n  api.getSelectedPoints = function () {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getSelectedCoordinates().map(coordinate => ({\n        type: Constants.geojsonTypes.FEATURE,\n        properties: {},\n        geometry: {\n          type: Constants.geojsonTypes.POINT,\n          coordinates: coordinate.coordinates\n        }\n      }))\n    };\n  };\n  api.set = function (featureCollection) {\n    if (featureCollection.type === undefined || featureCollection.type !== Constants.geojsonTypes.FEATURE_COLLECTION || !Array.isArray(featureCollection.features)) {\n      throw new Error('Invalid FeatureCollection');\n    }\n    const renderBatch = ctx.store.createRenderBatch();\n    let toDelete = ctx.store.getAllIds().slice();\n    const newIds = api.add(featureCollection);\n    const newIdsLookup = new StringSet(newIds);\n    toDelete = toDelete.filter(id => !newIdsLookup.has(id));\n    if (toDelete.length) {\n      api.delete(toDelete);\n    }\n    renderBatch();\n    return newIds;\n  };\n  api.add = function (geojson) {\n    const featureCollection = JSON.parse(JSON.stringify(normalize(geojson)));\n    const ids = featureCollection.features.map(feature => {\n      feature.id = feature.id || generateID();\n      if (feature.geometry === null) {\n        throw new Error('Invalid geometry: null');\n      }\n      if (ctx.store.get(feature.id) === undefined || ctx.store.get(feature.id).type !== feature.geometry.type) {\n        // If the feature has not yet been created ...\n        const Model = featureTypes[feature.geometry.type];\n        if (Model === undefined) {\n          throw new Error(`Invalid geometry type: ${feature.geometry.type}.`);\n        }\n        const internalFeature = new Model(ctx, feature);\n        ctx.store.add(internalFeature, {\n          silent\n        });\n      } else {\n        // If a feature of that id has already been created, and we are swapping it out ...\n        const internalFeature = ctx.store.get(feature.id);\n        const originalProperties = internalFeature.properties;\n        internalFeature.properties = feature.properties;\n        if (!isEqual(originalProperties, feature.properties)) {\n          ctx.store.featureChanged(internalFeature.id, {\n            silent\n          });\n        }\n        if (!isEqual(internalFeature.getCoordinates(), feature.geometry.coordinates)) {\n          internalFeature.incomingCoords(feature.geometry.coordinates);\n        }\n      }\n      return feature.id;\n    });\n    ctx.store.render();\n    return ids;\n  };\n  api.get = function (id) {\n    const feature = ctx.store.get(id);\n    if (feature) {\n      return feature.toGeoJSON();\n    }\n  };\n  api.getAll = function () {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getAll().map(feature => feature.toGeoJSON())\n    };\n  };\n  api.delete = function (featureIds) {\n    ctx.store.delete(featureIds, {\n      silent\n    });\n    // If we were in direct select mode and our selected feature no longer exists\n    // (because it was deleted), we need to get out of that mode.\n    if (api.getMode() === Constants.modes.DIRECT_SELECT && !ctx.store.getSelectedIds().length) {\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, undefined, {\n        silent\n      });\n    } else {\n      ctx.store.render();\n    }\n    return api;\n  };\n  api.deleteAll = function () {\n    ctx.store.delete(ctx.store.getAllIds(), {\n      silent\n    });\n    // If we were in direct select mode, now our selected feature no longer exists,\n    // so escape that mode.\n    if (api.getMode() === Constants.modes.DIRECT_SELECT) {\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, undefined, {\n        silent\n      });\n    } else {\n      ctx.store.render();\n    }\n    return api;\n  };\n  api.changeMode = function (mode, modeOptions = {}) {\n    // Avoid changing modes just to re-select what's already selected\n    if (mode === Constants.modes.SIMPLE_SELECT && api.getMode() === Constants.modes.SIMPLE_SELECT) {\n      if (stringSetsAreEqual(modeOptions.featureIds || [], ctx.store.getSelectedIds())) return api;\n      // And if we are changing the selection within simple_select mode, just change the selection,\n      // instead of stopping and re-starting the mode\n      ctx.store.setSelected(modeOptions.featureIds, {\n        silent\n      });\n      ctx.store.render();\n      return api;\n    }\n    if (mode === Constants.modes.DIRECT_SELECT && api.getMode() === Constants.modes.DIRECT_SELECT && modeOptions.featureId === ctx.store.getSelectedIds()[0]) {\n      return api;\n    }\n    ctx.events.changeMode(mode, modeOptions, {\n      silent\n    });\n    return api;\n  };\n  api.getMode = function () {\n    return ctx.events.getMode();\n  };\n  api.trash = function () {\n    ctx.events.trash({\n      silent\n    });\n    return api;\n  };\n  api.combineFeatures = function () {\n    ctx.events.combineFeatures({\n      silent\n    });\n    return api;\n  };\n  api.uncombineFeatures = function () {\n    ctx.events.uncombineFeatures({\n      silent\n    });\n    return api;\n  };\n  api.setFeatureProperty = function (featureId, property, value) {\n    ctx.store.setFeatureProperty(featureId, property, value, {\n      silent\n    });\n    return api;\n  };\n  return api;\n}","map":{"version":3,"names":["isEqual","normalize","generateID","featuresAt","stringSetsAreEqual","Constants","StringSet","Polygon","LineString","Point","MultiFeature","featureTypes","MultiPolygon","MultiLineString","MultiPoint","ctx","api","modes","silent","options","suppressAPIEvents","undefined","getFeatureIdsAt","point","features","click","map","feature","properties","id","getSelectedIds","store","getSelected","type","geojsonTypes","FEATURE_COLLECTION","get","toGeoJSON","getSelectedPoints","getSelectedCoordinates","coordinate","FEATURE","geometry","POINT","coordinates","set","featureCollection","Array","isArray","Error","renderBatch","createRenderBatch","toDelete","getAllIds","slice","newIds","add","newIdsLookup","filter","has","length","delete","geojson","JSON","parse","stringify","ids","Model","internalFeature","originalProperties","featureChanged","getCoordinates","incomingCoords","render","getAll","featureIds","getMode","DIRECT_SELECT","events","changeMode","SIMPLE_SELECT","deleteAll","mode","modeOptions","setSelected","featureId","trash","combineFeatures","uncombineFeatures","setFeatureProperty","property","value"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@mapbox/mapbox-gl-draw/src/api.js"],"sourcesContent":["import isEqual from 'fast-deep-equal';\nimport normalize from '@mapbox/geojson-normalize';\nimport {generateID} from './lib/id.js';\nimport featuresAt from './lib/features_at.js';\nimport stringSetsAreEqual from './lib/string_sets_are_equal.js';\nimport * as Constants from './constants.js';\nimport StringSet from './lib/string_set.js';\n\nimport Polygon from './feature_types/polygon.js';\nimport LineString from './feature_types/line_string.js';\nimport Point from './feature_types/point.js';\nimport MultiFeature from './feature_types/multi_feature.js';\n\nconst featureTypes = {\n  Polygon,\n  LineString,\n  Point,\n  MultiPolygon: MultiFeature,\n  MultiLineString: MultiFeature,\n  MultiPoint: MultiFeature\n};\n\nexport default function(ctx, api) {\n  api.modes = Constants.modes;\n\n  // API doesn't emit events by default\n  const silent = ctx.options.suppressAPIEvents !== undefined ? !!ctx.options.suppressAPIEvents : true;\n\n  api.getFeatureIdsAt = function(point) {\n    const features = featuresAt.click({ point }, null, ctx);\n    return features.map(feature => feature.properties.id);\n  };\n\n  api.getSelectedIds = function() {\n    return ctx.store.getSelectedIds();\n  };\n\n  api.getSelected = function() {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getSelectedIds().map(id => ctx.store.get(id)).map(feature => feature.toGeoJSON())\n    };\n  };\n\n  api.getSelectedPoints = function() {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getSelectedCoordinates().map(coordinate => ({\n        type: Constants.geojsonTypes.FEATURE,\n        properties: {},\n        geometry: {\n          type: Constants.geojsonTypes.POINT,\n          coordinates: coordinate.coordinates\n        }\n      }))\n    };\n  };\n\n  api.set = function(featureCollection) {\n    if (featureCollection.type === undefined || featureCollection.type !== Constants.geojsonTypes.FEATURE_COLLECTION || !Array.isArray(featureCollection.features)) {\n      throw new Error('Invalid FeatureCollection');\n    }\n    const renderBatch = ctx.store.createRenderBatch();\n    let toDelete = ctx.store.getAllIds().slice();\n    const newIds = api.add(featureCollection);\n    const newIdsLookup = new StringSet(newIds);\n\n    toDelete = toDelete.filter(id => !newIdsLookup.has(id));\n    if (toDelete.length) {\n      api.delete(toDelete);\n    }\n\n    renderBatch();\n    return newIds;\n  };\n\n  api.add = function(geojson) {\n    const featureCollection = JSON.parse(JSON.stringify(normalize(geojson)));\n\n    const ids = featureCollection.features.map((feature) => {\n      feature.id = feature.id || generateID();\n\n      if (feature.geometry === null) {\n        throw new Error('Invalid geometry: null');\n      }\n\n      if (ctx.store.get(feature.id) === undefined || ctx.store.get(feature.id).type !== feature.geometry.type) {\n        // If the feature has not yet been created ...\n        const Model = featureTypes[feature.geometry.type];\n        if (Model === undefined) {\n          throw new Error(`Invalid geometry type: ${feature.geometry.type}.`);\n        }\n        const internalFeature = new Model(ctx, feature);\n        ctx.store.add(internalFeature, { silent });\n      } else {\n        // If a feature of that id has already been created, and we are swapping it out ...\n        const internalFeature = ctx.store.get(feature.id);\n        const originalProperties = internalFeature.properties;\n        internalFeature.properties = feature.properties;\n        if (!isEqual(originalProperties, feature.properties)) {\n          ctx.store.featureChanged(internalFeature.id, { silent });\n        }\n        if (!isEqual(internalFeature.getCoordinates(), feature.geometry.coordinates)) {\n          internalFeature.incomingCoords(feature.geometry.coordinates);\n        }\n      }\n      return feature.id;\n    });\n\n    ctx.store.render();\n    return ids;\n  };\n\n\n  api.get = function(id) {\n    const feature = ctx.store.get(id);\n    if (feature) {\n      return feature.toGeoJSON();\n    }\n  };\n\n  api.getAll = function() {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getAll().map(feature => feature.toGeoJSON())\n    };\n  };\n\n  api.delete = function(featureIds) {\n    ctx.store.delete(featureIds, { silent });\n    // If we were in direct select mode and our selected feature no longer exists\n    // (because it was deleted), we need to get out of that mode.\n    if (api.getMode() === Constants.modes.DIRECT_SELECT && !ctx.store.getSelectedIds().length) {\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, undefined, { silent });\n    } else {\n      ctx.store.render();\n    }\n\n    return api;\n  };\n\n  api.deleteAll = function() {\n    ctx.store.delete(ctx.store.getAllIds(), { silent });\n    // If we were in direct select mode, now our selected feature no longer exists,\n    // so escape that mode.\n    if (api.getMode() === Constants.modes.DIRECT_SELECT) {\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, undefined, { silent });\n    } else {\n      ctx.store.render();\n    }\n\n    return api;\n  };\n\n  api.changeMode = function(mode, modeOptions = {}) {\n    // Avoid changing modes just to re-select what's already selected\n    if (mode === Constants.modes.SIMPLE_SELECT && api.getMode() === Constants.modes.SIMPLE_SELECT) {\n      if (stringSetsAreEqual((modeOptions.featureIds || []), ctx.store.getSelectedIds())) return api;\n      // And if we are changing the selection within simple_select mode, just change the selection,\n      // instead of stopping and re-starting the mode\n      ctx.store.setSelected(modeOptions.featureIds, { silent });\n      ctx.store.render();\n      return api;\n    }\n\n    if (mode === Constants.modes.DIRECT_SELECT && api.getMode() === Constants.modes.DIRECT_SELECT &&\n      modeOptions.featureId === ctx.store.getSelectedIds()[0]) {\n      return api;\n    }\n\n    ctx.events.changeMode(mode, modeOptions, { silent });\n    return api;\n  };\n\n  api.getMode = function() {\n    return ctx.events.getMode();\n  };\n\n  api.trash = function() {\n    ctx.events.trash({ silent });\n    return api;\n  };\n\n  api.combineFeatures = function() {\n    ctx.events.combineFeatures({ silent });\n    return api;\n  };\n\n  api.uncombineFeatures = function() {\n    ctx.events.uncombineFeatures({ silent });\n    return api;\n  };\n\n  api.setFeatureProperty = function(featureId, property, value) {\n    ctx.store.setFeatureProperty(featureId, property, value, { silent });\n    return api;\n  };\n\n  return api;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}