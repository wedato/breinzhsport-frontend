{"ast":null,"code":"\"use strict\";\n\n/**\n * Capture module.\n * @module aws_p\n */\nvar semver = require('semver');\nvar Aws = require('../segments/attributes/aws');\nvar contextUtils = require('../context_utils');\nvar Utils = require('../utils');\nvar logger = require('../logger');\nvar minVersion = '2.7.15';\nvar throttledErrorDefault = function throttledErrorDefault() {\n  return false; // If the customer doesn't provide an aws-sdk with a throttled error function, we can't make assumptions.\n};\n/**\n * Configures the AWS SDK to automatically capture information for the segment.\n * All created clients will automatically be captured.  See 'captureAWSClient'\n * for additional details.\n * @param {AWS} awssdk - The Javascript AWS SDK.\n * @alias module:aws_p.captureAWS\n * @returns {AWS}\n * @see https://github.com/aws/aws-sdk-js\n */\nvar captureAWS = function captureAWS(awssdk) {\n  if (!semver.gte(awssdk.VERSION, minVersion)) {\n    throw new Error('AWS SDK version ' + minVersion + ' or greater required.');\n  }\n  for (var prop in awssdk) {\n    if (awssdk[prop].serviceIdentifier) {\n      var Service = awssdk[prop];\n      Service.prototype.customizeRequests(captureAWSRequest);\n    }\n  }\n  return awssdk;\n};\n/**\n * Configures any AWS Client instance to automatically capture information for the segment.\n * For manual mode, a param with key called 'Segment' is required as a part of the AWS\n * call paramaters, and must reference a Segment or Subsegment object.\n * @param {AWS.Service} service - An instance of a AWS service to wrap.\n * @alias module:aws_p.captureAWSClient\n * @returns {AWS.Service}\n * @see https://github.com/aws/aws-sdk-js\n */\nvar captureAWSClient = function captureAWSClient(service) {\n  service.customizeRequests(captureAWSRequest);\n  return service;\n};\nfunction captureAWSRequest(req) {\n  var parent = contextUtils.resolveSegment(contextUtils.resolveManualSegmentParams(req.params));\n  if (!parent) {\n    var output = this.serviceIdentifier + '.' + req.operation;\n    if (!contextUtils.isAutomaticMode()) {\n      logger.getLogger().info('Call ' + output + ' requires a segment object' + ' on the request params as \"XRaySegment\" for tracing in manual mode. Ignoring.');\n    } else {\n      logger.getLogger().info('Call ' + output + ' is missing the sub/segment context for automatic mode. Ignoring.');\n    }\n    return req;\n  }\n  var throttledError = this.throttledError || throttledErrorDefault;\n  var stack = new Error().stack;\n  let subsegment;\n  if (parent.notTraced) {\n    subsegment = parent.addNewSubsegmentWithoutSampling(this.serviceIdentifier);\n  } else {\n    subsegment = parent.addNewSubsegment(this.serviceIdentifier);\n  }\n  var traceId = parent.segment ? parent.segment.trace_id : parent.trace_id;\n  const data = parent.segment ? parent.segment.additionalTraceData : parent.additionalTraceData;\n  var buildListener = function (req) {\n    if (parent.noOp) {\n      return;\n    }\n    let traceHeader = 'Root=' + traceId + ';Parent=' + subsegment.id + ';Sampled=' + (subsegment.notTraced ? '0' : '1');\n    if (data != null) {\n      for (const [key, value] of Object.entries(data)) {\n        traceHeader += ';' + key + '=' + value;\n      }\n    }\n    req.httpRequest.headers['X-Amzn-Trace-Id'] = traceHeader;\n  };\n  var completeListener = function (res) {\n    subsegment.addAttribute('namespace', 'aws');\n    subsegment.addAttribute('aws', new Aws(res, subsegment.name));\n    var httpRes = res.httpResponse;\n    if (httpRes) {\n      subsegment.addAttribute('http', new HttpResponse(httpRes));\n      if (httpRes.statusCode === 429 || res.error && throttledError(res.error)) {\n        subsegment.addThrottleFlag();\n      }\n    }\n    if (res.error) {\n      var err = {\n        message: res.error.message,\n        name: res.error.code,\n        stack: stack\n      };\n      if (httpRes && httpRes.statusCode) {\n        if (Utils.getCauseTypeFromHttpStatus(httpRes.statusCode) == 'error') {\n          subsegment.addErrorFlag();\n        }\n        subsegment.close(err, true);\n      } else {\n        subsegment.close(err);\n      }\n    } else {\n      if (httpRes && httpRes.statusCode) {\n        var cause = Utils.getCauseTypeFromHttpStatus(httpRes.statusCode);\n        if (cause) {\n          subsegment[cause] = true;\n        }\n      }\n      subsegment.close();\n    }\n  };\n  req.on('beforePresign', function (req) {\n    // Only the AWS Presigner triggers this event,\n    // so we can rely on this event to notify us when\n    // a request is for a presigned url\n    parent.removeSubsegment(subsegment);\n    parent.decrementCounter();\n    req.removeListener('build', buildListener);\n    req.removeListener('complete', completeListener);\n  });\n  req.on('build', buildListener).on('complete', completeListener);\n  if (!req.__send) {\n    req.__send = req.send;\n    req.send = function (callback) {\n      if (contextUtils.isAutomaticMode()) {\n        var session = contextUtils.getNamespace();\n        session.run(function () {\n          contextUtils.setSegment(subsegment);\n          req.__send(callback);\n        });\n      } else {\n        req.__send(callback);\n      }\n    };\n  }\n}\nfunction HttpResponse(res) {\n  this.init(res);\n}\nHttpResponse.prototype.init = function init(res) {\n  this.response = {\n    status: res.statusCode || ''\n  };\n  if (res.headers && res.headers['content-length']) {\n    this.response.content_length = res.headers['content-length'];\n  }\n};\nmodule.exports.captureAWSClient = captureAWSClient;\nmodule.exports.captureAWS = captureAWS;","map":{"version":3,"names":["semver","require","Aws","contextUtils","Utils","logger","minVersion","throttledErrorDefault","captureAWS","awssdk","gte","VERSION","Error","prop","serviceIdentifier","Service","prototype","customizeRequests","captureAWSRequest","captureAWSClient","service","req","parent","resolveSegment","resolveManualSegmentParams","params","output","operation","isAutomaticMode","getLogger","info","throttledError","stack","subsegment","notTraced","addNewSubsegmentWithoutSampling","addNewSubsegment","traceId","segment","trace_id","data","additionalTraceData","buildListener","noOp","traceHeader","id","key","value","Object","entries","httpRequest","headers","completeListener","res","addAttribute","name","httpRes","httpResponse","HttpResponse","statusCode","error","addThrottleFlag","err","message","code","getCauseTypeFromHttpStatus","addErrorFlag","close","cause","on","removeSubsegment","decrementCounter","removeListener","__send","send","callback","session","getNamespace","run","setSegment","init","response","status","content_length","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/patchers/aws_p.js"],"sourcesContent":["\"use strict\";\n/**\n * Capture module.\n * @module aws_p\n */\nvar semver = require('semver');\nvar Aws = require('../segments/attributes/aws');\nvar contextUtils = require('../context_utils');\nvar Utils = require('../utils');\nvar logger = require('../logger');\nvar minVersion = '2.7.15';\nvar throttledErrorDefault = function throttledErrorDefault() {\n    return false; // If the customer doesn't provide an aws-sdk with a throttled error function, we can't make assumptions.\n};\n/**\n * Configures the AWS SDK to automatically capture information for the segment.\n * All created clients will automatically be captured.  See 'captureAWSClient'\n * for additional details.\n * @param {AWS} awssdk - The Javascript AWS SDK.\n * @alias module:aws_p.captureAWS\n * @returns {AWS}\n * @see https://github.com/aws/aws-sdk-js\n */\nvar captureAWS = function captureAWS(awssdk) {\n    if (!semver.gte(awssdk.VERSION, minVersion)) {\n        throw new Error('AWS SDK version ' + minVersion + ' or greater required.');\n    }\n    for (var prop in awssdk) {\n        if (awssdk[prop].serviceIdentifier) {\n            var Service = awssdk[prop];\n            Service.prototype.customizeRequests(captureAWSRequest);\n        }\n    }\n    return awssdk;\n};\n/**\n * Configures any AWS Client instance to automatically capture information for the segment.\n * For manual mode, a param with key called 'Segment' is required as a part of the AWS\n * call paramaters, and must reference a Segment or Subsegment object.\n * @param {AWS.Service} service - An instance of a AWS service to wrap.\n * @alias module:aws_p.captureAWSClient\n * @returns {AWS.Service}\n * @see https://github.com/aws/aws-sdk-js\n */\nvar captureAWSClient = function captureAWSClient(service) {\n    service.customizeRequests(captureAWSRequest);\n    return service;\n};\nfunction captureAWSRequest(req) {\n    var parent = contextUtils.resolveSegment(contextUtils.resolveManualSegmentParams(req.params));\n    if (!parent) {\n        var output = this.serviceIdentifier + '.' + req.operation;\n        if (!contextUtils.isAutomaticMode()) {\n            logger.getLogger().info('Call ' + output + ' requires a segment object' +\n                ' on the request params as \"XRaySegment\" for tracing in manual mode. Ignoring.');\n        }\n        else {\n            logger.getLogger().info('Call ' + output +\n                ' is missing the sub/segment context for automatic mode. Ignoring.');\n        }\n        return req;\n    }\n    var throttledError = this.throttledError || throttledErrorDefault;\n    var stack = (new Error()).stack;\n    let subsegment;\n    if (parent.notTraced) {\n        subsegment = parent.addNewSubsegmentWithoutSampling(this.serviceIdentifier);\n    }\n    else {\n        subsegment = parent.addNewSubsegment(this.serviceIdentifier);\n    }\n    var traceId = parent.segment ? parent.segment.trace_id : parent.trace_id;\n    const data = parent.segment ? parent.segment.additionalTraceData : parent.additionalTraceData;\n    var buildListener = function (req) {\n        if (parent.noOp) {\n            return;\n        }\n        let traceHeader = 'Root=' + traceId + ';Parent=' + subsegment.id +\n            ';Sampled=' + (subsegment.notTraced ? '0' : '1');\n        if (data != null) {\n            for (const [key, value] of Object.entries(data)) {\n                traceHeader += ';' + key + '=' + value;\n            }\n        }\n        req.httpRequest.headers['X-Amzn-Trace-Id'] = traceHeader;\n    };\n    var completeListener = function (res) {\n        subsegment.addAttribute('namespace', 'aws');\n        subsegment.addAttribute('aws', new Aws(res, subsegment.name));\n        var httpRes = res.httpResponse;\n        if (httpRes) {\n            subsegment.addAttribute('http', new HttpResponse(httpRes));\n            if (httpRes.statusCode === 429 || (res.error && throttledError(res.error))) {\n                subsegment.addThrottleFlag();\n            }\n        }\n        if (res.error) {\n            var err = { message: res.error.message, name: res.error.code, stack: stack };\n            if (httpRes && httpRes.statusCode) {\n                if (Utils.getCauseTypeFromHttpStatus(httpRes.statusCode) == 'error') {\n                    subsegment.addErrorFlag();\n                }\n                subsegment.close(err, true);\n            }\n            else {\n                subsegment.close(err);\n            }\n        }\n        else {\n            if (httpRes && httpRes.statusCode) {\n                var cause = Utils.getCauseTypeFromHttpStatus(httpRes.statusCode);\n                if (cause) {\n                    subsegment[cause] = true;\n                }\n            }\n            subsegment.close();\n        }\n    };\n    req.on('beforePresign', function (req) {\n        // Only the AWS Presigner triggers this event,\n        // so we can rely on this event to notify us when\n        // a request is for a presigned url\n        parent.removeSubsegment(subsegment);\n        parent.decrementCounter();\n        req.removeListener('build', buildListener);\n        req.removeListener('complete', completeListener);\n    });\n    req.on('build', buildListener).on('complete', completeListener);\n    if (!req.__send) {\n        req.__send = req.send;\n        req.send = function (callback) {\n            if (contextUtils.isAutomaticMode()) {\n                var session = contextUtils.getNamespace();\n                session.run(function () {\n                    contextUtils.setSegment(subsegment);\n                    req.__send(callback);\n                });\n            }\n            else {\n                req.__send(callback);\n            }\n        };\n    }\n}\nfunction HttpResponse(res) {\n    this.init(res);\n}\nHttpResponse.prototype.init = function init(res) {\n    this.response = {\n        status: res.statusCode || '',\n    };\n    if (res.headers && res.headers['content-length']) {\n        this.response.content_length = res.headers['content-length'];\n    }\n};\nmodule.exports.captureAWSClient = captureAWSClient;\nmodule.exports.captureAWS = captureAWS;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}