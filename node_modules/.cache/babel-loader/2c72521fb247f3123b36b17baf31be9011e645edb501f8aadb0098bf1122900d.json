{"ast":null,"code":"import ModeInterface from './mode_interface.js';\nconst eventMapper = {\n  drag: 'onDrag',\n  click: 'onClick',\n  mousemove: 'onMouseMove',\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseout: 'onMouseOut',\n  keyup: 'onKeyUp',\n  keydown: 'onKeyDown',\n  touchstart: 'onTouchStart',\n  touchmove: 'onTouchMove',\n  touchend: 'onTouchEnd',\n  tap: 'onTap'\n};\nconst eventKeys = Object.keys(eventMapper);\nexport default function (modeObject) {\n  const modeObjectKeys = Object.keys(modeObject);\n  return function (ctx, startOpts = {}) {\n    let state = {};\n    const mode = modeObjectKeys.reduce((m, k) => {\n      m[k] = modeObject[k];\n      return m;\n    }, new ModeInterface(ctx));\n    function wrapper(eh) {\n      return e => mode[eh](state, e);\n    }\n    return {\n      start() {\n        state = mode.onSetup(startOpts); // this should set ui buttons\n\n        // Adds event handlers for all event options\n        // add sets the selector to false for all\n        // handlers that are not present in the mode\n        // to reduce on render calls for functions that\n        // have no logic\n        eventKeys.forEach(key => {\n          const modeHandler = eventMapper[key];\n          let selector = () => false;\n          if (modeObject[modeHandler]) {\n            selector = () => true;\n          }\n          this.on(key, selector, wrapper(modeHandler));\n        });\n      },\n      stop() {\n        mode.onStop(state);\n      },\n      trash() {\n        mode.onTrash(state);\n      },\n      combineFeatures() {\n        mode.onCombineFeatures(state);\n      },\n      uncombineFeatures() {\n        mode.onUncombineFeatures(state);\n      },\n      render(geojson, push) {\n        mode.toDisplayFeatures(state, geojson, push);\n      }\n    };\n  };\n}","map":{"version":3,"names":["ModeInterface","eventMapper","drag","click","mousemove","mousedown","mouseup","mouseout","keyup","keydown","touchstart","touchmove","touchend","tap","eventKeys","Object","keys","modeObject","modeObjectKeys","ctx","startOpts","state","mode","reduce","m","k","wrapper","eh","e","start","onSetup","forEach","key","modeHandler","selector","on","stop","onStop","trash","onTrash","combineFeatures","onCombineFeatures","uncombineFeatures","onUncombineFeatures","render","geojson","push","toDisplayFeatures"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@mapbox/mapbox-gl-draw/src/modes/object_to_mode.js"],"sourcesContent":["import ModeInterface from './mode_interface.js';\n\nconst eventMapper = {\n  drag: 'onDrag',\n  click: 'onClick',\n  mousemove: 'onMouseMove',\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseout: 'onMouseOut',\n  keyup: 'onKeyUp',\n  keydown: 'onKeyDown',\n  touchstart: 'onTouchStart',\n  touchmove: 'onTouchMove',\n  touchend: 'onTouchEnd',\n  tap: 'onTap'\n};\n\nconst eventKeys = Object.keys(eventMapper);\n\nexport default function(modeObject) {\n  const modeObjectKeys = Object.keys(modeObject);\n\n  return function(ctx, startOpts = {}) {\n    let state = {};\n\n    const mode = modeObjectKeys.reduce((m, k) => {\n      m[k] = modeObject[k];\n      return m;\n    }, new ModeInterface(ctx));\n\n    function wrapper(eh) {\n      return e => mode[eh](state, e);\n    }\n\n    return {\n      start() {\n        state = mode.onSetup(startOpts); // this should set ui buttons\n\n        // Adds event handlers for all event options\n        // add sets the selector to false for all\n        // handlers that are not present in the mode\n        // to reduce on render calls for functions that\n        // have no logic\n        eventKeys.forEach((key) => {\n          const modeHandler = eventMapper[key];\n          let selector = () => false;\n          if (modeObject[modeHandler]) {\n            selector = () => true;\n          }\n          this.on(key, selector, wrapper(modeHandler));\n        });\n\n      },\n      stop() {\n        mode.onStop(state);\n      },\n      trash() {\n        mode.onTrash(state);\n      },\n      combineFeatures() {\n        mode.onCombineFeatures(state);\n      },\n      uncombineFeatures() {\n        mode.onUncombineFeatures(state);\n      },\n      render(geojson, push) {\n        mode.toDisplayFeatures(state, geojson, push);\n      }\n    };\n  };\n}\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,qBAAqB;AAE/C,MAAMC,WAAW,GAAG;EAClBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,SAAS;EAChBC,SAAS,EAAE,aAAa;EACxBC,SAAS,EAAE,aAAa;EACxBC,OAAO,EAAE,WAAW;EACpBC,QAAQ,EAAE,YAAY;EACtBC,KAAK,EAAE,SAAS;EAChBC,OAAO,EAAE,WAAW;EACpBC,UAAU,EAAE,cAAc;EAC1BC,SAAS,EAAE,aAAa;EACxBC,QAAQ,EAAE,YAAY;EACtBC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACf,WAAW,CAAC;AAE1C,eAAe,UAASgB,UAAU,EAAE;EAClC,MAAMC,cAAc,GAAGH,MAAM,CAACC,IAAI,CAACC,UAAU,CAAC;EAE9C,OAAO,UAASE,GAAG,EAAEC,SAAS,GAAG,CAAC,CAAC,EAAE;IACnC,IAAIC,KAAK,GAAG,CAAC,CAAC;IAEd,MAAMC,IAAI,GAAGJ,cAAc,CAACK,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC3CD,CAAC,CAACC,CAAC,CAAC,GAAGR,UAAU,CAACQ,CAAC,CAAC;MACpB,OAAOD,CAAC;IACV,CAAC,EAAE,IAAIxB,aAAa,CAACmB,GAAG,CAAC,CAAC;IAE1B,SAASO,OAAOA,CAACC,EAAE,EAAE;MACnB,OAAOC,CAAC,IAAIN,IAAI,CAACK,EAAE,CAAC,CAACN,KAAK,EAAEO,CAAC,CAAC;IAChC;IAEA,OAAO;MACLC,KAAKA,CAAA,EAAG;QACNR,KAAK,GAAGC,IAAI,CAACQ,OAAO,CAACV,SAAS,CAAC,CAAC,CAAC;;QAEjC;QACA;QACA;QACA;QACA;QACAN,SAAS,CAACiB,OAAO,CAAEC,GAAG,IAAK;UACzB,MAAMC,WAAW,GAAGhC,WAAW,CAAC+B,GAAG,CAAC;UACpC,IAAIE,QAAQ,GAAGA,CAAA,KAAM,KAAK;UAC1B,IAAIjB,UAAU,CAACgB,WAAW,CAAC,EAAE;YAC3BC,QAAQ,GAAGA,CAAA,KAAM,IAAI;UACvB;UACA,IAAI,CAACC,EAAE,CAACH,GAAG,EAAEE,QAAQ,EAAER,OAAO,CAACO,WAAW,CAAC,CAAC;QAC9C,CAAC,CAAC;MAEJ,CAAC;MACDG,IAAIA,CAAA,EAAG;QACLd,IAAI,CAACe,MAAM,CAAChB,KAAK,CAAC;MACpB,CAAC;MACDiB,KAAKA,CAAA,EAAG;QACNhB,IAAI,CAACiB,OAAO,CAAClB,KAAK,CAAC;MACrB,CAAC;MACDmB,eAAeA,CAAA,EAAG;QAChBlB,IAAI,CAACmB,iBAAiB,CAACpB,KAAK,CAAC;MAC/B,CAAC;MACDqB,iBAAiBA,CAAA,EAAG;QAClBpB,IAAI,CAACqB,mBAAmB,CAACtB,KAAK,CAAC;MACjC,CAAC;MACDuB,MAAMA,CAACC,OAAO,EAAEC,IAAI,EAAE;QACpBxB,IAAI,CAACyB,iBAAiB,CAAC1B,KAAK,EAAEwB,OAAO,EAAEC,IAAI,CAAC;MAC9C;IACF,CAAC;EACH,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}