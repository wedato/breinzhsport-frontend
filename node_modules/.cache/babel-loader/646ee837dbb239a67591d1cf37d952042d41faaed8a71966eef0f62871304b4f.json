{"ast":null,"code":"'use strict';\n\nvar forEach = require('for-each');\nvar callBind = require('call-bind');\nvar gPO = require('reflect.getprototypeof/polyfill')();\nvar typedArrays = require('available-typed-arrays')();\n\n/** @typedef {(x: import('.').TypedArray) => number} ByteOffsetGetter */\n\n/** @type {Record<import('.').TypedArrayName, ByteOffsetGetter>} */\nvar getters = {\n  // @ts-expect-error TS can't handle __proto__ or `satisfies` in jsdoc\n  __proto__: null\n};\nvar gOPD = require('gopd');\nvar oDP = Object.defineProperty;\nif (gOPD) {\n  /** @type {ByteOffsetGetter} */\n  var getByteOffset = function (x) {\n    return x.byteOffset;\n  };\n  forEach(typedArrays, function (typedArray) {\n    // In Safari 7, Typed Array constructors are typeof object\n    if (typeof global[typedArray] === 'function' || typeof global[typedArray] === 'object') {\n      var Proto = global[typedArray].prototype;\n      // @ts-expect-error TS can't guarantee the callback is invoked sync\n      var descriptor = gOPD(Proto, 'byteOffset');\n      if (!descriptor) {\n        var superProto = gPO(Proto);\n        // @ts-expect-error TS can't guarantee the callback is invoked sync\n        descriptor = gOPD(superProto, 'byteOffset');\n      }\n      // Opera 12.16 has a magic byteOffset data property on instances AND on Proto\n      if (descriptor && descriptor.get) {\n        getters[typedArray] = callBind(descriptor.get);\n      } else if (oDP) {\n        // this is likely an engine where instances have a magic byteOffset data property\n        var arr = new global[typedArray](2);\n        // @ts-expect-error TS can't guarantee the callback is invoked sync\n        descriptor = gOPD(arr, 'byteOffset');\n        if (descriptor && descriptor.configurable) {\n          oDP(arr, 'length', {\n            value: 3\n          });\n        }\n        if (arr.length === 2) {\n          getters[typedArray] = getByteOffset;\n        }\n      }\n    }\n  });\n}\n\n/** @type {ByteOffsetGetter} */\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n  /** @type {number} */var foundOffset;\n  forEach(getters, /** @type {(getter: ByteOffsetGetter) => void} */function (getter) {\n    if (typeof foundOffset !== 'number') {\n      try {\n        var offset = getter(value);\n        if (typeof offset === 'number') {\n          foundOffset = offset;\n        }\n      } catch (e) {}\n    }\n  });\n  // @ts-expect-error TS can't guarantee the callback is invoked sync\n  return foundOffset;\n};\nvar isTypedArray = require('is-typed-array');\n\n/** @type {import('.')} */\nmodule.exports = function typedArrayByteOffset(value) {\n  if (!isTypedArray(value)) {\n    return false;\n  }\n  return tryTypedArrays(value);\n};","map":{"version":3,"names":["forEach","require","callBind","gPO","typedArrays","getters","__proto__","gOPD","oDP","Object","defineProperty","getByteOffset","x","byteOffset","typedArray","global","Proto","prototype","descriptor","superProto","get","arr","configurable","value","length","tryTypedArrays","tryAllTypedArrays","foundOffset","getter","offset","e","isTypedArray","module","exports","typedArrayByteOffset"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/typed-array-byte-offset/index.js"],"sourcesContent":["'use strict';\n\nvar forEach = require('for-each');\nvar callBind = require('call-bind');\nvar gPO = require('reflect.getprototypeof/polyfill')();\n\nvar typedArrays = require('available-typed-arrays')();\n\n/** @typedef {(x: import('.').TypedArray) => number} ByteOffsetGetter */\n\n/** @type {Record<import('.').TypedArrayName, ByteOffsetGetter>} */\nvar getters = {\n\t// @ts-expect-error TS can't handle __proto__ or `satisfies` in jsdoc\n\t__proto__: null\n};\n\nvar gOPD = require('gopd');\nvar oDP = Object.defineProperty;\nif (gOPD) {\n\t/** @type {ByteOffsetGetter} */\n\tvar getByteOffset = function (x) {\n\t\treturn x.byteOffset;\n\t};\n\tforEach(typedArrays, function (typedArray) {\n\t\t// In Safari 7, Typed Array constructors are typeof object\n\t\tif (typeof global[typedArray] === 'function' || typeof global[typedArray] === 'object') {\n\t\t\tvar Proto = global[typedArray].prototype;\n\t\t\t// @ts-expect-error TS can't guarantee the callback is invoked sync\n\t\t\tvar descriptor = gOPD(Proto, 'byteOffset');\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = gPO(Proto);\n\t\t\t\t// @ts-expect-error TS can't guarantee the callback is invoked sync\n\t\t\t\tdescriptor = gOPD(superProto, 'byteOffset');\n\t\t\t}\n\t\t\t// Opera 12.16 has a magic byteOffset data property on instances AND on Proto\n\t\t\tif (descriptor && descriptor.get) {\n\t\t\t\tgetters[typedArray] = callBind(descriptor.get);\n\t\t\t} else if (oDP) {\n\t\t\t\t// this is likely an engine where instances have a magic byteOffset data property\n\t\t\t\tvar arr = new global[typedArray](2);\n\t\t\t\t// @ts-expect-error TS can't guarantee the callback is invoked sync\n\t\t\t\tdescriptor = gOPD(arr, 'byteOffset');\n\t\t\t\tif (descriptor && descriptor.configurable) {\n\t\t\t\t\toDP(arr, 'length', { value: 3 });\n\t\t\t\t}\n\t\t\t\tif (arr.length === 2) {\n\t\t\t\t\tgetters[typedArray] = getByteOffset;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n\n/** @type {ByteOffsetGetter} */\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\t/** @type {number} */ var foundOffset;\n\tforEach(getters, /** @type {(getter: ByteOffsetGetter) => void} */ function (getter) {\n\t\tif (typeof foundOffset !== 'number') {\n\t\t\ttry {\n\t\t\t\tvar offset = getter(value);\n\t\t\t\tif (typeof offset === 'number') {\n\t\t\t\t\tfoundOffset = offset;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\t// @ts-expect-error TS can't guarantee the callback is invoked sync\n\treturn foundOffset;\n};\n\nvar isTypedArray = require('is-typed-array');\n\n/** @type {import('.')} */\nmodule.exports = function typedArrayByteOffset(value) {\n\tif (!isTypedArray(value)) {\n\t\treturn false;\n\t}\n\treturn tryTypedArrays(value);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACjC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AACnC,IAAIE,GAAG,GAAGF,OAAO,CAAC,iCAAiC,CAAC,CAAC,CAAC;AAEtD,IAAIG,WAAW,GAAGH,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;;AAErD;;AAEA;AACA,IAAII,OAAO,GAAG;EACb;EACAC,SAAS,EAAE;AACZ,CAAC;AAED,IAAIC,IAAI,GAAGN,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIO,GAAG,GAAGC,MAAM,CAACC,cAAc;AAC/B,IAAIH,IAAI,EAAE;EACT;EACA,IAAII,aAAa,GAAG,SAAAA,CAAUC,CAAC,EAAE;IAChC,OAAOA,CAAC,CAACC,UAAU;EACpB,CAAC;EACDb,OAAO,CAACI,WAAW,EAAE,UAAUU,UAAU,EAAE;IAC1C;IACA,IAAI,OAAOC,MAAM,CAACD,UAAU,CAAC,KAAK,UAAU,IAAI,OAAOC,MAAM,CAACD,UAAU,CAAC,KAAK,QAAQ,EAAE;MACvF,IAAIE,KAAK,GAAGD,MAAM,CAACD,UAAU,CAAC,CAACG,SAAS;MACxC;MACA,IAAIC,UAAU,GAAGX,IAAI,CAACS,KAAK,EAAE,YAAY,CAAC;MAC1C,IAAI,CAACE,UAAU,EAAE;QAChB,IAAIC,UAAU,GAAGhB,GAAG,CAACa,KAAK,CAAC;QAC3B;QACAE,UAAU,GAAGX,IAAI,CAACY,UAAU,EAAE,YAAY,CAAC;MAC5C;MACA;MACA,IAAID,UAAU,IAAIA,UAAU,CAACE,GAAG,EAAE;QACjCf,OAAO,CAACS,UAAU,CAAC,GAAGZ,QAAQ,CAACgB,UAAU,CAACE,GAAG,CAAC;MAC/C,CAAC,MAAM,IAAIZ,GAAG,EAAE;QACf;QACA,IAAIa,GAAG,GAAG,IAAIN,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,CAAC;QACnC;QACAI,UAAU,GAAGX,IAAI,CAACc,GAAG,EAAE,YAAY,CAAC;QACpC,IAAIH,UAAU,IAAIA,UAAU,CAACI,YAAY,EAAE;UAC1Cd,GAAG,CAACa,GAAG,EAAE,QAAQ,EAAE;YAAEE,KAAK,EAAE;UAAE,CAAC,CAAC;QACjC;QACA,IAAIF,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;UACrBnB,OAAO,CAACS,UAAU,CAAC,GAAGH,aAAa;QACpC;MACD;IACD;EACD,CAAC,CAAC;AACH;;AAEA;AACA,IAAIc,cAAc,GAAG,SAASC,iBAAiBA,CAACH,KAAK,EAAE;EACtD,qBAAsB,IAAII,WAAW;EACrC3B,OAAO,CAACK,OAAO,EAAE,iDAAkD,UAAUuB,MAAM,EAAE;IACpF,IAAI,OAAOD,WAAW,KAAK,QAAQ,EAAE;MACpC,IAAI;QACH,IAAIE,MAAM,GAAGD,MAAM,CAACL,KAAK,CAAC;QAC1B,IAAI,OAAOM,MAAM,KAAK,QAAQ,EAAE;UAC/BF,WAAW,GAAGE,MAAM;QACrB;MACD,CAAC,CAAC,OAAOC,CAAC,EAAE,CAAC;IACd;EACD,CAAC,CAAC;EACF;EACA,OAAOH,WAAW;AACnB,CAAC;AAED,IAAII,YAAY,GAAG9B,OAAO,CAAC,gBAAgB,CAAC;;AAE5C;AACA+B,MAAM,CAACC,OAAO,GAAG,SAASC,oBAAoBA,CAACX,KAAK,EAAE;EACrD,IAAI,CAACQ,YAAY,CAACR,KAAK,CAAC,EAAE;IACzB,OAAO,KAAK;EACb;EACA,OAAOE,cAAc,CAACF,KAAK,CAAC;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}