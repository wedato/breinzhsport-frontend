{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetLabelDetectionRequest, GetLabelDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetLabelDetectionCommand, serializeAws_json1_1GetLabelDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the label detection results of a Amazon Rekognition Video analysis started by <a>StartLabelDetection</a>.  </p>\n *\n *          <p>The label detection operation is started by a call to <a>StartLabelDetection</a>\n *       which returns a job identifier (<code>JobId</code>). When the label detection operation finishes, Amazon Rekognition publishes a completion status to\n *       the Amazon Simple Notification Service topic registered in the initial call to <code>StartlabelDetection</code>. To get the results\n *       of the label detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *       If so, call  <a>GetLabelDetection</a> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>\n *          <p>\n *             <code>GetLabelDetection</code> returns an array of detected labels (<code>Labels</code>) sorted by the time\n *        the labels were detected. You can also sort by the label name by specifying <code>NAME</code> for the\n *        <code>SortBy</code> input parameter.</p>\n *          <p>The labels returned include the label name, the percentage confidence in the accuracy of the detected label,\n *         and the time the label was detected in the video.</p>\n *          <p>The returned labels also include bounding box information for common objects, a\n *        hierarchical taxonomy of detected labels, and the version of the label model used for detection.</p>\n *\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *     specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n *     of results. To get the next page of results, call <code>GetlabelDetection</code> and populate the <code>NextToken</code> request parameter with the token\n *      value returned from the previous call to <code>GetLabelDetection</code>.</p>\n */\nvar GetLabelDetectionCommand = /** @class */function (_super) {\n  __extends(GetLabelDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetLabelDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetLabelDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetLabelDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetLabelDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetLabelDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetLabelDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetLabelDetectionCommand(input, context);\n  };\n  GetLabelDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetLabelDetectionCommand(output, context);\n  };\n  return GetLabelDetectionCommand;\n}($Command);\nexport { GetLabelDetectionCommand };","map":{"version":3,"names":["GetLabelDetectionRequest","GetLabelDetectionResponse","deserializeAws_json1_1GetLabelDetectionCommand","serializeAws_json1_1GetLabelDetectionCommand","getSerdePlugin","Command","$Command","GetLabelDetectionCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-sdk\\client-rekognition\\commands\\GetLabelDetectionCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { GetLabelDetectionRequest, GetLabelDetectionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetLabelDetectionCommand,\n  serializeAws_json1_1GetLabelDetectionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetLabelDetectionCommandInput = GetLabelDetectionRequest;\nexport type GetLabelDetectionCommandOutput = GetLabelDetectionResponse & __MetadataBearer;\n\n/**\n * <p>Gets the label detection results of a Amazon Rekognition Video analysis started by <a>StartLabelDetection</a>.  </p>\n *\n *          <p>The label detection operation is started by a call to <a>StartLabelDetection</a>\n *       which returns a job identifier (<code>JobId</code>). When the label detection operation finishes, Amazon Rekognition publishes a completion status to\n *       the Amazon Simple Notification Service topic registered in the initial call to <code>StartlabelDetection</code>. To get the results\n *       of the label detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *       If so, call  <a>GetLabelDetection</a> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartLabelDetection</code>.</p>\n *          <p>\n *             <code>GetLabelDetection</code> returns an array of detected labels (<code>Labels</code>) sorted by the time\n *        the labels were detected. You can also sort by the label name by specifying <code>NAME</code> for the\n *        <code>SortBy</code> input parameter.</p>\n *          <p>The labels returned include the label name, the percentage confidence in the accuracy of the detected label,\n *         and the time the label was detected in the video.</p>\n *          <p>The returned labels also include bounding box information for common objects, a\n *        hierarchical taxonomy of detected labels, and the version of the label model used for detection.</p>\n *\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *     specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n *     of results. To get the next page of results, call <code>GetlabelDetection</code> and populate the <code>NextToken</code> request parameter with the token\n *      value returned from the previous call to <code>GetLabelDetection</code>.</p>\n */\nexport class GetLabelDetectionCommand extends $Command<\n  GetLabelDetectionCommandInput,\n  GetLabelDetectionCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetLabelDetectionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetLabelDetectionCommandInput, GetLabelDetectionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"GetLabelDetectionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetLabelDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetLabelDetectionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetLabelDetectionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetLabelDetectionCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetLabelDetectionCommandOutput> {\n    return deserializeAws_json1_1GetLabelDetectionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,wBAAwB,EAAEC,yBAAyB,QAAQ,oBAAoB;AACxF,SACEC,8CAA8C,EAC9CC,4CAA4C,QACvC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAAC,wBAAA,0BAAAC,MAAA;EAA8CC,SAAA,CAAAF,wBAAA,EAAAC,MAAA;EAK5C;EACA;EAEA,SAAAD,yBAAqBG,KAAoC;IAAzD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,wBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,0BAA0B;IAC9C,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,wBAAwB,CAAC6B,kBAAkB;MACpEC,wBAAwB,EAAE7B,yBAAyB,CAAC4B;KACrD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,wBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAoC,EAAEyB,OAAuB;IAC7E,OAAOhC,4CAA4C,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACrE,CAAC;EAEO5B,wBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,8CAA8C,CAACkC,MAAM,EAAED,OAAO,CAAC;EACxE,CAAC;EAIH,OAAA5B,wBAAC;AAAD,CAAC,CAtD6CD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}