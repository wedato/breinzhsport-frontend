{"ast":null,"code":"import MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { CircleMode, SimpleSelectMode, DirectMode } from \"maplibre-gl-draw-circle\";\nimport { getPolygonFeatureFromBounds, getCircleFeatureFromCoords } from \"../geofenceUtils\";\nimport { GEOFENCE_BORDER_COLOR, GEOFENCE_COLOR, GEOFENCE_VERTEX_COLOR } from \"../constants\";\nexport class AmplifyMapDraw {\n  constructor(map, ui) {\n    this._mapBoxDraw = new MapboxDraw({\n      displayControlsDefault: false,\n      defaultMode: \"simple_select\",\n      userProperties: true,\n      controls: {\n        trash: true\n      },\n      modes: Object.assign(Object.assign({}, MapboxDraw.modes), {\n        draw_circle: CircleMode,\n        direct_select: DirectMode,\n        simple_select: SimpleSelectMode\n      }),\n      styles: [\n      // ACTIVE (being drawn)\n      // polygon fill\n      {\n        id: \"gl-draw-polygon-fill\",\n        type: \"fill\",\n        filter: [\"all\", [\"==\", \"$type\", \"Polygon\"], [\"!=\", \"mode\", \"static\"]],\n        paint: {\n          \"fill-color\": GEOFENCE_COLOR,\n          \"fill-outline-color\": GEOFENCE_COLOR,\n          \"fill-opacity\": 0.3\n        }\n      },\n      // polygon mid points\n      {\n        id: \"gl-draw-polygon-midpoint\",\n        type: \"circle\",\n        filter: [\"all\", [\"==\", \"$type\", \"Point\"], [\"==\", \"meta\", \"midpoint\"]],\n        paint: {\n          \"circle-radius\": 5,\n          \"circle-color\": GEOFENCE_VERTEX_COLOR\n        }\n      },\n      // polygon border\n      {\n        id: \"gl-draw-polygon-stroke-active\",\n        type: \"line\",\n        filter: [\"all\", [\"==\", \"$type\", \"Polygon\"], [\"!=\", \"mode\", \"static\"]],\n        layout: {\n          \"line-cap\": \"round\",\n          \"line-join\": \"round\"\n        },\n        paint: {\n          \"line-color\": GEOFENCE_BORDER_COLOR,\n          \"line-width\": 4\n        }\n      },\n      // vertex circle\n      {\n        id: \"gl-draw-polygon-and-line-vertex-active\",\n        type: \"circle\",\n        filter: [\"all\", [\"==\", \"meta\", \"vertex\"], [\"==\", \"$type\", \"Point\"], [\"!=\", \"mode\", \"static\"]],\n        paint: {\n          \"circle-radius\": 8,\n          \"circle-color\": GEOFENCE_VERTEX_COLOR,\n          \"circle-stroke-color\": GEOFENCE_BORDER_COLOR,\n          \"circle-stroke-width\": 1\n        }\n      }]\n    });\n    this._map = map;\n    this._ui = ui;\n    this.enable = this.enable.bind(this);\n    this.disable = this.disable.bind(this);\n    this.drawPolygonGeofence = this.drawPolygonGeofence.bind(this);\n  }\n  get(id) {\n    return this._mapBoxDraw.get(id);\n  }\n  add(data) {\n    const isCircle = data.properties.isCircle;\n    this.enable(isCircle);\n    this._mapBoxDraw.add(data);\n    this._mapBoxDraw.changeMode(\"direct_select\", {\n      featureId: data.id\n    });\n  }\n  delete(id) {\n    this._mapBoxDraw.delete(id);\n  }\n  disable() {\n    if (this._map.hasControl(this._mapBoxDraw)) {\n      this._map.removeControl(this._mapBoxDraw);\n    }\n    this._ui.removeGeofenceCreateContainer();\n  }\n  enable(isCircle) {\n    if (this._map.hasControl(this._mapBoxDraw)) {\n      return;\n    }\n    this._map.addControl(this._mapBoxDraw, \"bottom-right\");\n    this._ui.createGeofenceCreateContainer(isCircle);\n  }\n  /**\n   * Draws a polygonal geofence around the center of the current map view. The polygon defaults to 3/4 the size of the current map bounds\n   * @param id the geofence geojson id\n   */\n  drawPolygonGeofence(id) {\n    const mapBounds = this._map.getBounds();\n    const feature = getPolygonFeatureFromBounds(id, mapBounds);\n    this.add(feature);\n  }\n  /**\n   * Draws a cicular geofence around the center of the current map view\n   * @param id the geofence geojson id\n   * @param radius optional parameter for setting the radius of the cicular geofence, default to 1/8th of the current map bounds length\n   */\n  drawCircularGeofence(id, radius) {\n    const mapBounds = this._map.getBounds();\n    const circleFeature = getCircleFeatureFromCoords(id, this._map.getCenter().toArray(), {\n      bounds: mapBounds,\n      radius\n    });\n    this.add(circleFeature);\n    this._ui.updateGeofenceRadius(radius || circleFeature.properties.radius.toFixed(2));\n  }\n}","map":{"version":3,"names":["MapboxDraw","CircleMode","SimpleSelectMode","DirectMode","getPolygonFeatureFromBounds","getCircleFeatureFromCoords","GEOFENCE_BORDER_COLOR","GEOFENCE_COLOR","GEOFENCE_VERTEX_COLOR","AmplifyMapDraw","constructor","map","ui","_mapBoxDraw","displayControlsDefault","defaultMode","userProperties","controls","trash","modes","Object","assign","draw_circle","direct_select","simple_select","styles","id","type","filter","paint","layout","_map","_ui","enable","bind","disable","drawPolygonGeofence","get","add","data","isCircle","properties","changeMode","featureId","delete","hasControl","removeControl","removeGeofenceCreateContainer","addControl","createGeofenceCreateContainer","mapBounds","getBounds","feature","drawCircularGeofence","radius","circleFeature","getCenter","toArray","bounds","updateGeofenceRadius","toFixed"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/maplibre-gl-js-amplify/lib/esm/AmplifyGeofenceControl/AmplifyMapDraw.js"],"sourcesContent":["import MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { CircleMode, SimpleSelectMode, DirectMode, } from \"maplibre-gl-draw-circle\";\nimport { getPolygonFeatureFromBounds, getCircleFeatureFromCoords, } from \"../geofenceUtils\";\nimport { GEOFENCE_BORDER_COLOR, GEOFENCE_COLOR, GEOFENCE_VERTEX_COLOR, } from \"../constants\";\nexport class AmplifyMapDraw {\n    constructor(map, ui) {\n        this._mapBoxDraw = new MapboxDraw({\n            displayControlsDefault: false,\n            defaultMode: \"simple_select\",\n            userProperties: true,\n            controls: {\n                trash: true,\n            },\n            modes: Object.assign(Object.assign({}, MapboxDraw.modes), { draw_circle: CircleMode, direct_select: DirectMode, simple_select: SimpleSelectMode }),\n            styles: [\n                // ACTIVE (being drawn)\n                // polygon fill\n                {\n                    id: \"gl-draw-polygon-fill\",\n                    type: \"fill\",\n                    filter: [\"all\", [\"==\", \"$type\", \"Polygon\"], [\"!=\", \"mode\", \"static\"]],\n                    paint: {\n                        \"fill-color\": GEOFENCE_COLOR,\n                        \"fill-outline-color\": GEOFENCE_COLOR,\n                        \"fill-opacity\": 0.3,\n                    },\n                },\n                // polygon mid points\n                {\n                    id: \"gl-draw-polygon-midpoint\",\n                    type: \"circle\",\n                    filter: [\"all\", [\"==\", \"$type\", \"Point\"], [\"==\", \"meta\", \"midpoint\"]],\n                    paint: {\n                        \"circle-radius\": 5,\n                        \"circle-color\": GEOFENCE_VERTEX_COLOR,\n                    },\n                },\n                // polygon border\n                {\n                    id: \"gl-draw-polygon-stroke-active\",\n                    type: \"line\",\n                    filter: [\"all\", [\"==\", \"$type\", \"Polygon\"], [\"!=\", \"mode\", \"static\"]],\n                    layout: {\n                        \"line-cap\": \"round\",\n                        \"line-join\": \"round\",\n                    },\n                    paint: {\n                        \"line-color\": GEOFENCE_BORDER_COLOR,\n                        \"line-width\": 4,\n                    },\n                },\n                // vertex circle\n                {\n                    id: \"gl-draw-polygon-and-line-vertex-active\",\n                    type: \"circle\",\n                    filter: [\n                        \"all\",\n                        [\"==\", \"meta\", \"vertex\"],\n                        [\"==\", \"$type\", \"Point\"],\n                        [\"!=\", \"mode\", \"static\"],\n                    ],\n                    paint: {\n                        \"circle-radius\": 8,\n                        \"circle-color\": GEOFENCE_VERTEX_COLOR,\n                        \"circle-stroke-color\": GEOFENCE_BORDER_COLOR,\n                        \"circle-stroke-width\": 1,\n                    },\n                },\n            ],\n        });\n        this._map = map;\n        this._ui = ui;\n        this.enable = this.enable.bind(this);\n        this.disable = this.disable.bind(this);\n        this.drawPolygonGeofence = this.drawPolygonGeofence.bind(this);\n    }\n    get(id) {\n        return this._mapBoxDraw.get(id);\n    }\n    add(data) {\n        const isCircle = data.properties.isCircle;\n        this.enable(isCircle);\n        this._mapBoxDraw.add(data);\n        this._mapBoxDraw.changeMode(\"direct_select\", {\n            featureId: data.id,\n        });\n    }\n    delete(id) {\n        this._mapBoxDraw.delete(id);\n    }\n    disable() {\n        if (this._map.hasControl(this._mapBoxDraw)) {\n            this._map.removeControl(this._mapBoxDraw);\n        }\n        this._ui.removeGeofenceCreateContainer();\n    }\n    enable(isCircle) {\n        if (this._map.hasControl(this._mapBoxDraw)) {\n            return;\n        }\n        this._map.addControl(this._mapBoxDraw, \"bottom-right\");\n        this._ui.createGeofenceCreateContainer(isCircle);\n    }\n    /**\n     * Draws a polygonal geofence around the center of the current map view. The polygon defaults to 3/4 the size of the current map bounds\n     * @param id the geofence geojson id\n     */\n    drawPolygonGeofence(id) {\n        const mapBounds = this._map.getBounds();\n        const feature = getPolygonFeatureFromBounds(id, mapBounds);\n        this.add(feature);\n    }\n    /**\n     * Draws a cicular geofence around the center of the current map view\n     * @param id the geofence geojson id\n     * @param radius optional parameter for setting the radius of the cicular geofence, default to 1/8th of the current map bounds length\n     */\n    drawCircularGeofence(id, radius) {\n        const mapBounds = this._map.getBounds();\n        const circleFeature = getCircleFeatureFromCoords(id, this._map.getCenter().toArray(), { bounds: mapBounds, radius });\n        this.add(circleFeature);\n        this._ui.updateGeofenceRadius(radius || circleFeature.properties.radius.toFixed(2));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}