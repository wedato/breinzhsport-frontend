{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nexport var Term;\n(function (Term) {\n  Term.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Term || (Term = {}));\nexport var AppliedTerminology;\n(function (AppliedTerminology) {\n  AppliedTerminology.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AppliedTerminology || (AppliedTerminology = {}));\nexport var ConflictException;\n(function (ConflictException) {\n  ConflictException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ConflictException || (ConflictException = {}));\nexport var EncryptionKeyType;\n(function (EncryptionKeyType) {\n  EncryptionKeyType[\"KMS\"] = \"KMS\";\n})(EncryptionKeyType || (EncryptionKeyType = {}));\nexport var EncryptionKey;\n(function (EncryptionKey) {\n  EncryptionKey.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EncryptionKey || (EncryptionKey = {}));\nexport var ParallelDataFormat;\n(function (ParallelDataFormat) {\n  ParallelDataFormat[\"CSV\"] = \"CSV\";\n  ParallelDataFormat[\"TMX\"] = \"TMX\";\n  ParallelDataFormat[\"TSV\"] = \"TSV\";\n})(ParallelDataFormat || (ParallelDataFormat = {}));\nexport var ParallelDataConfig;\n(function (ParallelDataConfig) {\n  ParallelDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ParallelDataConfig || (ParallelDataConfig = {}));\nexport var CreateParallelDataRequest;\n(function (CreateParallelDataRequest) {\n  CreateParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateParallelDataRequest || (CreateParallelDataRequest = {}));\nexport var ParallelDataStatus;\n(function (ParallelDataStatus) {\n  ParallelDataStatus[\"ACTIVE\"] = \"ACTIVE\";\n  ParallelDataStatus[\"CREATING\"] = \"CREATING\";\n  ParallelDataStatus[\"DELETING\"] = \"DELETING\";\n  ParallelDataStatus[\"FAILED\"] = \"FAILED\";\n  ParallelDataStatus[\"UPDATING\"] = \"UPDATING\";\n})(ParallelDataStatus || (ParallelDataStatus = {}));\nexport var CreateParallelDataResponse;\n(function (CreateParallelDataResponse) {\n  CreateParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateParallelDataResponse || (CreateParallelDataResponse = {}));\nexport var InternalServerException;\n(function (InternalServerException) {\n  InternalServerException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InternalServerException || (InternalServerException = {}));\nexport var InvalidParameterValueException;\n(function (InvalidParameterValueException) {\n  InvalidParameterValueException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidParameterValueException || (InvalidParameterValueException = {}));\nexport var InvalidRequestException;\n(function (InvalidRequestException) {\n  InvalidRequestException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidRequestException || (InvalidRequestException = {}));\nexport var LimitExceededException;\n(function (LimitExceededException) {\n  LimitExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(LimitExceededException || (LimitExceededException = {}));\nexport var TooManyRequestsException;\n(function (TooManyRequestsException) {\n  TooManyRequestsException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TooManyRequestsException || (TooManyRequestsException = {}));\nexport var ConcurrentModificationException;\n(function (ConcurrentModificationException) {\n  ConcurrentModificationException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ConcurrentModificationException || (ConcurrentModificationException = {}));\nexport var DeleteParallelDataRequest;\n(function (DeleteParallelDataRequest) {\n  DeleteParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteParallelDataRequest || (DeleteParallelDataRequest = {}));\nexport var DeleteParallelDataResponse;\n(function (DeleteParallelDataResponse) {\n  DeleteParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteParallelDataResponse || (DeleteParallelDataResponse = {}));\nexport var ResourceNotFoundException;\n(function (ResourceNotFoundException) {\n  ResourceNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceNotFoundException || (ResourceNotFoundException = {}));\nexport var DeleteTerminologyRequest;\n(function (DeleteTerminologyRequest) {\n  DeleteTerminologyRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteTerminologyRequest || (DeleteTerminologyRequest = {}));\nexport var DescribeTextTranslationJobRequest;\n(function (DescribeTextTranslationJobRequest) {\n  DescribeTextTranslationJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeTextTranslationJobRequest || (DescribeTextTranslationJobRequest = {}));\nexport var InputDataConfig;\n(function (InputDataConfig) {\n  InputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InputDataConfig || (InputDataConfig = {}));\nexport var JobDetails;\n(function (JobDetails) {\n  JobDetails.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(JobDetails || (JobDetails = {}));\nexport var JobStatus;\n(function (JobStatus) {\n  JobStatus[\"COMPLETED\"] = \"COMPLETED\";\n  JobStatus[\"COMPLETED_WITH_ERROR\"] = \"COMPLETED_WITH_ERROR\";\n  JobStatus[\"FAILED\"] = \"FAILED\";\n  JobStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  JobStatus[\"STOPPED\"] = \"STOPPED\";\n  JobStatus[\"STOP_REQUESTED\"] = \"STOP_REQUESTED\";\n  JobStatus[\"SUBMITTED\"] = \"SUBMITTED\";\n})(JobStatus || (JobStatus = {}));\nexport var OutputDataConfig;\n(function (OutputDataConfig) {\n  OutputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(OutputDataConfig || (OutputDataConfig = {}));\nexport var TextTranslationJobProperties;\n(function (TextTranslationJobProperties) {\n  TextTranslationJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TextTranslationJobProperties || (TextTranslationJobProperties = {}));\nexport var DescribeTextTranslationJobResponse;\n(function (DescribeTextTranslationJobResponse) {\n  DescribeTextTranslationJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeTextTranslationJobResponse || (DescribeTextTranslationJobResponse = {}));\nexport var GetParallelDataRequest;\n(function (GetParallelDataRequest) {\n  GetParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetParallelDataRequest || (GetParallelDataRequest = {}));\nexport var ParallelDataDataLocation;\n(function (ParallelDataDataLocation) {\n  ParallelDataDataLocation.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ParallelDataDataLocation || (ParallelDataDataLocation = {}));\nexport var ParallelDataProperties;\n(function (ParallelDataProperties) {\n  ParallelDataProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ParallelDataProperties || (ParallelDataProperties = {}));\nexport var GetParallelDataResponse;\n(function (GetParallelDataResponse) {\n  GetParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetParallelDataResponse || (GetParallelDataResponse = {}));\nexport var TerminologyDataFormat;\n(function (TerminologyDataFormat) {\n  TerminologyDataFormat[\"CSV\"] = \"CSV\";\n  TerminologyDataFormat[\"TMX\"] = \"TMX\";\n})(TerminologyDataFormat || (TerminologyDataFormat = {}));\nexport var GetTerminologyRequest;\n(function (GetTerminologyRequest) {\n  GetTerminologyRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetTerminologyRequest || (GetTerminologyRequest = {}));\nexport var TerminologyDataLocation;\n(function (TerminologyDataLocation) {\n  TerminologyDataLocation.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TerminologyDataLocation || (TerminologyDataLocation = {}));\nexport var TerminologyProperties;\n(function (TerminologyProperties) {\n  TerminologyProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TerminologyProperties || (TerminologyProperties = {}));\nexport var GetTerminologyResponse;\n(function (GetTerminologyResponse) {\n  GetTerminologyResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetTerminologyResponse || (GetTerminologyResponse = {}));\nexport var MergeStrategy;\n(function (MergeStrategy) {\n  MergeStrategy[\"OVERWRITE\"] = \"OVERWRITE\";\n})(MergeStrategy || (MergeStrategy = {}));\nexport var TerminologyData;\n(function (TerminologyData) {\n  TerminologyData.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.File && {\n      File: SENSITIVE_STRING\n    });\n  };\n})(TerminologyData || (TerminologyData = {}));\nexport var ImportTerminologyRequest;\n(function (ImportTerminologyRequest) {\n  ImportTerminologyRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.TerminologyData && {\n      TerminologyData: TerminologyData.filterSensitiveLog(obj.TerminologyData)\n    });\n  };\n})(ImportTerminologyRequest || (ImportTerminologyRequest = {}));\nexport var ImportTerminologyResponse;\n(function (ImportTerminologyResponse) {\n  ImportTerminologyResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ImportTerminologyResponse || (ImportTerminologyResponse = {}));\nexport var ListParallelDataRequest;\n(function (ListParallelDataRequest) {\n  ListParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListParallelDataRequest || (ListParallelDataRequest = {}));\nexport var ListParallelDataResponse;\n(function (ListParallelDataResponse) {\n  ListParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListParallelDataResponse || (ListParallelDataResponse = {}));\nexport var ListTerminologiesRequest;\n(function (ListTerminologiesRequest) {\n  ListTerminologiesRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTerminologiesRequest || (ListTerminologiesRequest = {}));\nexport var ListTerminologiesResponse;\n(function (ListTerminologiesResponse) {\n  ListTerminologiesResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTerminologiesResponse || (ListTerminologiesResponse = {}));\nexport var InvalidFilterException;\n(function (InvalidFilterException) {\n  InvalidFilterException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidFilterException || (InvalidFilterException = {}));\nexport var TextTranslationJobFilter;\n(function (TextTranslationJobFilter) {\n  TextTranslationJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TextTranslationJobFilter || (TextTranslationJobFilter = {}));\nexport var ListTextTranslationJobsRequest;\n(function (ListTextTranslationJobsRequest) {\n  ListTextTranslationJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTextTranslationJobsRequest || (ListTextTranslationJobsRequest = {}));\nexport var ListTextTranslationJobsResponse;\n(function (ListTextTranslationJobsResponse) {\n  ListTextTranslationJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTextTranslationJobsResponse || (ListTextTranslationJobsResponse = {}));\nexport var StartTextTranslationJobRequest;\n(function (StartTextTranslationJobRequest) {\n  StartTextTranslationJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartTextTranslationJobRequest || (StartTextTranslationJobRequest = {}));\nexport var StartTextTranslationJobResponse;\n(function (StartTextTranslationJobResponse) {\n  StartTextTranslationJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartTextTranslationJobResponse || (StartTextTranslationJobResponse = {}));\nexport var UnsupportedLanguagePairException;\n(function (UnsupportedLanguagePairException) {\n  UnsupportedLanguagePairException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UnsupportedLanguagePairException || (UnsupportedLanguagePairException = {}));\nexport var StopTextTranslationJobRequest;\n(function (StopTextTranslationJobRequest) {\n  StopTextTranslationJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopTextTranslationJobRequest || (StopTextTranslationJobRequest = {}));\nexport var StopTextTranslationJobResponse;\n(function (StopTextTranslationJobResponse) {\n  StopTextTranslationJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopTextTranslationJobResponse || (StopTextTranslationJobResponse = {}));\nexport var DetectedLanguageLowConfidenceException;\n(function (DetectedLanguageLowConfidenceException) {\n  DetectedLanguageLowConfidenceException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectedLanguageLowConfidenceException || (DetectedLanguageLowConfidenceException = {}));\nexport var ServiceUnavailableException;\n(function (ServiceUnavailableException) {\n  ServiceUnavailableException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ServiceUnavailableException || (ServiceUnavailableException = {}));\nexport var TextSizeLimitExceededException;\n(function (TextSizeLimitExceededException) {\n  TextSizeLimitExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TextSizeLimitExceededException || (TextSizeLimitExceededException = {}));\nexport var TranslateTextRequest;\n(function (TranslateTextRequest) {\n  TranslateTextRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TranslateTextRequest || (TranslateTextRequest = {}));\nexport var TranslateTextResponse;\n(function (TranslateTextResponse) {\n  TranslateTextResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TranslateTextResponse || (TranslateTextResponse = {}));\nexport var UpdateParallelDataRequest;\n(function (UpdateParallelDataRequest) {\n  UpdateParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UpdateParallelDataRequest || (UpdateParallelDataRequest = {}));\nexport var UpdateParallelDataResponse;\n(function (UpdateParallelDataResponse) {\n  UpdateParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UpdateParallelDataResponse || (UpdateParallelDataResponse = {}));","map":{"version":3,"names":["SENSITIVE_STRING","Term","filterSensitiveLog","obj","__assign","AppliedTerminology","ConflictException","EncryptionKeyType","EncryptionKey","ParallelDataFormat","ParallelDataConfig","CreateParallelDataRequest","ParallelDataStatus","CreateParallelDataResponse","InternalServerException","InvalidParameterValueException","InvalidRequestException","LimitExceededException","TooManyRequestsException","ConcurrentModificationException","DeleteParallelDataRequest","DeleteParallelDataResponse","ResourceNotFoundException","DeleteTerminologyRequest","DescribeTextTranslationJobRequest","InputDataConfig","JobDetails","JobStatus","OutputDataConfig","TextTranslationJobProperties","DescribeTextTranslationJobResponse","GetParallelDataRequest","ParallelDataDataLocation","ParallelDataProperties","GetParallelDataResponse","TerminologyDataFormat","GetTerminologyRequest","TerminologyDataLocation","TerminologyProperties","GetTerminologyResponse","MergeStrategy","TerminologyData","File","ImportTerminologyRequest","ImportTerminologyResponse","ListParallelDataRequest","ListParallelDataResponse","ListTerminologiesRequest","ListTerminologiesResponse","InvalidFilterException","TextTranslationJobFilter","ListTextTranslationJobsRequest","ListTextTranslationJobsResponse","StartTextTranslationJobRequest","StartTextTranslationJobResponse","UnsupportedLanguagePairException","StopTextTranslationJobRequest","StopTextTranslationJobResponse","DetectedLanguageLowConfidenceException","ServiceUnavailableException","TextSizeLimitExceededException","TranslateTextRequest","TranslateTextResponse","UpdateParallelDataRequest","UpdateParallelDataResponse"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-sdk\\client-translate\\models\\models_0.ts"],"sourcesContent":["import { SENSITIVE_STRING, SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\n\n/**\n * <p>The term being translated by the custom terminology.</p>\n */\nexport interface Term {\n  /**\n   * <p>The source text of the term being translated by the custom terminology.</p>\n   */\n  SourceText?: string;\n\n  /**\n   * <p>The target text of the term being translated by the custom terminology.</p>\n   */\n  TargetText?: string;\n}\n\nexport namespace Term {\n  export const filterSensitiveLog = (obj: Term): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The custom terminology applied to the input text by Amazon Translate for the translated text\n *       response. This is optional in the response and will only be present if you specified\n *       terminology input in the request. Currently, only one terminology can be applied per\n *       TranslateText request.</p>\n */\nexport interface AppliedTerminology {\n  /**\n   * <p>The name of the custom terminology applied to the input text by Amazon Translate for the translated\n   *       text response.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The specific terms of the custom terminology applied to the input text by Amazon Translate for the\n   *       translated text response. A maximum of 250 terms will be returned, and the specific terms\n   *       applied will be the first 250 terms in the source text. </p>\n   */\n  Terms?: Term[];\n}\n\nexport namespace AppliedTerminology {\n  export const filterSensitiveLog = (obj: AppliedTerminology): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>There was a conflict processing the request. Try your request again.</p>\n */\nexport interface ConflictException extends __SmithyException, $MetadataBearer {\n  name: \"ConflictException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ConflictException {\n  export const filterSensitiveLog = (obj: ConflictException): any => ({\n    ...obj,\n  });\n}\n\nexport enum EncryptionKeyType {\n  KMS = \"KMS\",\n}\n\n/**\n * <p>The encryption key used to encrypt this object.</p>\n */\nexport interface EncryptionKey {\n  /**\n   * <p>The type of encryption key used by Amazon Translate to encrypt custom terminologies.</p>\n   */\n  Type: EncryptionKeyType | string | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the encryption key being used to encrypt the custom\n   *       terminology.</p>\n   */\n  Id: string | undefined;\n}\n\nexport namespace EncryptionKey {\n  export const filterSensitiveLog = (obj: EncryptionKey): any => ({\n    ...obj,\n  });\n}\n\nexport enum ParallelDataFormat {\n  CSV = \"CSV\",\n  TMX = \"TMX\",\n  TSV = \"TSV\",\n}\n\n/**\n * <p>Specifies the format and S3 location of the parallel data input file.</p>\n */\nexport interface ParallelDataConfig {\n  /**\n   * <p>The URI of the Amazon S3 folder that contains the parallel data input file. The folder\n   *       must be in the same Region as the API endpoint you are calling.</p>\n   */\n  S3Uri: string | undefined;\n\n  /**\n   * <p>The format of the parallel data input file.</p>\n   */\n  Format: ParallelDataFormat | string | undefined;\n}\n\nexport namespace ParallelDataConfig {\n  export const filterSensitiveLog = (obj: ParallelDataConfig): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateParallelDataRequest {\n  /**\n   * <p>A custom name for the parallel data resource in Amazon Translate. You must assign a name\n   *       that is unique in the account and region.</p>\n   */\n  Name: string | undefined;\n\n  /**\n   * <p>A custom description for the parallel data resource in Amazon Translate.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p>Specifies the format and S3 location of the parallel data input file.</p>\n   */\n  ParallelDataConfig: ParallelDataConfig | undefined;\n\n  /**\n   * <p>The encryption key used to encrypt this object.</p>\n   */\n  EncryptionKey?: EncryptionKey;\n\n  /**\n   * <p>A unique identifier for the request. This token is automatically generated when you use\n   *       Amazon Translate through an AWS SDK.</p>\n   */\n  ClientToken?: string;\n}\n\nexport namespace CreateParallelDataRequest {\n  export const filterSensitiveLog = (obj: CreateParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum ParallelDataStatus {\n  ACTIVE = \"ACTIVE\",\n  CREATING = \"CREATING\",\n  DELETING = \"DELETING\",\n  FAILED = \"FAILED\",\n  UPDATING = \"UPDATING\",\n}\n\nexport interface CreateParallelDataResponse {\n  /**\n   * <p>The custom name that you assigned to the parallel data resource.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The status of the parallel data resource. When the resource is ready for you to use, the\n   *       status is <code>ACTIVE</code>.</p>\n   */\n  Status?: ParallelDataStatus | string;\n}\n\nexport namespace CreateParallelDataResponse {\n  export const filterSensitiveLog = (obj: CreateParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An internal server error occurred. Retry your request.</p>\n */\nexport interface InternalServerException extends __SmithyException, $MetadataBearer {\n  name: \"InternalServerException\";\n  $fault: \"server\";\n  Message?: string;\n}\n\nexport namespace InternalServerException {\n  export const filterSensitiveLog = (obj: InternalServerException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The value of the parameter is invalid. Review the value of the parameter you are using to\n *       correct it, and then retry your operation.</p>\n */\nexport interface InvalidParameterValueException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidParameterValueException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace InvalidParameterValueException {\n  export const filterSensitiveLog = (obj: InvalidParameterValueException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> The request that you made is invalid. Check your request to determine why it's invalid\n *       and then retry the request. </p>\n */\nexport interface InvalidRequestException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidRequestException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace InvalidRequestException {\n  export const filterSensitiveLog = (obj: InvalidRequestException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified limit has been exceeded. Review your request and retry it with a quantity\n *       below the stated limit.</p>\n */\nexport interface LimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"LimitExceededException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace LimitExceededException {\n  export const filterSensitiveLog = (obj: LimitExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> You have made too many requests within a short period of time. Wait for a short time and\n *       then try your request again.</p>\n */\nexport interface TooManyRequestsException extends __SmithyException, $MetadataBearer {\n  name: \"TooManyRequestsException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace TooManyRequestsException {\n  export const filterSensitiveLog = (obj: TooManyRequestsException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Another modification is being made. That modification must complete before you can make\n *       your change.</p>\n */\nexport interface ConcurrentModificationException extends __SmithyException, $MetadataBearer {\n  name: \"ConcurrentModificationException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ConcurrentModificationException {\n  export const filterSensitiveLog = (obj: ConcurrentModificationException): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteParallelDataRequest {\n  /**\n   * <p>The name of the parallel data resource that is being deleted.</p>\n   */\n  Name: string | undefined;\n}\n\nexport namespace DeleteParallelDataRequest {\n  export const filterSensitiveLog = (obj: DeleteParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteParallelDataResponse {\n  /**\n   * <p>The name of the parallel data resource that is being deleted.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The status of the parallel data deletion.</p>\n   */\n  Status?: ParallelDataStatus | string;\n}\n\nexport namespace DeleteParallelDataResponse {\n  export const filterSensitiveLog = (obj: DeleteParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The resource you are looking for has not been found. Review the resource you're looking\n *       for and see if a different resource will accomplish your needs before retrying the revised\n *       request.</p>\n */\nexport interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceNotFoundException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ResourceNotFoundException {\n  export const filterSensitiveLog = (obj: ResourceNotFoundException): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteTerminologyRequest {\n  /**\n   * <p>The name of the custom terminology being deleted. </p>\n   */\n  Name: string | undefined;\n}\n\nexport namespace DeleteTerminologyRequest {\n  export const filterSensitiveLog = (obj: DeleteTerminologyRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeTextTranslationJobRequest {\n  /**\n   * <p>The identifier that Amazon Translate generated for the job. The <a>StartTextTranslationJob</a> operation returns this identifier in its\n   *       response.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribeTextTranslationJobRequest {\n  export const filterSensitiveLog = (obj: DescribeTextTranslationJobRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The input configuration properties for requesting a batch translation job.</p>\n */\nexport interface InputDataConfig {\n  /**\n   * <p>The URI of the AWS S3 folder that contains the input file. The folder must be in the\n   *       same Region as the API endpoint you are calling.</p>\n   */\n  S3Uri: string | undefined;\n\n  /**\n   * <p>Describes the format of the data that you submit to Amazon Translate as input. You can\n   *       specify one of the following multipurpose internet mail extension (MIME) types:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>text/html</code>: The input data consists of one or more HTML files. Amazon\n   *           Translate translates only the text that resides in the <code>html</code> element in each\n   *           file.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>text/plain</code>: The input data consists of one or more unformatted text\n   *           files. Amazon Translate translates every character in this type of input.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>application/vnd.openxmlformats-officedocument.wordprocessingml.document</code>:\n   *           The input data consists of one or more Word documents (.docx).</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>application/vnd.openxmlformats-officedocument.presentationml.presentation</code>:\n   *           The input data consists of one or more PowerPoint Presentation files (.pptx).</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code>: The\n   *           input data consists of one or more Excel Workbook files (.xlsx).</p>\n   *             </li>\n   *          </ul>\n   *          <important>\n   *             <p>If you structure your input data as HTML, ensure that you set this parameter to\n   *           <code>text/html</code>. By doing so, you cut costs by limiting the translation to the\n   *         contents of the <code>html</code> element in each file. Otherwise, if you set this parameter\n   *         to <code>text/plain</code>, your costs will cover the translation of every character.</p>\n   *          </important>\n   */\n  ContentType: string | undefined;\n}\n\nexport namespace InputDataConfig {\n  export const filterSensitiveLog = (obj: InputDataConfig): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The number of documents successfully and unsuccessfully processed during a translation\n *       job.</p>\n */\nexport interface JobDetails {\n  /**\n   * <p>The number of documents successfully processed during a translation job.</p>\n   */\n  TranslatedDocumentsCount?: number;\n\n  /**\n   * <p>The number of documents that could not be processed during a translation job.</p>\n   */\n  DocumentsWithErrorsCount?: number;\n\n  /**\n   * <p>The number of documents used as input in a translation job.</p>\n   */\n  InputDocumentsCount?: number;\n}\n\nexport namespace JobDetails {\n  export const filterSensitiveLog = (obj: JobDetails): any => ({\n    ...obj,\n  });\n}\n\nexport enum JobStatus {\n  COMPLETED = \"COMPLETED\",\n  COMPLETED_WITH_ERROR = \"COMPLETED_WITH_ERROR\",\n  FAILED = \"FAILED\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  STOPPED = \"STOPPED\",\n  STOP_REQUESTED = \"STOP_REQUESTED\",\n  SUBMITTED = \"SUBMITTED\",\n}\n\n/**\n * <p>The output configuration properties for a batch translation job.</p>\n */\nexport interface OutputDataConfig {\n  /**\n   * <p>The URI of the S3 folder that contains a translation job's output file. The folder must\n   *       be in the same Region as the API endpoint that you are calling.</p>\n   */\n  S3Uri: string | undefined;\n}\n\nexport namespace OutputDataConfig {\n  export const filterSensitiveLog = (obj: OutputDataConfig): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a translation job.</p>\n */\nexport interface TextTranslationJobProperties {\n  /**\n   * <p>The ID of the translation job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The user-defined name of the translation job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The status of the translation job.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>The number of documents successfully and unsuccessfully processed during the translation\n   *       job.</p>\n   */\n  JobDetails?: JobDetails;\n\n  /**\n   * <p>The language code of the language of the source text. The language must be a language\n   *       supported by Amazon Translate.</p>\n   */\n  SourceLanguageCode?: string;\n\n  /**\n   * <p>The language code of the language of the target text. The language must be a language\n   *       supported by Amazon Translate.</p>\n   */\n  TargetLanguageCodes?: string[];\n\n  /**\n   * <p>A list containing the names of the terminologies applied to a translation job. Only one\n   *       terminology can be applied per <a>StartTextTranslationJob</a> request at this\n   *       time.</p>\n   */\n  TerminologyNames?: string[];\n\n  /**\n   * <p>A list containing the names of the parallel data resources applied to the translation\n   *       job.</p>\n   */\n  ParallelDataNames?: string[];\n\n  /**\n   * <p>An explanation of any errors that may have occured during the translation job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time at which the translation job was submitted.</p>\n   */\n  SubmittedTime?: Date;\n\n  /**\n   * <p>The time at which the translation job ended.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The input configuration properties that were specified when the job was requested.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output configuration properties that were specified when the job was requested.</p>\n   */\n  OutputDataConfig?: OutputDataConfig;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of an AWS Identity Access and Management (IAM) role\n   *       that granted Amazon Translate read access to the job's input data.</p>\n   */\n  DataAccessRoleArn?: string;\n}\n\nexport namespace TextTranslationJobProperties {\n  export const filterSensitiveLog = (obj: TextTranslationJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeTextTranslationJobResponse {\n  /**\n   * <p>An object that contains the properties associated with an asynchronous batch translation\n   *       job.</p>\n   */\n  TextTranslationJobProperties?: TextTranslationJobProperties;\n}\n\nexport namespace DescribeTextTranslationJobResponse {\n  export const filterSensitiveLog = (obj: DescribeTextTranslationJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetParallelDataRequest {\n  /**\n   * <p>The name of the parallel data resource that is being retrieved.</p>\n   */\n  Name: string | undefined;\n}\n\nexport namespace GetParallelDataRequest {\n  export const filterSensitiveLog = (obj: GetParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The location of the most recent parallel data input file that was successfully imported\n *       into Amazon Translate.</p>\n */\nexport interface ParallelDataDataLocation {\n  /**\n   * <p>Describes the repository that contains the parallel data input file.</p>\n   */\n  RepositoryType: string | undefined;\n\n  /**\n   * <p>The Amazon S3 location of the parallel data input file. The location is returned as a\n   *       presigned URL to that has a 30 minute expiration.</p>\n   */\n  Location: string | undefined;\n}\n\nexport namespace ParallelDataDataLocation {\n  export const filterSensitiveLog = (obj: ParallelDataDataLocation): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The properties of a parallel data resource.</p>\n */\nexport interface ParallelDataProperties {\n  /**\n   * <p>The custom name assigned to the parallel data resource.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the parallel data resource.</p>\n   */\n  Arn?: string;\n\n  /**\n   * <p>The description assigned to the parallel data resource.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p>The status of the parallel data resource. When the parallel data is ready for you to use,\n   *       the status is <code>ACTIVE</code>.</p>\n   */\n  Status?: ParallelDataStatus | string;\n\n  /**\n   * <p>The source language of the translations in the parallel data file.</p>\n   */\n  SourceLanguageCode?: string;\n\n  /**\n   * <p>The language codes for the target languages available in the parallel data file. All\n   *       possible target languages are returned as an array.</p>\n   */\n  TargetLanguageCodes?: string[];\n\n  /**\n   * <p>Specifies the format and S3 location of the parallel data input file.</p>\n   */\n  ParallelDataConfig?: ParallelDataConfig;\n\n  /**\n   * <p>Additional information from Amazon Translate about the parallel data resource. </p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The number of UTF-8 characters that Amazon Translate imported from the parallel data input\n   *       file. This number includes only the characters in your translation examples. It does not\n   *       include characters that are used to format your file. For example, if you provided a\n   *       Translation Memory Exchange (.tmx) file, this number does not include the tags.</p>\n   */\n  ImportedDataSize?: number;\n\n  /**\n   * <p>The number of records successfully imported from the parallel data input file.</p>\n   */\n  ImportedRecordCount?: number;\n\n  /**\n   * <p>The number of records unsuccessfully imported from the parallel data input file.</p>\n   */\n  FailedRecordCount?: number;\n\n  /**\n   * <p>The number of items in the input file that Amazon Translate skipped when you created or\n   *       updated the parallel data resource. For example, Amazon Translate skips empty records, empty\n   *       target texts, and empty lines.</p>\n   */\n  SkippedRecordCount?: number;\n\n  /**\n   * <p>The encryption key used to encrypt this object.</p>\n   */\n  EncryptionKey?: EncryptionKey;\n\n  /**\n   * <p>The time at which the parallel data resource was created.</p>\n   */\n  CreatedAt?: Date;\n\n  /**\n   * <p>The time at which the parallel data resource was last updated.</p>\n   */\n  LastUpdatedAt?: Date;\n\n  /**\n   * <p>The status of the most recent update attempt for the parallel data resource.</p>\n   */\n  LatestUpdateAttemptStatus?: ParallelDataStatus | string;\n\n  /**\n   * <p>The time that the most recent update was attempted.</p>\n   */\n  LatestUpdateAttemptAt?: Date;\n}\n\nexport namespace ParallelDataProperties {\n  export const filterSensitiveLog = (obj: ParallelDataProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetParallelDataResponse {\n  /**\n   * <p>The properties of the parallel data resource that is being retrieved.</p>\n   */\n  ParallelDataProperties?: ParallelDataProperties;\n\n  /**\n   * <p>The location of the most recent parallel data input file that was successfully imported\n   *       into Amazon Translate. The location is returned as a presigned URL that has a 30 minute\n   *       expiration.</p>\n   */\n  DataLocation?: ParallelDataDataLocation;\n\n  /**\n   * <p>The Amazon S3 location of a file that provides any errors or warnings that were produced\n   *       by your input file. This file was created when Amazon Translate attempted to create a parallel\n   *       data resource. The location is returned as a presigned URL to that has a 30 minute\n   *       expiration.</p>\n   */\n  AuxiliaryDataLocation?: ParallelDataDataLocation;\n\n  /**\n   * <p>The Amazon S3 location of a file that provides any errors or warnings that were produced\n   *       by your input file. This file was created when Amazon Translate attempted to update a parallel\n   *       data resource. The location is returned as a presigned URL to that has a 30 minute\n   *       expiration.</p>\n   */\n  LatestUpdateAttemptAuxiliaryDataLocation?: ParallelDataDataLocation;\n}\n\nexport namespace GetParallelDataResponse {\n  export const filterSensitiveLog = (obj: GetParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n\nexport enum TerminologyDataFormat {\n  CSV = \"CSV\",\n  TMX = \"TMX\",\n}\n\nexport interface GetTerminologyRequest {\n  /**\n   * <p>The name of the custom terminology being retrieved.</p>\n   */\n  Name: string | undefined;\n\n  /**\n   * <p>The data format of the custom terminology being retrieved, either CSV or TMX.</p>\n   */\n  TerminologyDataFormat: TerminologyDataFormat | string | undefined;\n}\n\nexport namespace GetTerminologyRequest {\n  export const filterSensitiveLog = (obj: GetTerminologyRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The location of the custom terminology data.</p>\n */\nexport interface TerminologyDataLocation {\n  /**\n   * <p>The repository type for the custom terminology data.</p>\n   */\n  RepositoryType: string | undefined;\n\n  /**\n   * <p>The location of the custom terminology data.</p>\n   */\n  Location: string | undefined;\n}\n\nexport namespace TerminologyDataLocation {\n  export const filterSensitiveLog = (obj: TerminologyDataLocation): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The properties of the custom terminology.</p>\n */\nexport interface TerminologyProperties {\n  /**\n   * <p>The name of the custom terminology.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The description of the custom terminology properties.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p> The Amazon Resource Name (ARN) of the custom terminology. </p>\n   */\n  Arn?: string;\n\n  /**\n   * <p>The language code for the source text of the translation request for which the custom\n   *       terminology is being used.</p>\n   */\n  SourceLanguageCode?: string;\n\n  /**\n   * <p>The language codes for the target languages available with the custom terminology file.\n   *       All possible target languages are returned in array.</p>\n   */\n  TargetLanguageCodes?: string[];\n\n  /**\n   * <p>The encryption key for the custom terminology.</p>\n   */\n  EncryptionKey?: EncryptionKey;\n\n  /**\n   * <p>The size of the file used when importing a custom terminology.</p>\n   */\n  SizeBytes?: number;\n\n  /**\n   * <p>The number of terms included in the custom terminology.</p>\n   */\n  TermCount?: number;\n\n  /**\n   * <p>The time at which the custom terminology was created, based on the timestamp.</p>\n   */\n  CreatedAt?: Date;\n\n  /**\n   * <p>The time at which the custom terminology was last update, based on the timestamp.</p>\n   */\n  LastUpdatedAt?: Date;\n}\n\nexport namespace TerminologyProperties {\n  export const filterSensitiveLog = (obj: TerminologyProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetTerminologyResponse {\n  /**\n   * <p>The properties of the custom terminology being retrieved.</p>\n   */\n  TerminologyProperties?: TerminologyProperties;\n\n  /**\n   * <p>The data location of the custom terminology being retrieved. The custom terminology file\n   *       is returned in a presigned url that has a 30 minute expiration.</p>\n   */\n  TerminologyDataLocation?: TerminologyDataLocation;\n}\n\nexport namespace GetTerminologyResponse {\n  export const filterSensitiveLog = (obj: GetTerminologyResponse): any => ({\n    ...obj,\n  });\n}\n\nexport enum MergeStrategy {\n  OVERWRITE = \"OVERWRITE\",\n}\n\n/**\n * <p>The data associated with the custom terminology.</p>\n */\nexport interface TerminologyData {\n  /**\n   * <p>The file containing the custom terminology data. Your version of the AWS SDK performs a\n   *       Base64-encoding on this field before sending a request to the AWS service. Users of the SDK\n   *       should not perform Base64-encoding themselves.</p>\n   */\n  File: Uint8Array | undefined;\n\n  /**\n   * <p>The data format of the custom terminology. Either CSV or TMX.</p>\n   */\n  Format: TerminologyDataFormat | string | undefined;\n}\n\nexport namespace TerminologyData {\n  export const filterSensitiveLog = (obj: TerminologyData): any => ({\n    ...obj,\n    ...(obj.File && { File: SENSITIVE_STRING }),\n  });\n}\n\nexport interface ImportTerminologyRequest {\n  /**\n   * <p>The name of the custom terminology being imported.</p>\n   */\n  Name: string | undefined;\n\n  /**\n   * <p>The merge strategy of the custom terminology being imported. Currently, only the OVERWRITE\n   *       merge strategy is supported. In this case, the imported terminology will overwrite an existing\n   *       terminology of the same name.</p>\n   */\n  MergeStrategy: MergeStrategy | string | undefined;\n\n  /**\n   * <p>The description of the custom terminology being imported.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p>The terminology data for the custom terminology being imported.</p>\n   */\n  TerminologyData: TerminologyData | undefined;\n\n  /**\n   * <p>The encryption key for the custom terminology being imported.</p>\n   */\n  EncryptionKey?: EncryptionKey;\n}\n\nexport namespace ImportTerminologyRequest {\n  export const filterSensitiveLog = (obj: ImportTerminologyRequest): any => ({\n    ...obj,\n    ...(obj.TerminologyData && { TerminologyData: TerminologyData.filterSensitiveLog(obj.TerminologyData) }),\n  });\n}\n\nexport interface ImportTerminologyResponse {\n  /**\n   * <p>The properties of the custom terminology being imported.</p>\n   */\n  TerminologyProperties?: TerminologyProperties;\n}\n\nexport namespace ImportTerminologyResponse {\n  export const filterSensitiveLog = (obj: ImportTerminologyResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListParallelDataRequest {\n  /**\n   * <p>A string that specifies the next page of results to return in a paginated response.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of parallel data resources returned for each request.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListParallelDataRequest {\n  export const filterSensitiveLog = (obj: ListParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListParallelDataResponse {\n  /**\n   * <p>The properties of the parallel data resources returned by this request.</p>\n   */\n  ParallelDataPropertiesList?: ParallelDataProperties[];\n\n  /**\n   * <p>The string to use in a subsequent request to get the next page of results in a paginated\n   *       response. This value is null if there are no additional pages.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListParallelDataResponse {\n  export const filterSensitiveLog = (obj: ListParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTerminologiesRequest {\n  /**\n   * <p>If the result of the request to ListTerminologies was truncated, include the NextToken to\n   *       fetch the next group of custom terminologies. </p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of custom terminologies returned per list request.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListTerminologiesRequest {\n  export const filterSensitiveLog = (obj: ListTerminologiesRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTerminologiesResponse {\n  /**\n   * <p>The properties list of the custom terminologies returned on the list request.</p>\n   */\n  TerminologyPropertiesList?: TerminologyProperties[];\n\n  /**\n   * <p> If the response to the ListTerminologies was truncated, the NextToken fetches the next\n   *       group of custom terminologies.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListTerminologiesResponse {\n  export const filterSensitiveLog = (obj: ListTerminologiesResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The filter specified for the operation is invalid. Specify a different filter.</p>\n */\nexport interface InvalidFilterException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidFilterException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace InvalidFilterException {\n  export const filterSensitiveLog = (obj: InvalidFilterException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of translation jobs. For more information, see\n *         <a>ListTextTranslationJobs</a>.</p>\n */\nexport interface TextTranslationJobFilter {\n  /**\n   * <p>Filters the list of jobs by name.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list of jobs based by job status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing and\n   *       returns only the jobs submitted before the specified time. Jobs are returned in ascending\n   *       order, oldest to newest.</p>\n   */\n  SubmittedBeforeTime?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing and\n   *       returns only the jobs submitted after the specified time. Jobs are returned in descending\n   *       order, newest to oldest.</p>\n   */\n  SubmittedAfterTime?: Date;\n}\n\nexport namespace TextTranslationJobFilter {\n  export const filterSensitiveLog = (obj: TextTranslationJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTextTranslationJobsRequest {\n  /**\n   * <p>The parameters that specify which batch translation jobs to retrieve. Filters include job\n   *       name, job status, and submission time. You can only set one filter at a time.</p>\n   */\n  Filter?: TextTranslationJobFilter;\n\n  /**\n   * <p>The token to request the next page of results.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default value is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListTextTranslationJobsRequest {\n  export const filterSensitiveLog = (obj: ListTextTranslationJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTextTranslationJobsResponse {\n  /**\n   * <p>A list containing the properties of each job that is returned.</p>\n   */\n  TextTranslationJobPropertiesList?: TextTranslationJobProperties[];\n\n  /**\n   * <p>The token to use to retreive the next page of results. This value is <code>null</code>\n   *       when there are no more results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListTextTranslationJobsResponse {\n  export const filterSensitiveLog = (obj: ListTextTranslationJobsResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartTextTranslationJobRequest {\n  /**\n   * <p>The name of the batch translation job to be performed.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Specifies the format and S3 location of the input documents for the translation\n   *       job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Specifies the S3 folder to which your job output will be saved.\n   *       </p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of an AWS Identity Access and Management (IAM) role\n   *       that grants Amazon Translate read access to your input data. For more nformation, see <a>identity-and-access-management</a>.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>The language code of the input language. For a list of language codes, see <a>what-is-languages</a>.</p>\n   *          <p>Amazon Translate does not automatically detect a source language during batch translation\n   *       jobs.</p>\n   */\n  SourceLanguageCode: string | undefined;\n\n  /**\n   * <p>The language code of the output language.</p>\n   */\n  TargetLanguageCodes: string[] | undefined;\n\n  /**\n   * <p>The name of the terminology to use in the batch translation job. For a list of available\n   *       terminologies, use the <a>ListTerminologies</a> operation.</p>\n   */\n  TerminologyNames?: string[];\n\n  /**\n   * <p>The names of the parallel data resources to use in the batch translation job. For a list\n   *       of available parallel data resources, use the <a>ListParallelData</a>\n   *       operation.</p>\n   */\n  ParallelDataNames?: string[];\n\n  /**\n   * <p>A unique identifier for the request. This token is auto-generated when using the Amazon Translate\n   *       SDK.</p>\n   */\n  ClientToken?: string;\n}\n\nexport namespace StartTextTranslationJobRequest {\n  export const filterSensitiveLog = (obj: StartTextTranslationJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartTextTranslationJobResponse {\n  /**\n   * <p>The identifier generated for the job. To get the status of a job, use this ID with the\n   *         <a>DescribeTextTranslationJob</a> operation.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the job. Possible values include:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>SUBMITTED</code> - The job has been received and is queued for\n   *           processing.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>IN_PROGRESS</code> - Amazon Translate is processing the job.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>COMPLETED</code> - The job was successfully completed and the output is\n   *           available.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>COMPLETED_WITH_ERROR</code> - The job was completed with errors. The errors can\n   *           be analyzed in the job's output.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>FAILED</code> - The job did not complete. To get details, use the <a>DescribeTextTranslationJob</a> operation.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>STOP_REQUESTED</code> - The user who started the job has requested that it be\n   *           stopped.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>STOPPED</code> - The job has been stopped.</p>\n   *             </li>\n   *          </ul>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartTextTranslationJobResponse {\n  export const filterSensitiveLog = (obj: StartTextTranslationJobResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Amazon Translate does not support translation from the language of the source text into the requested\n *       target language. For more information, see <a>how-to-error-msg</a>. </p>\n */\nexport interface UnsupportedLanguagePairException extends __SmithyException, $MetadataBearer {\n  name: \"UnsupportedLanguagePairException\";\n  $fault: \"client\";\n  Message?: string;\n  /**\n   * <p>The language code for the language of the input text. </p>\n   */\n  SourceLanguageCode?: string;\n\n  /**\n   * <p>The language code for the language of the translated text. </p>\n   */\n  TargetLanguageCode?: string;\n}\n\nexport namespace UnsupportedLanguagePairException {\n  export const filterSensitiveLog = (obj: UnsupportedLanguagePairException): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopTextTranslationJobRequest {\n  /**\n   * <p>The job ID of the job to be stopped.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace StopTextTranslationJobRequest {\n  export const filterSensitiveLog = (obj: StopTextTranslationJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopTextTranslationJobResponse {\n  /**\n   * <p>The job ID of the stopped batch translation job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the designated job. Upon successful completion, the job's status will be\n   *         <code>STOPPED</code>.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StopTextTranslationJobResponse {\n  export const filterSensitiveLog = (obj: StopTextTranslationJobResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The confidence that Amazon Comprehend accurately detected the source language is low. If a\n *       low confidence level is acceptable for your application, you can use the language in the\n *       exception to call Amazon Translate again. For more information, see the <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html\">DetectDominantLanguage</a> operation in the <i>Amazon Comprehend Developer\n *         Guide</i>. </p>\n */\nexport interface DetectedLanguageLowConfidenceException extends __SmithyException, $MetadataBearer {\n  name: \"DetectedLanguageLowConfidenceException\";\n  $fault: \"client\";\n  Message?: string;\n  /**\n   * <p>The language code of the auto-detected language from Amazon Comprehend.</p>\n   */\n  DetectedLanguageCode?: string;\n}\n\nexport namespace DetectedLanguageLowConfidenceException {\n  export const filterSensitiveLog = (obj: DetectedLanguageLowConfidenceException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The Amazon Translate service is temporarily unavailable. Please wait a bit and then retry your\n *       request.</p>\n */\nexport interface ServiceUnavailableException extends __SmithyException, $MetadataBearer {\n  name: \"ServiceUnavailableException\";\n  $fault: \"server\";\n  Message?: string;\n}\n\nexport namespace ServiceUnavailableException {\n  export const filterSensitiveLog = (obj: ServiceUnavailableException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or\n *       use a smaller document and then retry your request. </p>\n */\nexport interface TextSizeLimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"TextSizeLimitExceededException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace TextSizeLimitExceededException {\n  export const filterSensitiveLog = (obj: TextSizeLimitExceededException): any => ({\n    ...obj,\n  });\n}\n\nexport interface TranslateTextRequest {\n  /**\n   * <p>The text to translate. The text string can be a maximum of 5,000 bytes long. Depending on\n   *       your character set, this may be fewer than 5,000 characters.</p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p>The name of the terminology list file to be used in the TranslateText request. You can use\n   *       1 terminology list at most in a <code>TranslateText</code> request. Terminology lists can\n   *       contain a maximum of 256 terms.</p>\n   */\n  TerminologyNames?: string[];\n\n  /**\n   * <p>The language code for the language of the source text. The language must be a language\n   *       supported by Amazon Translate. For a list of language codes, see <a>what-is-languages</a>.</p>\n   *          <p>To have Amazon Translate determine the source language of your text, you can specify\n   *         <code>auto</code> in the <code>SourceLanguageCode</code> field. If you specify\n   *         <code>auto</code>, Amazon Translate will call <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/comprehend-general.html\">Amazon\n   *         Comprehend</a> to determine the source language.</p>\n   */\n  SourceLanguageCode: string | undefined;\n\n  /**\n   * <p>The language code requested for the language of the target text. The language must be a\n   *       language supported by Amazon Translate.</p>\n   */\n  TargetLanguageCode: string | undefined;\n}\n\nexport namespace TranslateTextRequest {\n  export const filterSensitiveLog = (obj: TranslateTextRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface TranslateTextResponse {\n  /**\n   * <p>The translated text.</p>\n   */\n  TranslatedText: string | undefined;\n\n  /**\n   * <p>The language code for the language of the source text.</p>\n   */\n  SourceLanguageCode: string | undefined;\n\n  /**\n   * <p>The language code for the language of the target text. </p>\n   */\n  TargetLanguageCode: string | undefined;\n\n  /**\n   * <p>The names of the custom terminologies applied to the input text by Amazon Translate for the\n   *       translated text response.</p>\n   */\n  AppliedTerminologies?: AppliedTerminology[];\n}\n\nexport namespace TranslateTextResponse {\n  export const filterSensitiveLog = (obj: TranslateTextResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface UpdateParallelDataRequest {\n  /**\n   * <p>The name of the parallel data resource being updated.</p>\n   */\n  Name: string | undefined;\n\n  /**\n   * <p>A custom description for the parallel data resource in Amazon Translate.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p>Specifies the format and S3 location of the parallel data input file.</p>\n   */\n  ParallelDataConfig: ParallelDataConfig | undefined;\n\n  /**\n   * <p>A unique identifier for the request. This token is automatically generated when you use\n   *       Amazon Translate through an AWS SDK.</p>\n   */\n  ClientToken?: string;\n}\n\nexport namespace UpdateParallelDataRequest {\n  export const filterSensitiveLog = (obj: UpdateParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface UpdateParallelDataResponse {\n  /**\n   * <p>The name of the parallel data resource being updated.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The status of the parallel data resource that you are attempting to update. Your update\n   *       request is accepted only if this status is either <code>ACTIVE</code> or\n   *       <code>FAILED</code>.</p>\n   */\n  Status?: ParallelDataStatus | string;\n\n  /**\n   * <p>The status of the parallel data update attempt. When the updated parallel data resource is\n   *       ready for you to use, the status is <code>ACTIVE</code>.</p>\n   */\n  LatestUpdateAttemptStatus?: ParallelDataStatus | string;\n\n  /**\n   * <p>The time that the most recent update was attempted.</p>\n   */\n  LatestUpdateAttemptAt?: Date;\n}\n\nexport namespace UpdateParallelDataResponse {\n  export const filterSensitiveLog = (obj: UpdateParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}