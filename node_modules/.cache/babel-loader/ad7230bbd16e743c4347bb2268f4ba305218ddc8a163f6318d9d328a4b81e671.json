{"ast":null,"code":"'use strict';\n\nvar $pow = require('math-intrinsics/pow');\nmodule.exports = function bytesAsFloat64(rawBytes) {\n  // return new $Float64Array(new $Uint8Array(rawBytes).buffer)[0];\n\n  /*\n     Let value be the byte elements of rawBytes concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary64 value.\n  If value is an IEEE 754-2008 binary64 NaN value, return the NaN Number value.\n  Return the Number value that corresponds to value.\n     */\n  var sign = rawBytes[7] & 0x80 ? -1 : 1; // first bit\n  var exponent = (rawBytes[7] & 0x7F) << 4 // 7 bits from index 7\n  | (rawBytes[6] & 0xF0) >> 4; // 4 bits from index 6\n  var mantissa = (rawBytes[6] & 0x0F) * 0x1000000000000 // 4 bits from index 6\n  + rawBytes[5] * 0x10000000000 // 8 bits from index 5\n  + rawBytes[4] * 0x100000000 // 8 bits from index 4\n  + rawBytes[3] * 0x1000000 // 8 bits from index 3\n  + rawBytes[2] * 0x10000 // 8 bits from index 2\n  + rawBytes[1] * 0x100 // 8 bits from index 1\n  + rawBytes[0]; // 8 bits from index 0\n\n  if (exponent === 0 && mantissa === 0) {\n    return sign * 0;\n  }\n  if (exponent === 0x7FF && mantissa !== 0) {\n    return NaN;\n  }\n  if (exponent === 0x7FF && mantissa === 0) {\n    return sign * Infinity;\n  }\n  exponent -= 1023; // subtract the bias\n\n  // Handle subnormal numbers\n  if (exponent === -1023) {\n    return sign * mantissa * 5e-324; // $pow(2, -1022 - 52)\n  }\n  return sign * (1 + mantissa / 0x10000000000000) * $pow(2, exponent);\n};","map":{"version":3,"names":["$pow","require","module","exports","bytesAsFloat64","rawBytes","sign","exponent","mantissa","NaN","Infinity"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/helpers/bytesAsFloat64.js"],"sourcesContent":["'use strict';\n\nvar $pow = require('math-intrinsics/pow');\n\nmodule.exports = function bytesAsFloat64(rawBytes) {\n\t// return new $Float64Array(new $Uint8Array(rawBytes).buffer)[0];\n\n\t/*\n    Let value be the byte elements of rawBytes concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary64 value.\nIf value is an IEEE 754-2008 binary64 NaN value, return the NaN Number value.\nReturn the Number value that corresponds to value.\n    */\n\tvar sign = rawBytes[7] & 0x80 ? -1 : 1; // first bit\n\tvar exponent = ((rawBytes[7] & 0x7F) << 4) // 7 bits from index 7\n        | ((rawBytes[6] & 0xF0) >> 4); // 4 bits from index 6\n\tvar mantissa = ((rawBytes[6] & 0x0F) * 0x1000000000000) // 4 bits from index 6\n        + (rawBytes[5] * 0x10000000000) // 8 bits from index 5\n        + (rawBytes[4] * 0x100000000) // 8 bits from index 4\n        + (rawBytes[3] * 0x1000000) // 8 bits from index 3\n        + (rawBytes[2] * 0x10000) // 8 bits from index 2\n        + (rawBytes[1] * 0x100) // 8 bits from index 1\n        + rawBytes[0]; // 8 bits from index 0\n\n\tif (exponent === 0 && mantissa === 0) {\n\t\treturn sign * 0;\n\t}\n\tif (exponent === 0x7FF && mantissa !== 0) {\n\t\treturn NaN;\n\t}\n\tif (exponent === 0x7FF && mantissa === 0) {\n\t\treturn sign * Infinity;\n\t}\n\n\texponent -= 1023; // subtract the bias\n\n\t// Handle subnormal numbers\n\tif (exponent === -1023) {\n\t\treturn sign * mantissa * 5e-324; // $pow(2, -1022 - 52)\n\t}\n\n\treturn sign * (1 + (mantissa / 0x10000000000000)) * $pow(2, exponent);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAEzCC,MAAM,CAACC,OAAO,GAAG,SAASC,cAAcA,CAACC,QAAQ,EAAE;EAClD;;EAEA;AACD;AACA;AACA;AACA;EACC,IAAIC,IAAI,GAAGD,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACxC,IAAIE,QAAQ,GAAI,CAACF,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,CAAE;EAAA,EACjC,CAACA,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAE,CAAC,CAAC;EACtC,IAAIG,QAAQ,GAAI,CAACH,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,eAAe,CAAE;EAAA,EAC9CA,QAAQ,CAAC,CAAC,CAAC,GAAG,aAAc,CAAC;EAAA,EAC7BA,QAAQ,CAAC,CAAC,CAAC,GAAG,WAAY,CAAC;EAAA,EAC3BA,QAAQ,CAAC,CAAC,CAAC,GAAG,SAAU,CAAC;EAAA,EACzBA,QAAQ,CAAC,CAAC,CAAC,GAAG,OAAQ,CAAC;EAAA,EACvBA,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAM,CAAC;EAAA,EACtBA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEtB,IAAIE,QAAQ,KAAK,CAAC,IAAIC,QAAQ,KAAK,CAAC,EAAE;IACrC,OAAOF,IAAI,GAAG,CAAC;EAChB;EACA,IAAIC,QAAQ,KAAK,KAAK,IAAIC,QAAQ,KAAK,CAAC,EAAE;IACzC,OAAOC,GAAG;EACX;EACA,IAAIF,QAAQ,KAAK,KAAK,IAAIC,QAAQ,KAAK,CAAC,EAAE;IACzC,OAAOF,IAAI,GAAGI,QAAQ;EACvB;EAEAH,QAAQ,IAAI,IAAI,CAAC,CAAC;;EAElB;EACA,IAAIA,QAAQ,KAAK,CAAC,IAAI,EAAE;IACvB,OAAOD,IAAI,GAAGE,QAAQ,GAAG,MAAM,CAAC,CAAC;EAClC;EAEA,OAAOF,IAAI,IAAI,CAAC,GAAIE,QAAQ,GAAG,gBAAiB,CAAC,GAAGR,IAAI,CAAC,CAAC,EAAEO,QAAQ,CAAC;AACtE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}