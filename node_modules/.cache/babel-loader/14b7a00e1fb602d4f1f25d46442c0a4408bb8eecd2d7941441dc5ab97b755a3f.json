{"ast":null,"code":"import createVertex from './create_vertex.js';\nimport createMidpoint from './create_midpoint.js';\nimport * as Constants from '../constants.js';\nfunction createSupplementaryPoints(geojson, options = {}, basePath = null) {\n  const {\n    type,\n    coordinates\n  } = geojson.geometry;\n  const featureId = geojson.properties && geojson.properties.id;\n  let supplementaryPoints = [];\n  if (type === Constants.geojsonTypes.POINT) {\n    // For points, just create a vertex\n    supplementaryPoints.push(createVertex(featureId, coordinates, basePath, isSelectedPath(basePath)));\n  } else if (type === Constants.geojsonTypes.POLYGON) {\n    // Cycle through a Polygon's rings and\n    // process each line\n    coordinates.forEach((line, lineIndex) => {\n      processLine(line, basePath !== null ? `${basePath}.${lineIndex}` : String(lineIndex));\n    });\n  } else if (type === Constants.geojsonTypes.LINE_STRING) {\n    processLine(coordinates, basePath);\n  } else if (type.indexOf(Constants.geojsonTypes.MULTI_PREFIX) === 0) {\n    processMultiGeometry();\n  }\n  function processLine(line, lineBasePath) {\n    let firstPointString = '';\n    let lastVertex = null;\n    line.forEach((point, pointIndex) => {\n      const pointPath = lineBasePath !== undefined && lineBasePath !== null ? `${lineBasePath}.${pointIndex}` : String(pointIndex);\n      const vertex = createVertex(featureId, point, pointPath, isSelectedPath(pointPath));\n\n      // If we're creating midpoints, check if there was a\n      // vertex before this one. If so, add a midpoint\n      // between that vertex and this one.\n      if (options.midpoints && lastVertex) {\n        const midpoint = createMidpoint(featureId, lastVertex, vertex);\n        if (midpoint) {\n          supplementaryPoints.push(midpoint);\n        }\n      }\n      lastVertex = vertex;\n\n      // A Polygon line's last point is the same as the first point. If we're on the last\n      // point, we want to draw a midpoint before it but not another vertex on it\n      // (since we already a vertex there, from the first point).\n      const stringifiedPoint = JSON.stringify(point);\n      if (firstPointString !== stringifiedPoint) {\n        supplementaryPoints.push(vertex);\n      }\n      if (pointIndex === 0) {\n        firstPointString = stringifiedPoint;\n      }\n    });\n  }\n  function isSelectedPath(path) {\n    if (!options.selectedPaths) return false;\n    return options.selectedPaths.indexOf(path) !== -1;\n  }\n\n  // Split a multi-geometry into constituent\n  // geometries, and accumulate the supplementary points\n  // for each of those constituents\n  function processMultiGeometry() {\n    const subType = type.replace(Constants.geojsonTypes.MULTI_PREFIX, '');\n    coordinates.forEach((subCoordinates, index) => {\n      const subFeature = {\n        type: Constants.geojsonTypes.FEATURE,\n        properties: geojson.properties,\n        geometry: {\n          type: subType,\n          coordinates: subCoordinates\n        }\n      };\n      supplementaryPoints = supplementaryPoints.concat(createSupplementaryPoints(subFeature, options, index));\n    });\n  }\n  return supplementaryPoints;\n}\nexport default createSupplementaryPoints;","map":{"version":3,"names":["createVertex","createMidpoint","Constants","createSupplementaryPoints","geojson","options","basePath","type","coordinates","geometry","featureId","properties","id","supplementaryPoints","geojsonTypes","POINT","push","isSelectedPath","POLYGON","forEach","line","lineIndex","processLine","String","LINE_STRING","indexOf","MULTI_PREFIX","processMultiGeometry","lineBasePath","firstPointString","lastVertex","point","pointIndex","pointPath","undefined","vertex","midpoints","midpoint","stringifiedPoint","JSON","stringify","path","selectedPaths","subType","replace","subCoordinates","index","subFeature","FEATURE","concat"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@mapbox/mapbox-gl-draw/src/lib/create_supplementary_points.js"],"sourcesContent":["import createVertex from './create_vertex.js';\nimport createMidpoint from './create_midpoint.js';\nimport * as Constants from '../constants.js';\n\nfunction createSupplementaryPoints(geojson, options = {}, basePath = null) {\n  const { type, coordinates } = geojson.geometry;\n  const featureId = geojson.properties && geojson.properties.id;\n\n  let supplementaryPoints = [];\n\n  if (type === Constants.geojsonTypes.POINT) {\n    // For points, just create a vertex\n    supplementaryPoints.push(createVertex(featureId, coordinates, basePath, isSelectedPath(basePath)));\n  } else if (type === Constants.geojsonTypes.POLYGON) {\n    // Cycle through a Polygon's rings and\n    // process each line\n    coordinates.forEach((line, lineIndex) => {\n      processLine(line, (basePath !== null) ? `${basePath}.${lineIndex}` : String(lineIndex));\n    });\n  } else if (type === Constants.geojsonTypes.LINE_STRING) {\n    processLine(coordinates, basePath);\n  } else if (type.indexOf(Constants.geojsonTypes.MULTI_PREFIX) === 0) {\n    processMultiGeometry();\n  }\n\n  function processLine(line, lineBasePath) {\n    let firstPointString = '';\n    let lastVertex = null;\n    line.forEach((point, pointIndex) => {\n      const pointPath = (lineBasePath !== undefined && lineBasePath !== null) ? `${lineBasePath}.${pointIndex}` : String(pointIndex);\n      const vertex = createVertex(featureId, point, pointPath, isSelectedPath(pointPath));\n\n      // If we're creating midpoints, check if there was a\n      // vertex before this one. If so, add a midpoint\n      // between that vertex and this one.\n      if (options.midpoints && lastVertex) {\n        const midpoint = createMidpoint(featureId, lastVertex, vertex);\n        if (midpoint) {\n          supplementaryPoints.push(midpoint);\n        }\n      }\n      lastVertex = vertex;\n\n      // A Polygon line's last point is the same as the first point. If we're on the last\n      // point, we want to draw a midpoint before it but not another vertex on it\n      // (since we already a vertex there, from the first point).\n      const stringifiedPoint = JSON.stringify(point);\n      if (firstPointString !== stringifiedPoint) {\n        supplementaryPoints.push(vertex);\n      }\n      if (pointIndex === 0) {\n        firstPointString = stringifiedPoint;\n      }\n    });\n  }\n\n  function isSelectedPath(path) {\n    if (!options.selectedPaths) return false;\n    return options.selectedPaths.indexOf(path) !== -1;\n  }\n\n  // Split a multi-geometry into constituent\n  // geometries, and accumulate the supplementary points\n  // for each of those constituents\n  function processMultiGeometry() {\n    const subType = type.replace(Constants.geojsonTypes.MULTI_PREFIX, '');\n    coordinates.forEach((subCoordinates, index) => {\n      const subFeature = {\n        type: Constants.geojsonTypes.FEATURE,\n        properties: geojson.properties,\n        geometry: {\n          type: subType,\n          coordinates: subCoordinates\n        }\n      };\n      supplementaryPoints = supplementaryPoints.concat(createSupplementaryPoints(subFeature, options, index));\n    });\n  }\n\n  return supplementaryPoints;\n}\n\nexport default createSupplementaryPoints;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}