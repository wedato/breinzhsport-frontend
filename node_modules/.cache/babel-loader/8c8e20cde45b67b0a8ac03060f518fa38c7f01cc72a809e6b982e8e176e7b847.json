{"ast":null,"code":"import { COLOR_BLACK } from \"./constants\";\nimport { getGeofenceFeatureArray } from \"./geofenceUtils\";\nimport { isGeofenceArray, isPolygonArray } from \"./utils\";\nconst FILL_OPACITY = 0.3;\nconst BORDER_OPACITY = 0.5;\nconst BORDER_WIDTH = 4;\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n */\nexport function drawGeofences(sourceName, data, map, options = {}) {\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n  if (!map || typeof map.addSource !== \"function\" || typeof map.addLayer !== \"function\") {\n    throw new Error(\"Please use a maplibre map\");\n  }\n  if (data.length > 0 && !isGeofenceArray(data) && !isPolygonArray(data)) {\n    throw new Error(\"Please pass in an array of Geofences or an array of Polygons\");\n  }\n  /*\n   * Data source for features\n   * Convert data passed in as coordinates into feature data\n   */\n  const sourceId = `${sourceName}`;\n  map.addSource(sourceId, {\n    type: \"geojson\",\n    data: getGeofenceFeatureArray(data),\n    generateId: true\n  });\n  const initialVisiblity = ((_a = options.visible) !== null && _a !== void 0 ? _a : true) ? \"visible\" : \"none\";\n  /*\n   * Draw ui layers for source data\n   */\n  const fillLayerId = `${sourceName}-fill-layer`;\n  map.addLayer({\n    id: fillLayerId,\n    type: \"fill\",\n    source: sourceId,\n    layout: {\n      visibility: initialVisiblity\n    },\n    paint: {\n      \"fill-color\": (_b = options.fillColor) !== null && _b !== void 0 ? _b : COLOR_BLACK,\n      \"fill-opacity\": (_c = options.fillOpacity) !== null && _c !== void 0 ? _c : FILL_OPACITY\n    }\n  });\n  // Add a black outline around the polygon.\n  const outlineLayerId = `${sourceName}-outline-layer`;\n  map.addLayer({\n    id: outlineLayerId,\n    type: \"line\",\n    source: sourceId,\n    layout: {\n      visibility: initialVisiblity\n    },\n    paint: {\n      \"line-color\": (_d = options.borderColor) !== null && _d !== void 0 ? _d : COLOR_BLACK,\n      \"line-opacity\": (_e = options.borderOpacity) !== null && _e !== void 0 ? _e : BORDER_OPACITY,\n      \"line-width\": (_f = options.borderWidth) !== null && _f !== void 0 ? _f : BORDER_WIDTH,\n      \"line-offset\": (_g = options.borderOffset) !== null && _g !== void 0 ? _g : ((_h = options.borderWidth) !== null && _h !== void 0 ? _h : BORDER_WIDTH) / 2 * -1\n    }\n  });\n  // utility function for setting layer visibility to none\n  const hide = () => {\n    map.setLayoutProperty(fillLayerId, \"visibility\", \"none\");\n    map.setLayoutProperty(outlineLayerId, \"visibility\", \"none\");\n  };\n  // utility function for setting layer visibility to visible\n  const show = () => {\n    map.setLayoutProperty(fillLayerId, \"visibility\", \"visible\");\n    map.setLayoutProperty(outlineLayerId, \"visibility\", \"visible\");\n  };\n  // utility function for checking layer visibility\n  const isVisible = () => {\n    const visibility = map.getLayoutProperty(fillLayerId, \"visibility\");\n    return visibility === \"visible\";\n  };\n  // utility function for setting layer visibility to visible\n  const setData = data => {\n    map.getSource(sourceId).setData(data);\n  };\n  return {\n    sourceId,\n    outlineLayerId,\n    fillLayerId,\n    show,\n    hide,\n    isVisible,\n    setData\n  };\n}","map":{"version":3,"names":["COLOR_BLACK","getGeofenceFeatureArray","isGeofenceArray","isPolygonArray","FILL_OPACITY","BORDER_OPACITY","BORDER_WIDTH","drawGeofences","sourceName","data","map","options","_a","_b","_c","_d","_e","_f","_g","_h","addSource","addLayer","Error","length","sourceId","type","generateId","initialVisiblity","visible","fillLayerId","id","source","layout","visibility","paint","fillColor","fillOpacity","outlineLayerId","borderColor","borderOpacity","borderWidth","borderOffset","hide","setLayoutProperty","show","isVisible","getLayoutProperty","setData","getSource"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/maplibre-gl-js-amplify/lib/esm/drawGeofences.js"],"sourcesContent":["import { COLOR_BLACK } from \"./constants\";\nimport { getGeofenceFeatureArray } from \"./geofenceUtils\";\nimport { isGeofenceArray, isPolygonArray } from \"./utils\";\nconst FILL_OPACITY = 0.3;\nconst BORDER_OPACITY = 0.5;\nconst BORDER_WIDTH = 4;\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n */\nexport function drawGeofences(sourceName, data, map, options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    if (!map ||\n        typeof map.addSource !== \"function\" ||\n        typeof map.addLayer !== \"function\") {\n        throw new Error(\"Please use a maplibre map\");\n    }\n    if (data.length > 0 && !isGeofenceArray(data) && !isPolygonArray(data)) {\n        throw new Error(\"Please pass in an array of Geofences or an array of Polygons\");\n    }\n    /*\n     * Data source for features\n     * Convert data passed in as coordinates into feature data\n     */\n    const sourceId = `${sourceName}`;\n    map.addSource(sourceId, {\n        type: \"geojson\",\n        data: getGeofenceFeatureArray(data),\n        generateId: true,\n    });\n    const initialVisiblity = ((_a = options.visible) !== null && _a !== void 0 ? _a : true) ? \"visible\" : \"none\";\n    /*\n     * Draw ui layers for source data\n     */\n    const fillLayerId = `${sourceName}-fill-layer`;\n    map.addLayer({\n        id: fillLayerId,\n        type: \"fill\",\n        source: sourceId,\n        layout: {\n            visibility: initialVisiblity,\n        },\n        paint: {\n            \"fill-color\": (_b = options.fillColor) !== null && _b !== void 0 ? _b : COLOR_BLACK,\n            \"fill-opacity\": (_c = options.fillOpacity) !== null && _c !== void 0 ? _c : FILL_OPACITY,\n        },\n    });\n    // Add a black outline around the polygon.\n    const outlineLayerId = `${sourceName}-outline-layer`;\n    map.addLayer({\n        id: outlineLayerId,\n        type: \"line\",\n        source: sourceId,\n        layout: {\n            visibility: initialVisiblity,\n        },\n        paint: {\n            \"line-color\": (_d = options.borderColor) !== null && _d !== void 0 ? _d : COLOR_BLACK,\n            \"line-opacity\": (_e = options.borderOpacity) !== null && _e !== void 0 ? _e : BORDER_OPACITY,\n            \"line-width\": (_f = options.borderWidth) !== null && _f !== void 0 ? _f : BORDER_WIDTH,\n            \"line-offset\": (_g = options.borderOffset) !== null && _g !== void 0 ? _g : (((_h = options.borderWidth) !== null && _h !== void 0 ? _h : BORDER_WIDTH) / 2) * -1,\n        },\n    });\n    // utility function for setting layer visibility to none\n    const hide = () => {\n        map.setLayoutProperty(fillLayerId, \"visibility\", \"none\");\n        map.setLayoutProperty(outlineLayerId, \"visibility\", \"none\");\n    };\n    // utility function for setting layer visibility to visible\n    const show = () => {\n        map.setLayoutProperty(fillLayerId, \"visibility\", \"visible\");\n        map.setLayoutProperty(outlineLayerId, \"visibility\", \"visible\");\n    };\n    // utility function for checking layer visibility\n    const isVisible = () => {\n        const visibility = map.getLayoutProperty(fillLayerId, \"visibility\");\n        return visibility === \"visible\";\n    };\n    // utility function for setting layer visibility to visible\n    const setData = (data) => {\n        map.getSource(sourceId).setData(data);\n    };\n    return {\n        sourceId,\n        outlineLayerId,\n        fillLayerId,\n        show,\n        hide,\n        isVisible,\n        setData,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}