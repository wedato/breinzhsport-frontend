{"ast":null,"code":"\"use strict\";\n\nvar Plugin = require('./plugin');\nvar logger = require('../../logger');\nvar http = require('http');\nvar EC2Plugin = {\n  /**\n   * A function to get the instance data from the EC2 metadata service.\n   * @param {function} callback - The callback for the plugin loader.\n   */\n  getData: function (callback) {\n    const METADATA_PATH = '/latest/dynamic/instance-identity/document';\n    function populateMetadata(token) {\n      const options = getOptions(METADATA_PATH, 'GET', token ? {\n        'X-aws-ec2-metadata-token': token\n      } : {});\n      Plugin.getPluginMetadata(options, function (err, data) {\n        if (err || !data) {\n          logger.getLogger().error('Error loading EC2 plugin metadata: ', err ? err.toString() : 'Could not retrieve data from IMDS.');\n          callback();\n          return;\n        }\n        const metadata = {\n          ec2: {\n            instance_id: data.instanceId,\n            availability_zone: data.availabilityZone,\n            instance_size: data.instanceType,\n            ami_id: data.imageId\n          }\n        };\n        callback(metadata);\n      });\n    }\n    /**\n     * This kicks off a requet to get a token used for requests to IMDSv2. If the request for the token\n     * fails, we fall back to IMDSv1. Otherwise, the token will be used for an IMDSv2 request.\n     */\n    getToken(function (token) {\n      if (token === null) {\n        logger.getLogger().debug('EC2Plugin failed to get token from IMDSv2. Falling back to IMDSv1.');\n      }\n      populateMetadata(token);\n    });\n  },\n  originName: 'AWS::EC2::Instance'\n};\n/**\n * Asynchronously retrieves a token used in requests to EC2 instance metadata service.\n * @param {function} callback - callback to plugin\n */\nfunction getToken(callback) {\n  const httpReq = http.__request ? http.__request : http.request;\n  const TTL = 60; //seconds\n  const TOKEN_PATH = '/latest/api/token';\n  const options = getOptions(TOKEN_PATH, 'PUT', {\n    'X-aws-ec2-metadata-token-ttl-seconds': TTL\n  });\n  let req = httpReq(options, function (res) {\n    let body = '';\n    res.on('data', function (chunk) {\n      body += chunk;\n    });\n    res.on('end', function () {\n      if (this.statusCode === 200 || this.statusCode === 300) {\n        callback(body);\n      } else {\n        callback(null);\n      }\n    });\n  });\n  req.on('error', function () {\n    callback(null);\n  });\n  req.on('timeout', function () {\n    req.abort();\n    callback(null);\n  });\n  req.setTimeout(Plugin.METADATA_TIMEOUT);\n  req.end();\n}\nfunction getOptions(path, method, headers) {\n  if (!method) {\n    method = 'GET';\n  }\n  if (!headers) {\n    headers = {};\n  }\n  return {\n    host: '169.254.169.254',\n    path: path,\n    method: method,\n    headers: headers\n  };\n}\nmodule.exports = EC2Plugin;","map":{"version":3,"names":["Plugin","require","logger","http","EC2Plugin","getData","callback","METADATA_PATH","populateMetadata","token","options","getOptions","getPluginMetadata","err","data","getLogger","error","toString","metadata","ec2","instance_id","instanceId","availability_zone","availabilityZone","instance_size","instanceType","ami_id","imageId","getToken","debug","originName","httpReq","__request","request","TTL","TOKEN_PATH","req","res","body","on","chunk","statusCode","abort","setTimeout","METADATA_TIMEOUT","end","path","method","headers","host","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/segments/plugins/ec2_plugin.js"],"sourcesContent":["\"use strict\";\nvar Plugin = require('./plugin');\nvar logger = require('../../logger');\nvar http = require('http');\nvar EC2Plugin = {\n    /**\n     * A function to get the instance data from the EC2 metadata service.\n     * @param {function} callback - The callback for the plugin loader.\n     */\n    getData: function (callback) {\n        const METADATA_PATH = '/latest/dynamic/instance-identity/document';\n        function populateMetadata(token) {\n            const options = getOptions(METADATA_PATH, 'GET', token ? { 'X-aws-ec2-metadata-token': token } : {});\n            Plugin.getPluginMetadata(options, function (err, data) {\n                if (err || !data) {\n                    logger.getLogger().error('Error loading EC2 plugin metadata: ', err ? err.toString() : 'Could not retrieve data from IMDS.');\n                    callback();\n                    return;\n                }\n                const metadata = {\n                    ec2: {\n                        instance_id: data.instanceId,\n                        availability_zone: data.availabilityZone,\n                        instance_size: data.instanceType,\n                        ami_id: data.imageId\n                    }\n                };\n                callback(metadata);\n            });\n        }\n        /**\n         * This kicks off a requet to get a token used for requests to IMDSv2. If the request for the token\n         * fails, we fall back to IMDSv1. Otherwise, the token will be used for an IMDSv2 request.\n         */\n        getToken(function (token) {\n            if (token === null) {\n                logger.getLogger().debug('EC2Plugin failed to get token from IMDSv2. Falling back to IMDSv1.');\n            }\n            populateMetadata(token);\n        });\n    },\n    originName: 'AWS::EC2::Instance'\n};\n/**\n * Asynchronously retrieves a token used in requests to EC2 instance metadata service.\n * @param {function} callback - callback to plugin\n */\nfunction getToken(callback) {\n    const httpReq = http.__request ? http.__request : http.request;\n    const TTL = 60; //seconds\n    const TOKEN_PATH = '/latest/api/token';\n    const options = getOptions(TOKEN_PATH, 'PUT', {\n        'X-aws-ec2-metadata-token-ttl-seconds': TTL\n    });\n    let req = httpReq(options, function (res) {\n        let body = '';\n        res.on('data', function (chunk) {\n            body += chunk;\n        });\n        res.on('end', function () {\n            if (this.statusCode === 200 || this.statusCode === 300) {\n                callback(body);\n            }\n            else {\n                callback(null);\n            }\n        });\n    });\n    req.on('error', function () {\n        callback(null);\n    });\n    req.on('timeout', function () {\n        req.abort();\n        callback(null);\n    });\n    req.setTimeout(Plugin.METADATA_TIMEOUT);\n    req.end();\n}\nfunction getOptions(path, method, headers) {\n    if (!method) {\n        method = 'GET';\n    }\n    if (!headers) {\n        headers = {};\n    }\n    return {\n        host: '169.254.169.254',\n        path: path,\n        method: method,\n        headers: headers\n    };\n}\nmodule.exports = EC2Plugin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}