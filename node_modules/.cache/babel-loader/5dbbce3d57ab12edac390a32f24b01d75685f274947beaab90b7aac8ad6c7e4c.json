{"ast":null,"code":"import * as Constants from '../constants.js';\nimport featuresAt from '../lib/features_at.js';\nimport Point from '../feature_types/point.js';\nimport LineString from '../feature_types/line_string.js';\nimport Polygon from '../feature_types/polygon.js';\nimport MultiFeature from '../feature_types/multi_feature.js';\nexport default function ModeInterface(ctx) {\n  this.map = ctx.map;\n  this.drawConfig = JSON.parse(JSON.stringify(ctx.options || {}));\n  this._ctx = ctx;\n}\n\n/**\n * Sets Draw's interal selected state\n * @name this.setSelected\n * @param {DrawFeature[]} - whats selected as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js)\n */\nModeInterface.prototype.setSelected = function (features) {\n  return this._ctx.store.setSelected(features);\n};\n\n/**\n * Sets Draw's internal selected coordinate state\n * @name this.setSelectedCoordinates\n * @param {Object[]} coords - a array of {coord_path: 'string', feature_id: 'string'}\n */\nModeInterface.prototype.setSelectedCoordinates = function (coords) {\n  this._ctx.store.setSelectedCoordinates(coords);\n  coords.reduce((m, c) => {\n    if (m[c.feature_id] === undefined) {\n      m[c.feature_id] = true;\n      this._ctx.store.get(c.feature_id).changed();\n    }\n    return m;\n  }, {});\n};\n\n/**\n * Get all selected features as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js)\n * @name this.getSelected\n * @returns {DrawFeature[]}\n */\nModeInterface.prototype.getSelected = function () {\n  return this._ctx.store.getSelected();\n};\n\n/**\n * Get the ids of all currently selected features\n * @name this.getSelectedIds\n * @returns {String[]}\n */\nModeInterface.prototype.getSelectedIds = function () {\n  return this._ctx.store.getSelectedIds();\n};\n\n/**\n * Check if a feature is selected\n * @name this.isSelected\n * @param {String} id - a feature id\n * @returns {Boolean}\n */\nModeInterface.prototype.isSelected = function (id) {\n  return this._ctx.store.isSelected(id);\n};\n\n/**\n * Get a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js) by its id\n * @name this.getFeature\n * @param {String} id - a feature id\n * @returns {DrawFeature}\n */\nModeInterface.prototype.getFeature = function (id) {\n  return this._ctx.store.get(id);\n};\n\n/**\n * Add a feature to draw's internal selected state\n * @name this.select\n * @param {String} id\n */\nModeInterface.prototype.select = function (id) {\n  return this._ctx.store.select(id);\n};\n\n/**\n * Remove a feature from draw's internal selected state\n * @name this.delete\n * @param {String} id\n */\nModeInterface.prototype.deselect = function (id) {\n  return this._ctx.store.deselect(id);\n};\n\n/**\n * Delete a feature from draw\n * @name this.deleteFeature\n * @param {String} id - a feature id\n */\nModeInterface.prototype.deleteFeature = function (id, opts = {}) {\n  return this._ctx.store.delete(id, opts);\n};\n\n/**\n * Add a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js) to draw.\n * See `this.newFeature` for converting geojson into a DrawFeature\n * @name this.addFeature\n * @param {DrawFeature} feature - the feature to add\n */\nModeInterface.prototype.addFeature = function (feature, opts = {}) {\n  return this._ctx.store.add(feature, opts);\n};\n\n/**\n * Clear all selected features\n */\nModeInterface.prototype.clearSelectedFeatures = function () {\n  return this._ctx.store.clearSelected();\n};\n\n/**\n * Clear all selected coordinates\n */\nModeInterface.prototype.clearSelectedCoordinates = function () {\n  return this._ctx.store.clearSelectedCoordinates();\n};\n\n/**\n * Indicate if the different action are currently possible with your mode\n * See [draw.actionalbe](https://github.com/mapbox/mapbox-gl-draw/blob/main/API.md#drawactionable) for a list of possible actions. All undefined actions are set to **false** by default\n * @name this.setActionableState\n * @param {Object} actions\n */\nModeInterface.prototype.setActionableState = function (actions = {}) {\n  const newSet = {\n    trash: actions.trash || false,\n    combineFeatures: actions.combineFeatures || false,\n    uncombineFeatures: actions.uncombineFeatures || false\n  };\n  return this._ctx.events.actionable(newSet);\n};\n\n/**\n * Trigger a mode change\n * @name this.changeMode\n * @param {String} mode - the mode to transition into\n * @param {Object} opts - the options object to pass to the new mode\n * @param {Object} eventOpts - used to control what kind of events are emitted.\n */\nModeInterface.prototype.changeMode = function (mode, opts = {}, eventOpts = {}) {\n  return this._ctx.events.changeMode(mode, opts, eventOpts);\n};\n\n/**\n * Fire a map event\n * @name this.fire\n * @param {String} eventName - the event name.\n * @param {Object} eventData - the event data object.\n */\nModeInterface.prototype.fire = function (eventName, eventData) {\n  return this._ctx.events.fire(eventName, eventData);\n};\n\n/**\n * Update the state of draw map classes\n * @name this.updateUIClasses\n * @param {Object} opts\n */\nModeInterface.prototype.updateUIClasses = function (opts) {\n  return this._ctx.ui.queueMapClasses(opts);\n};\n\n/**\n * If a name is provided it makes that button active, else if makes all buttons inactive\n * @name this.activateUIButton\n * @param {String?} name - name of the button to make active, leave as undefined to set buttons to be inactive\n */\nModeInterface.prototype.activateUIButton = function (name) {\n  return this._ctx.ui.setActiveButton(name);\n};\n\n/**\n * Get the features at the location of an event object or in a bbox\n * @name this.featuresAt\n * @param {Event||NULL} event - a mapbox-gl event object\n * @param {BBOX||NULL} bbox - the area to get features from\n * @param {String} bufferType - is this `click` or `tap` event, defaults to click\n */\nModeInterface.prototype.featuresAt = function (event, bbox, bufferType = 'click') {\n  if (bufferType !== 'click' && bufferType !== 'touch') throw new Error('invalid buffer type');\n  return featuresAt[bufferType](event, bbox, this._ctx);\n};\n\n/**\n * Create a new [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js) from geojson\n * @name this.newFeature\n * @param {GeoJSONFeature} geojson\n * @returns {DrawFeature}\n */\nModeInterface.prototype.newFeature = function (geojson) {\n  const type = geojson.geometry.type;\n  if (type === Constants.geojsonTypes.POINT) return new Point(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.LINE_STRING) return new LineString(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.POLYGON) return new Polygon(this._ctx, geojson);\n  return new MultiFeature(this._ctx, geojson);\n};\n\n/**\n * Check is an object is an instance of a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js)\n * @name this.isInstanceOf\n * @param {String} type - `Point`, `LineString`, `Polygon`, `MultiFeature`\n * @param {Object} feature - the object that needs to be checked\n * @returns {Boolean}\n */\nModeInterface.prototype.isInstanceOf = function (type, feature) {\n  if (type === Constants.geojsonTypes.POINT) return feature instanceof Point;\n  if (type === Constants.geojsonTypes.LINE_STRING) return feature instanceof LineString;\n  if (type === Constants.geojsonTypes.POLYGON) return feature instanceof Polygon;\n  if (type === 'MultiFeature') return feature instanceof MultiFeature;\n  throw new Error(`Unknown feature class: ${type}`);\n};\n\n/**\n * Force draw to rerender the feature of the provided id\n * @name this.doRender\n * @param {String} id - a feature id\n */\nModeInterface.prototype.doRender = function (id) {\n  return this._ctx.store.featureChanged(id);\n};","map":{"version":3,"names":["Constants","featuresAt","Point","LineString","Polygon","MultiFeature","ModeInterface","ctx","map","drawConfig","JSON","parse","stringify","options","_ctx","prototype","setSelected","features","store","setSelectedCoordinates","coords","reduce","m","c","feature_id","undefined","get","changed","getSelected","getSelectedIds","isSelected","id","getFeature","select","deselect","deleteFeature","opts","delete","addFeature","feature","add","clearSelectedFeatures","clearSelected","clearSelectedCoordinates","setActionableState","actions","newSet","trash","combineFeatures","uncombineFeatures","events","actionable","changeMode","mode","eventOpts","fire","eventName","eventData","updateUIClasses","ui","queueMapClasses","activateUIButton","name","setActiveButton","event","bbox","bufferType","Error","newFeature","geojson","type","geometry","geojsonTypes","POINT","LINE_STRING","POLYGON","isInstanceOf","doRender","featureChanged"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@mapbox/mapbox-gl-draw/src/modes/mode_interface_accessors.js"],"sourcesContent":["import * as Constants from '../constants.js';\nimport featuresAt from '../lib/features_at.js';\nimport Point from '../feature_types/point.js';\nimport LineString from '../feature_types/line_string.js';\nimport Polygon from '../feature_types/polygon.js';\nimport MultiFeature from '../feature_types/multi_feature.js';\n\nexport default function ModeInterface(ctx) {\n  this.map = ctx.map;\n  this.drawConfig = JSON.parse(JSON.stringify(ctx.options || {}));\n  this._ctx = ctx;\n}\n\n/**\n * Sets Draw's interal selected state\n * @name this.setSelected\n * @param {DrawFeature[]} - whats selected as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js)\n */\nModeInterface.prototype.setSelected = function(features) {\n  return this._ctx.store.setSelected(features);\n};\n\n/**\n * Sets Draw's internal selected coordinate state\n * @name this.setSelectedCoordinates\n * @param {Object[]} coords - a array of {coord_path: 'string', feature_id: 'string'}\n */\nModeInterface.prototype.setSelectedCoordinates = function(coords) {\n  this._ctx.store.setSelectedCoordinates(coords);\n  coords.reduce((m, c) => {\n    if (m[c.feature_id] === undefined) {\n      m[c.feature_id] = true;\n      this._ctx.store.get(c.feature_id).changed();\n    }\n    return m;\n  }, {});\n};\n\n/**\n * Get all selected features as a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js)\n * @name this.getSelected\n * @returns {DrawFeature[]}\n */\nModeInterface.prototype.getSelected = function() {\n  return this._ctx.store.getSelected();\n};\n\n/**\n * Get the ids of all currently selected features\n * @name this.getSelectedIds\n * @returns {String[]}\n */\nModeInterface.prototype.getSelectedIds = function() {\n  return this._ctx.store.getSelectedIds();\n};\n\n/**\n * Check if a feature is selected\n * @name this.isSelected\n * @param {String} id - a feature id\n * @returns {Boolean}\n */\nModeInterface.prototype.isSelected = function(id) {\n  return this._ctx.store.isSelected(id);\n};\n\n/**\n * Get a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js) by its id\n * @name this.getFeature\n * @param {String} id - a feature id\n * @returns {DrawFeature}\n */\nModeInterface.prototype.getFeature = function(id) {\n  return this._ctx.store.get(id);\n};\n\n/**\n * Add a feature to draw's internal selected state\n * @name this.select\n * @param {String} id\n */\nModeInterface.prototype.select = function(id) {\n  return this._ctx.store.select(id);\n};\n\n/**\n * Remove a feature from draw's internal selected state\n * @name this.delete\n * @param {String} id\n */\nModeInterface.prototype.deselect = function(id) {\n  return this._ctx.store.deselect(id);\n};\n\n/**\n * Delete a feature from draw\n * @name this.deleteFeature\n * @param {String} id - a feature id\n */\nModeInterface.prototype.deleteFeature = function(id, opts = {}) {\n  return this._ctx.store.delete(id, opts);\n};\n\n/**\n * Add a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js) to draw.\n * See `this.newFeature` for converting geojson into a DrawFeature\n * @name this.addFeature\n * @param {DrawFeature} feature - the feature to add\n */\nModeInterface.prototype.addFeature = function(feature, opts = {}) {\n  return this._ctx.store.add(feature, opts);\n};\n\n/**\n * Clear all selected features\n */\nModeInterface.prototype.clearSelectedFeatures = function() {\n  return this._ctx.store.clearSelected();\n};\n\n/**\n * Clear all selected coordinates\n */\nModeInterface.prototype.clearSelectedCoordinates = function() {\n  return this._ctx.store.clearSelectedCoordinates();\n};\n\n/**\n * Indicate if the different action are currently possible with your mode\n * See [draw.actionalbe](https://github.com/mapbox/mapbox-gl-draw/blob/main/API.md#drawactionable) for a list of possible actions. All undefined actions are set to **false** by default\n * @name this.setActionableState\n * @param {Object} actions\n */\nModeInterface.prototype.setActionableState = function(actions = {}) {\n  const newSet = {\n    trash: actions.trash || false,\n    combineFeatures: actions.combineFeatures || false,\n    uncombineFeatures: actions.uncombineFeatures || false\n  };\n  return this._ctx.events.actionable(newSet);\n};\n\n/**\n * Trigger a mode change\n * @name this.changeMode\n * @param {String} mode - the mode to transition into\n * @param {Object} opts - the options object to pass to the new mode\n * @param {Object} eventOpts - used to control what kind of events are emitted.\n */\nModeInterface.prototype.changeMode = function(mode, opts = {}, eventOpts = {}) {\n  return this._ctx.events.changeMode(mode, opts, eventOpts);\n};\n\n/**\n * Fire a map event\n * @name this.fire\n * @param {String} eventName - the event name.\n * @param {Object} eventData - the event data object.\n */\nModeInterface.prototype.fire = function(eventName, eventData) {\n  return this._ctx.events.fire(eventName, eventData);\n};\n\n/**\n * Update the state of draw map classes\n * @name this.updateUIClasses\n * @param {Object} opts\n */\nModeInterface.prototype.updateUIClasses = function(opts) {\n  return this._ctx.ui.queueMapClasses(opts);\n};\n\n/**\n * If a name is provided it makes that button active, else if makes all buttons inactive\n * @name this.activateUIButton\n * @param {String?} name - name of the button to make active, leave as undefined to set buttons to be inactive\n */\nModeInterface.prototype.activateUIButton = function(name) {\n  return this._ctx.ui.setActiveButton(name);\n};\n\n/**\n * Get the features at the location of an event object or in a bbox\n * @name this.featuresAt\n * @param {Event||NULL} event - a mapbox-gl event object\n * @param {BBOX||NULL} bbox - the area to get features from\n * @param {String} bufferType - is this `click` or `tap` event, defaults to click\n */\nModeInterface.prototype.featuresAt = function(event, bbox, bufferType = 'click') {\n  if (bufferType !== 'click' && bufferType !== 'touch') throw new Error('invalid buffer type');\n  return featuresAt[bufferType](event, bbox, this._ctx);\n};\n\n/**\n * Create a new [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js) from geojson\n * @name this.newFeature\n * @param {GeoJSONFeature} geojson\n * @returns {DrawFeature}\n */\nModeInterface.prototype.newFeature = function(geojson) {\n  const type = geojson.geometry.type;\n  if (type === Constants.geojsonTypes.POINT) return new Point(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.LINE_STRING) return new LineString(this._ctx, geojson);\n  if (type === Constants.geojsonTypes.POLYGON) return new Polygon(this._ctx, geojson);\n  return new MultiFeature(this._ctx, geojson);\n};\n\n/**\n * Check is an object is an instance of a [DrawFeature](https://github.com/mapbox/mapbox-gl-draw/blob/main/src/feature_types/feature.js)\n * @name this.isInstanceOf\n * @param {String} type - `Point`, `LineString`, `Polygon`, `MultiFeature`\n * @param {Object} feature - the object that needs to be checked\n * @returns {Boolean}\n */\nModeInterface.prototype.isInstanceOf = function(type, feature) {\n  if (type === Constants.geojsonTypes.POINT) return feature instanceof Point;\n  if (type === Constants.geojsonTypes.LINE_STRING) return feature instanceof LineString;\n  if (type === Constants.geojsonTypes.POLYGON) return feature instanceof Polygon;\n  if (type === 'MultiFeature') return feature instanceof MultiFeature;\n  throw new Error(`Unknown feature class: ${type}`);\n};\n\n/**\n * Force draw to rerender the feature of the provided id\n * @name this.doRender\n * @param {String} id - a feature id\n */\nModeInterface.prototype.doRender = function(id) {\n  return this._ctx.store.featureChanged(id);\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}