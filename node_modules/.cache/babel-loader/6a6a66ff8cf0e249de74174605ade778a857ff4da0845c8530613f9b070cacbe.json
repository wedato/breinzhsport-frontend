{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nconst FIT_BOUNDS_PADDING = {\n  left: 240\n}; // Default to 240px right now because of the left nav\nexport class AmplifyGeofenceControl {\n  constructor(options) {\n    this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n    this._loadedGeofences = {};\n    this._displayedGeofences = [];\n    this.changeMode = this.changeMode.bind(this);\n    this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n    this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n    this._loadGeofence = this._loadGeofence.bind(this);\n    this.updateInputRadius = this.updateInputRadius.bind(this);\n    this.saveGeofence = this.saveGeofence.bind(this);\n    this.editGeofence = this.editGeofence.bind(this);\n    this.deleteGeofence = this.deleteGeofence.bind(this);\n    this.displayAllGeofences = this.displayAllGeofences.bind(this);\n    this.hideAllGeofences = this.hideAllGeofences.bind(this);\n    this.addEditableGeofence = this.addEditableGeofence.bind(this);\n    this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n    this.displayHighlightedGeofence = this.displayHighlightedGeofence.bind(this);\n    this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n    this.displayGeofence = this.displayGeofence.bind(this);\n    this.hideGeofence = this.hideGeofence.bind(this);\n    this.fitGeofence = this.fitGeofence.bind(this);\n    this.fitAllGeofences = this.fitAllGeofences.bind(this);\n  }\n  /**********************************************************************\n   Public Methods for AmplifyGeofenceControl\n   **********************************************************************/\n  getDefaultPosition() {\n    return \"full-screen\";\n  }\n  onRemove() {\n    this._ui.removeElement(this._container);\n  }\n  // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n  reorderMapLibreClassNames() {\n    const mapCanvas = document.getElementsByClassName(\"maplibregl-canvas\").item(0);\n    if (mapCanvas) {\n      mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n    }\n  }\n  onAdd(map) {\n    this._map = map;\n    this.reorderMapLibreClassNames();\n    this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n    this._ui = AmplifyGeofenceControlUI(this, this._container);\n    this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n    this._ui.registerControlPosition(map, \"full-screen\");\n    this._ui.createGeofenceListContainer();\n    // Draw the geofences source to the map so we can update it on geofences load/creation\n    this._map.once(\"load\", function () {\n      // Prevents warnings on multiple re-renders, especially when rendered in react\n      if (this._map.getSource(\"displayedGeofences\")) {\n        return;\n      }\n      this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n        fillColor: GEOFENCE_COLOR,\n        borderColor: GEOFENCE_BORDER_COLOR,\n        borderOpacity: 1\n      });\n      this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n        fillColor: GEOFENCE_COLOR,\n        borderColor: GEOFENCE_BORDER_COLOR,\n        borderOpacity: 1,\n        borderWidth: 6\n      });\n      this.loadInitialGeofences();\n      map.addControl(new maplibregl.NavigationControl({\n        showCompass: false\n      }), \"bottom-right\");\n    }.bind(this));\n    this._map.on(\"draw.update\", () => {\n      const coordinates = this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n      const radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n      this._ui.updateGeofenceRadius(radius.toFixed(2));\n    });\n    return this._container;\n  }\n  createGeofence(geofenceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!geofenceId || geofenceId.length === 0) {\n        this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n        return;\n      }\n      if (!isValidGeofenceId(geofenceId)) {\n        this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n        return;\n      }\n      if (isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n        this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n        return;\n      }\n      return this.saveGeofence(geofenceId);\n    });\n  }\n  saveGeofence(geofenceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const feature = this._amplifyDraw.get(this._editingGeofenceId);\n      const idToSave = geofenceId || this._editingGeofenceId;\n      const response = yield Geo.saveGeofences({\n        geofenceId: idToSave,\n        geometry: {\n          polygon: feature.geometry[\"coordinates\"]\n        }\n      });\n      if (response.errors[0]) {\n        const err = response.errors[0];\n        throw new Error(`There was an error saving geofence with id ${idToSave}: ${err.error.code} - ${err.error.message}`);\n      }\n      const success = response.successes[0];\n      const savedGeofence = {\n        geofenceId: success.geofenceId,\n        geometry: {\n          polygon: feature.geometry[\"coordinates\"]\n        }\n      };\n      // render geofence to the map and add it to the list\n      this._loadGeofence(savedGeofence);\n      this.displayGeofence(savedGeofence.geofenceId);\n      this.setEditingModeEnabled(false);\n      return savedGeofence.geofenceId;\n    });\n  }\n  // Each page loads 100 geofences\n  loadInitialGeofences() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const {\n          entries,\n          nextToken\n        } = yield Geo.listGeofences();\n        this._listGeofencesNextToken = nextToken;\n        const loadGeofence = this._loadGeofence;\n        entries.forEach(geofence => loadGeofence(geofence));\n        this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n      } catch (e) {\n        throw new Error(`Error calling listGeofences: ${e}`);\n      }\n    });\n  }\n  loadMoreGeofences() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._listGeofencesNextToken) {\n        try {\n          const {\n            entries,\n            nextToken\n          } = yield Geo.listGeofences({\n            nextToken: this._listGeofencesNextToken\n          });\n          this._listGeofencesNextToken = nextToken;\n          const loadGeofence = this._loadGeofence;\n          entries.forEach(geofence => loadGeofence(geofence));\n          this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n        } catch (e) {\n          throw new Error(`Error calling listGeofences: ${e}`);\n        }\n      }\n    });\n  }\n  editGeofence(geofenceId) {\n    this.setEditingModeEnabled(true);\n    const geofence = this._loadedGeofences[geofenceId];\n    if (!geofence) {\n      throw new Error(`Geofence with id ${geofenceId} does not exist`);\n    }\n    // render in mapboxdraw\n    const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n    const data = Object.assign({\n      id: geofence.geofenceId\n    }, feature);\n    this._amplifyDraw.add(data);\n    this._editingGeofenceId = geofence.geofenceId;\n  }\n  deleteGeofence(geofenceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield Geo.deleteGeofences(geofenceId);\n      if (response.errors[0]) {\n        const err = response.errors[0].error;\n        throw new Error(`There was an error deleting geofence with id ${geofenceId}: ${err.code} - ${err.message}`);\n      }\n      this._ui.removeGeofenceListItem(geofenceId);\n      delete this._loadedGeofences[geofenceId];\n      this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n      this._displayedGeofences = this._displayedGeofences.filter(geofence => geofence.geofenceId !== geofenceId);\n      this._updateDisplayedGeofences();\n      return geofenceId;\n    });\n  }\n  deleteSelectedGeofences() {\n    const idsToDelete = this._displayedGeofences.map(fence => fence.geofenceId);\n    // FIXME: delete geofence api call here\n    idsToDelete.forEach(id => {\n      this._ui.removeGeofenceListItem(id);\n      delete this._loadedGeofences[id];\n    });\n    this._displayedGeofences = [];\n    this._updateDisplayedGeofences();\n  }\n  /**********************************************************************\n   Private methods for CRUD Geofences\n   **********************************************************************/\n  _loadGeofence(geofence) {\n    // If geofence exists remove it from displayed geofences\n    if (this._loadedGeofences[geofence.geofenceId]) {\n      this._displayedGeofences = this._displayedGeofences.filter(fence => fence.geofenceId !== geofence.geofenceId);\n    } else {\n      // If geofence doesn't exist render a new list item for it\n      this._ui.renderListItem(geofence);\n    }\n    this._loadedGeofences[geofence.geofenceId] = geofence;\n    this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n  }\n  displayGeofence(geofenceId) {\n    this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n    this._updateDisplayedGeofences();\n    this._ui.updateCheckbox(geofenceId, true);\n    this.fitAllGeofences();\n  }\n  displayAllGeofences() {\n    this._displayedGeofences.push(...Object.values(this._loadedGeofences));\n    this._updateDisplayedGeofences();\n    const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n    Array.from(checkboxes).forEach(checkbox => checkbox.checked = this._ui.getCheckboxAllValue());\n    this.fitAllGeofences();\n  }\n  fitGeofence(geofenceId) {\n    const mapBounds = this._map.getBounds();\n    const geofence = this._loadedGeofences[geofenceId];\n    geofence.geometry.polygon[0].forEach(coord => {\n      mapBounds.extend(coord);\n    });\n    this._map.fitBounds(mapBounds, {\n      padding: FIT_BOUNDS_PADDING\n    });\n  }\n  fitAllGeofences() {\n    let shouldFitBounds = false;\n    const mapBounds = this._map.getBounds();\n    this._displayedGeofences.forEach(geofence => {\n      geofence.geometry.polygon[0].forEach(coord => {\n        if (!mapBounds.contains(coord)) {\n          mapBounds.extend(coord);\n          shouldFitBounds = true;\n        }\n      });\n    });\n    if (shouldFitBounds) this._map.fitBounds(mapBounds, {\n      padding: FIT_BOUNDS_PADDING\n    });\n  }\n  hideGeofence(geofenceId) {\n    this._displayedGeofences = this._displayedGeofences.filter(geofence => geofence.geofenceId !== geofenceId);\n    this._updateDisplayedGeofences();\n    this._ui.updateCheckbox(geofenceId, false);\n  }\n  hideAllGeofences() {\n    this._displayedGeofences = [];\n    this._updateDisplayedGeofences();\n    const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n    Array.from(checkboxes).forEach(checkbox => checkbox.checked = this._ui.getCheckboxAllValue());\n  }\n  _updateDisplayedGeofences() {\n    const feature = getGeofenceFeatureArray(this._displayedGeofences);\n    this._drawGeofencesOutput.setData(feature);\n  }\n  displayHighlightedGeofence(geofenceId) {\n    const geofence = this._loadedGeofences[geofenceId];\n    if (!geofence) {\n      console.warn(`Geofence with id ${geofenceId} does not exist`);\n      return;\n    }\n    const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n    this._highlightedGeofenceOutput.setData(feature);\n    this._highlightedGeofenceOutput.show();\n  }\n  hideHighlightedGeofence() {\n    this._highlightedGeofenceOutput.hide();\n  }\n  /**********************************************************************\n   Methods for controlling amplify mapbox draw\n   **********************************************************************/\n  changeMode(mode) {\n    // erase existing mapbox draw content\n    this._amplifyDraw.delete(this._editingGeofenceId);\n    if (mode === \"draw_circle\") {\n      this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n    } else {\n      this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n    }\n  }\n  resetGeofence() {\n    // erase existing mapbox draw content\n    this._amplifyDraw.delete(this._editingGeofenceId);\n    if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n      this.editGeofence(this._editingGeofenceId);\n    } else {\n      this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n    }\n  }\n  // Disables add button and selecting items from geofence list\n  setEditingModeEnabled(enabled) {\n    enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n    enabled ? this._drawGeofencesOutput.hide() : this._drawGeofencesOutput.show();\n    this._ui.setGeofenceListEnabled(!enabled);\n  }\n  updateInputRadius(event) {\n    const radiusString = event.target.value;\n    const radius = parseInt(radiusString);\n    if (isNaN(radius)) {\n      return;\n    }\n    this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n  }\n  addEditableGeofence() {\n    this._editingGeofenceId = \"tempGeofence\";\n    this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n    this.setEditingModeEnabled(true);\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","maplibregl","Geo","drawGeofences","isValidGeofenceId","getGeofenceFeatureFromPolygon","getGeofenceFeatureArray","isExistingGeofenceId","getDistanceBetweenCoordinates","GEOFENCE_COLOR","GEOFENCE_BORDER_COLOR","AmplifyGeofenceControlUI","AmplifyMapDraw","createElement","FIT_BOUNDS_PADDING","left","AmplifyGeofenceControl","constructor","options","_geofenceCollectionId","geofenceCollectionId","_loadedGeofences","_displayedGeofences","changeMode","bind","loadInitialGeofences","loadMoreGeofences","_loadGeofence","updateInputRadius","saveGeofence","editGeofence","deleteGeofence","displayAllGeofences","hideAllGeofences","addEditableGeofence","setEditingModeEnabled","displayHighlightedGeofence","hideHighlightedGeofence","displayGeofence","hideGeofence","fitGeofence","fitAllGeofences","getDefaultPosition","onRemove","_ui","removeElement","_container","reorderMapLibreClassNames","mapCanvas","document","getElementsByClassName","item","className","onAdd","map","_map","_amplifyDraw","registerControlPosition","createGeofenceListContainer","once","getSource","_drawGeofencesOutput","fillColor","borderColor","borderOpacity","_highlightedGeofenceOutput","borderWidth","addControl","NavigationControl","showCompass","on","coordinates","_mapBoxDraw","getAll","features","geometry","radius","Math","floor","length","updateGeofenceRadius","toFixed","createGeofence","geofenceId","createAddGeofencePromptError","feature","get","_editingGeofenceId","idToSave","response","saveGeofences","polygon","errors","err","Error","error","code","message","success","successes","savedGeofence","entries","nextToken","listGeofences","_listGeofencesNextToken","loadGeofence","forEach","geofence","updateGeofenceCount","Object","keys","data","assign","id","add","deleteGeofences","removeGeofenceListItem","filter","_updateDisplayedGeofences","deleteSelectedGeofences","idsToDelete","fence","renderListItem","push","updateCheckbox","values","checkboxes","Array","from","checkbox","checked","getCheckboxAllValue","mapBounds","getBounds","coord","extend","fitBounds","padding","shouldFitBounds","contains","setData","console","warn","show","hide","mode","delete","drawCircularGeofence","drawPolygonGeofence","resetGeofence","enabled","enable","disable","setGeofenceListEnabled","event","radiusString","target","parseInt","isNaN"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/maplibre-gl-js-amplify/lib/esm/AmplifyGeofenceControl/index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates, } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nconst FIT_BOUNDS_PADDING = { left: 240 }; // Default to 240px right now because of the left nav\nexport class AmplifyGeofenceControl {\n    constructor(options) {\n        this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n        this._loadedGeofences = {};\n        this._displayedGeofences = [];\n        this.changeMode = this.changeMode.bind(this);\n        this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n        this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n        this._loadGeofence = this._loadGeofence.bind(this);\n        this.updateInputRadius = this.updateInputRadius.bind(this);\n        this.saveGeofence = this.saveGeofence.bind(this);\n        this.editGeofence = this.editGeofence.bind(this);\n        this.deleteGeofence = this.deleteGeofence.bind(this);\n        this.displayAllGeofences = this.displayAllGeofences.bind(this);\n        this.hideAllGeofences = this.hideAllGeofences.bind(this);\n        this.addEditableGeofence = this.addEditableGeofence.bind(this);\n        this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n        this.displayHighlightedGeofence =\n            this.displayHighlightedGeofence.bind(this);\n        this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n        this.displayGeofence = this.displayGeofence.bind(this);\n        this.hideGeofence = this.hideGeofence.bind(this);\n        this.fitGeofence = this.fitGeofence.bind(this);\n        this.fitAllGeofences = this.fitAllGeofences.bind(this);\n    }\n    /**********************************************************************\n     Public Methods for AmplifyGeofenceControl\n     **********************************************************************/\n    getDefaultPosition() {\n        return \"full-screen\";\n    }\n    onRemove() {\n        this._ui.removeElement(this._container);\n    }\n    // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n    reorderMapLibreClassNames() {\n        const mapCanvas = document\n            .getElementsByClassName(\"maplibregl-canvas\")\n            .item(0);\n        if (mapCanvas) {\n            mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n        }\n    }\n    onAdd(map) {\n        this._map = map;\n        this.reorderMapLibreClassNames();\n        this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n        this._ui = AmplifyGeofenceControlUI(this, this._container);\n        this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n        this._ui.registerControlPosition(map, \"full-screen\");\n        this._ui.createGeofenceListContainer();\n        // Draw the geofences source to the map so we can update it on geofences load/creation\n        this._map.once(\"load\", function () {\n            // Prevents warnings on multiple re-renders, especially when rendered in react\n            if (this._map.getSource(\"displayedGeofences\")) {\n                return;\n            }\n            this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n                fillColor: GEOFENCE_COLOR,\n                borderColor: GEOFENCE_BORDER_COLOR,\n                borderOpacity: 1,\n            });\n            this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n                fillColor: GEOFENCE_COLOR,\n                borderColor: GEOFENCE_BORDER_COLOR,\n                borderOpacity: 1,\n                borderWidth: 6,\n            });\n            this.loadInitialGeofences();\n            map.addControl(new maplibregl.NavigationControl({ showCompass: false }), \"bottom-right\");\n        }.bind(this));\n        this._map.on(\"draw.update\", () => {\n            const coordinates = this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n            const radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n            this._ui.updateGeofenceRadius(radius.toFixed(2));\n        });\n        return this._container;\n    }\n    createGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!geofenceId || geofenceId.length === 0) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n                return;\n            }\n            if (!isValidGeofenceId(geofenceId)) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n                return;\n            }\n            if (isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n                return;\n            }\n            return this.saveGeofence(geofenceId);\n        });\n    }\n    saveGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const feature = this._amplifyDraw.get(this._editingGeofenceId);\n            const idToSave = geofenceId || this._editingGeofenceId;\n            const response = yield Geo.saveGeofences({\n                geofenceId: idToSave,\n                geometry: { polygon: feature.geometry[\"coordinates\"] },\n            });\n            if (response.errors[0]) {\n                const err = response.errors[0];\n                throw new Error(`There was an error saving geofence with id ${idToSave}: ${err.error.code} - ${err.error.message}`);\n            }\n            const success = response.successes[0];\n            const savedGeofence = {\n                geofenceId: success.geofenceId,\n                geometry: { polygon: feature.geometry[\"coordinates\"] },\n            };\n            // render geofence to the map and add it to the list\n            this._loadGeofence(savedGeofence);\n            this.displayGeofence(savedGeofence.geofenceId);\n            this.setEditingModeEnabled(false);\n            return savedGeofence.geofenceId;\n        });\n    }\n    // Each page loads 100 geofences\n    loadInitialGeofences() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { entries, nextToken } = yield Geo.listGeofences();\n                this._listGeofencesNextToken = nextToken;\n                const loadGeofence = this._loadGeofence;\n                entries.forEach((geofence) => loadGeofence(geofence));\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n            }\n            catch (e) {\n                throw new Error(`Error calling listGeofences: ${e}`);\n            }\n        });\n    }\n    loadMoreGeofences() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._listGeofencesNextToken) {\n                try {\n                    const { entries, nextToken } = yield Geo.listGeofences({\n                        nextToken: this._listGeofencesNextToken,\n                    });\n                    this._listGeofencesNextToken = nextToken;\n                    const loadGeofence = this._loadGeofence;\n                    entries.forEach((geofence) => loadGeofence(geofence));\n                    this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n                }\n                catch (e) {\n                    throw new Error(`Error calling listGeofences: ${e}`);\n                }\n            }\n        });\n    }\n    editGeofence(geofenceId) {\n        this.setEditingModeEnabled(true);\n        const geofence = this._loadedGeofences[geofenceId];\n        if (!geofence) {\n            throw new Error(`Geofence with id ${geofenceId} does not exist`);\n        }\n        // render in mapboxdraw\n        const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n        const data = Object.assign({ id: geofence.geofenceId }, feature);\n        this._amplifyDraw.add(data);\n        this._editingGeofenceId = geofence.geofenceId;\n    }\n    deleteGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield Geo.deleteGeofences(geofenceId);\n            if (response.errors[0]) {\n                const err = response.errors[0].error;\n                throw new Error(`There was an error deleting geofence with id ${geofenceId}: ${err.code} - ${err.message}`);\n            }\n            this._ui.removeGeofenceListItem(geofenceId);\n            delete this._loadedGeofences[geofenceId];\n            this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n            this._displayedGeofences = this._displayedGeofences.filter((geofence) => geofence.geofenceId !== geofenceId);\n            this._updateDisplayedGeofences();\n            return geofenceId;\n        });\n    }\n    deleteSelectedGeofences() {\n        const idsToDelete = this._displayedGeofences.map((fence) => fence.geofenceId);\n        // FIXME: delete geofence api call here\n        idsToDelete.forEach((id) => {\n            this._ui.removeGeofenceListItem(id);\n            delete this._loadedGeofences[id];\n        });\n        this._displayedGeofences = [];\n        this._updateDisplayedGeofences();\n    }\n    /**********************************************************************\n     Private methods for CRUD Geofences\n     **********************************************************************/\n    _loadGeofence(geofence) {\n        // If geofence exists remove it from displayed geofences\n        if (this._loadedGeofences[geofence.geofenceId]) {\n            this._displayedGeofences = this._displayedGeofences.filter((fence) => fence.geofenceId !== geofence.geofenceId);\n        }\n        else {\n            // If geofence doesn't exist render a new list item for it\n            this._ui.renderListItem(geofence);\n        }\n        this._loadedGeofences[geofence.geofenceId] = geofence;\n        this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n    }\n    displayGeofence(geofenceId) {\n        this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n        this._updateDisplayedGeofences();\n        this._ui.updateCheckbox(geofenceId, true);\n        this.fitAllGeofences();\n    }\n    displayAllGeofences() {\n        this._displayedGeofences.push(...Object.values(this._loadedGeofences));\n        this._updateDisplayedGeofences();\n        const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n        Array.from(checkboxes).forEach((checkbox) => (checkbox.checked = this._ui.getCheckboxAllValue()));\n        this.fitAllGeofences();\n    }\n    fitGeofence(geofenceId) {\n        const mapBounds = this._map.getBounds();\n        const geofence = this._loadedGeofences[geofenceId];\n        geofence.geometry.polygon[0].forEach((coord) => {\n            mapBounds.extend(coord);\n        });\n        this._map.fitBounds(mapBounds, { padding: FIT_BOUNDS_PADDING });\n    }\n    fitAllGeofences() {\n        let shouldFitBounds = false;\n        const mapBounds = this._map.getBounds();\n        this._displayedGeofences.forEach((geofence) => {\n            geofence.geometry.polygon[0].forEach((coord) => {\n                if (!mapBounds.contains(coord)) {\n                    mapBounds.extend(coord);\n                    shouldFitBounds = true;\n                }\n            });\n        });\n        if (shouldFitBounds)\n            this._map.fitBounds(mapBounds, { padding: FIT_BOUNDS_PADDING });\n    }\n    hideGeofence(geofenceId) {\n        this._displayedGeofences = this._displayedGeofences.filter((geofence) => geofence.geofenceId !== geofenceId);\n        this._updateDisplayedGeofences();\n        this._ui.updateCheckbox(geofenceId, false);\n    }\n    hideAllGeofences() {\n        this._displayedGeofences = [];\n        this._updateDisplayedGeofences();\n        const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n        Array.from(checkboxes).forEach((checkbox) => (checkbox.checked = this._ui.getCheckboxAllValue()));\n    }\n    _updateDisplayedGeofences() {\n        const feature = getGeofenceFeatureArray(this._displayedGeofences);\n        this._drawGeofencesOutput.setData(feature);\n    }\n    displayHighlightedGeofence(geofenceId) {\n        const geofence = this._loadedGeofences[geofenceId];\n        if (!geofence) {\n            console.warn(`Geofence with id ${geofenceId} does not exist`);\n            return;\n        }\n        const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n        this._highlightedGeofenceOutput.setData(feature);\n        this._highlightedGeofenceOutput.show();\n    }\n    hideHighlightedGeofence() {\n        this._highlightedGeofenceOutput.hide();\n    }\n    /**********************************************************************\n     Methods for controlling amplify mapbox draw\n     **********************************************************************/\n    changeMode(mode) {\n        // erase existing mapbox draw content\n        this._amplifyDraw.delete(this._editingGeofenceId);\n        if (mode === \"draw_circle\") {\n            this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n        }\n        else {\n            this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n        }\n    }\n    resetGeofence() {\n        // erase existing mapbox draw content\n        this._amplifyDraw.delete(this._editingGeofenceId);\n        if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n            this.editGeofence(this._editingGeofenceId);\n        }\n        else {\n            this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n        }\n    }\n    // Disables add button and selecting items from geofence list\n    setEditingModeEnabled(enabled) {\n        enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n        enabled\n            ? this._drawGeofencesOutput.hide()\n            : this._drawGeofencesOutput.show();\n        this._ui.setGeofenceListEnabled(!enabled);\n    }\n    updateInputRadius(event) {\n        const radiusString = event.target.value;\n        const radius = parseInt(radiusString);\n        if (isNaN(radius)) {\n            return;\n        }\n        this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n    }\n    addEditableGeofence() {\n        this._editingGeofenceId = \"tempGeofence\";\n        this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n        this.setEditingModeEnabled(true);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}