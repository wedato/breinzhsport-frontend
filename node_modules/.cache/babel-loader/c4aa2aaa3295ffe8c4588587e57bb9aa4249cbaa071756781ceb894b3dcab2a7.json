{"ast":null,"code":"'use strict';\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar IsArray = require('./IsArray');\nvar IsConstructor = require('./IsConstructor');\nvar IsTypedArrayOutOfBounds = require('./IsTypedArrayOutOfBounds');\nvar TypedArrayLength = require('./TypedArrayLength');\nvar ValidateTypedArray = require('./ValidateTypedArray');\nvar availableTypedArrays = require('available-typed-arrays')();\n\n// https://262.ecma-international.org/15.0/#typedarraycreatefromconstructor\n\nmodule.exports = function TypedArrayCreateFromConstructor(constructor, argumentList) {\n  if (!IsConstructor(constructor)) {\n    throw new $TypeError('Assertion failed: `constructor` must be a constructor');\n  }\n  if (!IsArray(argumentList)) {\n    throw new $TypeError('Assertion failed: `argumentList` must be a List');\n  }\n  if (availableTypedArrays.length === 0) {\n    throw new $SyntaxError('Assertion failed: Typed Arrays are not supported in this environment');\n  }\n\n  // var newTypedArray = Construct(constructor, argumentList); // step 1\n  var newTypedArray;\n  if (argumentList.length === 0) {\n    newTypedArray = new constructor();\n  } else if (argumentList.length === 1) {\n    newTypedArray = new constructor(argumentList[0]);\n  } else if (argumentList.length === 2) {\n    newTypedArray = new constructor(argumentList[0], argumentList[1]);\n  } else {\n    newTypedArray = new constructor(argumentList[0], argumentList[1], argumentList[2]);\n  }\n  var taRecord = ValidateTypedArray(newTypedArray, 'SEQ-CST'); // step 2\n\n  if (argumentList.length === 1 && typeof argumentList[0] === 'number') {\n    // step 3\n    if (IsTypedArrayOutOfBounds(taRecord)) {\n      throw new $TypeError('new Typed Array is out of bounds'); // step 3.a\n    }\n    var length = TypedArrayLength(taRecord); // step 3.b\n    if (length < argumentList[0]) {\n      throw new $TypeError('`argumentList[0]` must be <= `newTypedArray.length`'); // step 3.c\n    }\n  }\n  return newTypedArray; // step 4\n};","map":{"version":3,"names":["$SyntaxError","require","$TypeError","IsArray","IsConstructor","IsTypedArrayOutOfBounds","TypedArrayLength","ValidateTypedArray","availableTypedArrays","module","exports","TypedArrayCreateFromConstructor","constructor","argumentList","length","newTypedArray","taRecord"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/2024/TypedArrayCreateFromConstructor.js"],"sourcesContent":["'use strict';\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\n\nvar IsArray = require('./IsArray');\nvar IsConstructor = require('./IsConstructor');\nvar IsTypedArrayOutOfBounds = require('./IsTypedArrayOutOfBounds');\nvar TypedArrayLength = require('./TypedArrayLength');\nvar ValidateTypedArray = require('./ValidateTypedArray');\n\nvar availableTypedArrays = require('available-typed-arrays')();\n\n// https://262.ecma-international.org/15.0/#typedarraycreatefromconstructor\n\nmodule.exports = function TypedArrayCreateFromConstructor(constructor, argumentList) {\n\tif (!IsConstructor(constructor)) {\n\t\tthrow new $TypeError('Assertion failed: `constructor` must be a constructor');\n\t}\n\tif (!IsArray(argumentList)) {\n\t\tthrow new $TypeError('Assertion failed: `argumentList` must be a List');\n\t}\n\tif (availableTypedArrays.length === 0) {\n\t\tthrow new $SyntaxError('Assertion failed: Typed Arrays are not supported in this environment');\n\t}\n\n\t// var newTypedArray = Construct(constructor, argumentList); // step 1\n\tvar newTypedArray;\n\tif (argumentList.length === 0) {\n\t\tnewTypedArray = new constructor();\n\t} else if (argumentList.length === 1) {\n\t\tnewTypedArray = new constructor(argumentList[0]);\n\t} else if (argumentList.length === 2) {\n\t\tnewTypedArray = new constructor(argumentList[0], argumentList[1]);\n\t} else {\n\t\tnewTypedArray = new constructor(argumentList[0], argumentList[1], argumentList[2]);\n\t}\n\n\tvar taRecord = ValidateTypedArray(newTypedArray, 'SEQ-CST'); // step 2\n\n\tif (argumentList.length === 1 && typeof argumentList[0] === 'number') { // step 3\n\t\tif (IsTypedArrayOutOfBounds(taRecord)) {\n\t\t\tthrow new $TypeError('new Typed Array is out of bounds'); // step 3.a\n\t\t}\n\t\tvar length = TypedArrayLength(taRecord); // step 3.b\n\t\tif (length < argumentList[0]) {\n\t\t\tthrow new $TypeError('`argumentList[0]` must be <= `newTypedArray.length`'); // step 3.c\n\t\t}\n\t}\n\n\treturn newTypedArray; // step 4\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC9C,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE1C,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIG,aAAa,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAII,uBAAuB,GAAGJ,OAAO,CAAC,2BAA2B,CAAC;AAClE,IAAIK,gBAAgB,GAAGL,OAAO,CAAC,oBAAoB,CAAC;AACpD,IAAIM,kBAAkB,GAAGN,OAAO,CAAC,sBAAsB,CAAC;AAExD,IAAIO,oBAAoB,GAAGP,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;;AAE9D;;AAEAQ,MAAM,CAACC,OAAO,GAAG,SAASC,+BAA+BA,CAACC,WAAW,EAAEC,YAAY,EAAE;EACpF,IAAI,CAACT,aAAa,CAACQ,WAAW,CAAC,EAAE;IAChC,MAAM,IAAIV,UAAU,CAAC,uDAAuD,CAAC;EAC9E;EACA,IAAI,CAACC,OAAO,CAACU,YAAY,CAAC,EAAE;IAC3B,MAAM,IAAIX,UAAU,CAAC,iDAAiD,CAAC;EACxE;EACA,IAAIM,oBAAoB,CAACM,MAAM,KAAK,CAAC,EAAE;IACtC,MAAM,IAAId,YAAY,CAAC,sEAAsE,CAAC;EAC/F;;EAEA;EACA,IAAIe,aAAa;EACjB,IAAIF,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9BC,aAAa,GAAG,IAAIH,WAAW,CAAC,CAAC;EAClC,CAAC,MAAM,IAAIC,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;IACrCC,aAAa,GAAG,IAAIH,WAAW,CAACC,YAAY,CAAC,CAAC,CAAC,CAAC;EACjD,CAAC,MAAM,IAAIA,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;IACrCC,aAAa,GAAG,IAAIH,WAAW,CAACC,YAAY,CAAC,CAAC,CAAC,EAAEA,YAAY,CAAC,CAAC,CAAC,CAAC;EAClE,CAAC,MAAM;IACNE,aAAa,GAAG,IAAIH,WAAW,CAACC,YAAY,CAAC,CAAC,CAAC,EAAEA,YAAY,CAAC,CAAC,CAAC,EAAEA,YAAY,CAAC,CAAC,CAAC,CAAC;EACnF;EAEA,IAAIG,QAAQ,GAAGT,kBAAkB,CAACQ,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC;;EAE7D,IAAIF,YAAY,CAACC,MAAM,KAAK,CAAC,IAAI,OAAOD,YAAY,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAAE;IACvE,IAAIR,uBAAuB,CAACW,QAAQ,CAAC,EAAE;MACtC,MAAM,IAAId,UAAU,CAAC,kCAAkC,CAAC,CAAC,CAAC;IAC3D;IACA,IAAIY,MAAM,GAAGR,gBAAgB,CAACU,QAAQ,CAAC,CAAC,CAAC;IACzC,IAAIF,MAAM,GAAGD,YAAY,CAAC,CAAC,CAAC,EAAE;MAC7B,MAAM,IAAIX,UAAU,CAAC,qDAAqD,CAAC,CAAC,CAAC;IAC9E;EACD;EAEA,OAAOa,aAAa,CAAC,CAAC;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}