{"ast":null,"code":"import { generateID } from '../lib/id.js';\nimport * as Constants from '../constants.js';\nconst Feature = function (ctx, geojson) {\n  this.ctx = ctx;\n  this.properties = geojson.properties || {};\n  this.coordinates = geojson.geometry.coordinates;\n  this.id = geojson.id || generateID();\n  this.type = geojson.geometry.type;\n};\nFeature.prototype.changed = function () {\n  this.ctx.store.featureChanged(this.id);\n};\nFeature.prototype.incomingCoords = function (coords) {\n  this.setCoordinates(coords);\n};\nFeature.prototype.setCoordinates = function (coords) {\n  this.coordinates = coords;\n  this.changed();\n};\nFeature.prototype.getCoordinates = function () {\n  return JSON.parse(JSON.stringify(this.coordinates));\n};\nFeature.prototype.setProperty = function (property, value) {\n  this.properties[property] = value;\n};\nFeature.prototype.toGeoJSON = function () {\n  return JSON.parse(JSON.stringify({\n    id: this.id,\n    type: Constants.geojsonTypes.FEATURE,\n    properties: this.properties,\n    geometry: {\n      coordinates: this.getCoordinates(),\n      type: this.type\n    }\n  }));\n};\nFeature.prototype.internal = function (mode) {\n  const properties = {\n    id: this.id,\n    meta: Constants.meta.FEATURE,\n    'meta:type': this.type,\n    active: Constants.activeStates.INACTIVE,\n    mode\n  };\n  if (this.ctx.options.userProperties) {\n    for (const name in this.properties) {\n      properties[`user_${name}`] = this.properties[name];\n    }\n  }\n  return {\n    type: Constants.geojsonTypes.FEATURE,\n    properties,\n    geometry: {\n      coordinates: this.getCoordinates(),\n      type: this.type\n    }\n  };\n};\nexport default Feature;","map":{"version":3,"names":["generateID","Constants","Feature","ctx","geojson","properties","coordinates","geometry","id","type","prototype","changed","store","featureChanged","incomingCoords","coords","setCoordinates","getCoordinates","JSON","parse","stringify","setProperty","property","value","toGeoJSON","geojsonTypes","FEATURE","internal","mode","meta","active","activeStates","INACTIVE","options","userProperties","name"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@mapbox/mapbox-gl-draw/src/feature_types/feature.js"],"sourcesContent":["import {generateID} from '../lib/id.js';\nimport * as Constants from '../constants.js';\n\nconst Feature = function(ctx, geojson) {\n  this.ctx = ctx;\n  this.properties = geojson.properties || {};\n  this.coordinates = geojson.geometry.coordinates;\n  this.id = geojson.id || generateID();\n  this.type = geojson.geometry.type;\n};\n\nFeature.prototype.changed = function() {\n  this.ctx.store.featureChanged(this.id);\n};\n\nFeature.prototype.incomingCoords = function(coords) {\n  this.setCoordinates(coords);\n};\n\nFeature.prototype.setCoordinates = function(coords) {\n  this.coordinates = coords;\n  this.changed();\n};\n\nFeature.prototype.getCoordinates = function() {\n  return JSON.parse(JSON.stringify(this.coordinates));\n};\n\nFeature.prototype.setProperty = function(property, value) {\n  this.properties[property] = value;\n};\n\nFeature.prototype.toGeoJSON = function() {\n  return JSON.parse(JSON.stringify({\n    id: this.id,\n    type: Constants.geojsonTypes.FEATURE,\n    properties: this.properties,\n    geometry: {\n      coordinates: this.getCoordinates(),\n      type: this.type\n    }\n  }));\n};\n\nFeature.prototype.internal = function(mode) {\n  const properties = {\n    id: this.id,\n    meta: Constants.meta.FEATURE,\n    'meta:type': this.type,\n    active: Constants.activeStates.INACTIVE,\n    mode\n  };\n\n  if (this.ctx.options.userProperties) {\n    for (const name in this.properties) {\n      properties[`user_${name}`] = this.properties[name];\n    }\n  }\n\n  return {\n    type: Constants.geojsonTypes.FEATURE,\n    properties,\n    geometry: {\n      coordinates: this.getCoordinates(),\n      type: this.type\n    }\n  };\n};\n\nexport default Feature;\n"],"mappings":"AAAA,SAAQA,UAAU,QAAO,cAAc;AACvC,OAAO,KAAKC,SAAS,MAAM,iBAAiB;AAE5C,MAAMC,OAAO,GAAG,SAAAA,CAASC,GAAG,EAAEC,OAAO,EAAE;EACrC,IAAI,CAACD,GAAG,GAAGA,GAAG;EACd,IAAI,CAACE,UAAU,GAAGD,OAAO,CAACC,UAAU,IAAI,CAAC,CAAC;EAC1C,IAAI,CAACC,WAAW,GAAGF,OAAO,CAACG,QAAQ,CAACD,WAAW;EAC/C,IAAI,CAACE,EAAE,GAAGJ,OAAO,CAACI,EAAE,IAAIR,UAAU,CAAC,CAAC;EACpC,IAAI,CAACS,IAAI,GAAGL,OAAO,CAACG,QAAQ,CAACE,IAAI;AACnC,CAAC;AAEDP,OAAO,CAACQ,SAAS,CAACC,OAAO,GAAG,YAAW;EACrC,IAAI,CAACR,GAAG,CAACS,KAAK,CAACC,cAAc,CAAC,IAAI,CAACL,EAAE,CAAC;AACxC,CAAC;AAEDN,OAAO,CAACQ,SAAS,CAACI,cAAc,GAAG,UAASC,MAAM,EAAE;EAClD,IAAI,CAACC,cAAc,CAACD,MAAM,CAAC;AAC7B,CAAC;AAEDb,OAAO,CAACQ,SAAS,CAACM,cAAc,GAAG,UAASD,MAAM,EAAE;EAClD,IAAI,CAACT,WAAW,GAAGS,MAAM;EACzB,IAAI,CAACJ,OAAO,CAAC,CAAC;AAChB,CAAC;AAEDT,OAAO,CAACQ,SAAS,CAACO,cAAc,GAAG,YAAW;EAC5C,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAACd,WAAW,CAAC,CAAC;AACrD,CAAC;AAEDJ,OAAO,CAACQ,SAAS,CAACW,WAAW,GAAG,UAASC,QAAQ,EAAEC,KAAK,EAAE;EACxD,IAAI,CAAClB,UAAU,CAACiB,QAAQ,CAAC,GAAGC,KAAK;AACnC,CAAC;AAEDrB,OAAO,CAACQ,SAAS,CAACc,SAAS,GAAG,YAAW;EACvC,OAAON,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC;IAC/BZ,EAAE,EAAE,IAAI,CAACA,EAAE;IACXC,IAAI,EAAER,SAAS,CAACwB,YAAY,CAACC,OAAO;IACpCrB,UAAU,EAAE,IAAI,CAACA,UAAU;IAC3BE,QAAQ,EAAE;MACRD,WAAW,EAAE,IAAI,CAACW,cAAc,CAAC,CAAC;MAClCR,IAAI,EAAE,IAAI,CAACA;IACb;EACF,CAAC,CAAC,CAAC;AACL,CAAC;AAEDP,OAAO,CAACQ,SAAS,CAACiB,QAAQ,GAAG,UAASC,IAAI,EAAE;EAC1C,MAAMvB,UAAU,GAAG;IACjBG,EAAE,EAAE,IAAI,CAACA,EAAE;IACXqB,IAAI,EAAE5B,SAAS,CAAC4B,IAAI,CAACH,OAAO;IAC5B,WAAW,EAAE,IAAI,CAACjB,IAAI;IACtBqB,MAAM,EAAE7B,SAAS,CAAC8B,YAAY,CAACC,QAAQ;IACvCJ;EACF,CAAC;EAED,IAAI,IAAI,CAACzB,GAAG,CAAC8B,OAAO,CAACC,cAAc,EAAE;IACnC,KAAK,MAAMC,IAAI,IAAI,IAAI,CAAC9B,UAAU,EAAE;MAClCA,UAAU,CAAC,QAAQ8B,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC9B,UAAU,CAAC8B,IAAI,CAAC;IACpD;EACF;EAEA,OAAO;IACL1B,IAAI,EAAER,SAAS,CAACwB,YAAY,CAACC,OAAO;IACpCrB,UAAU;IACVE,QAAQ,EAAE;MACRD,WAAW,EAAE,IAAI,CAACW,cAAc,CAAC,CAAC;MAClCR,IAAI,EAAE,IAAI,CAACA;IACb;EACF,CAAC;AACH,CAAC;AAED,eAAeP,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}