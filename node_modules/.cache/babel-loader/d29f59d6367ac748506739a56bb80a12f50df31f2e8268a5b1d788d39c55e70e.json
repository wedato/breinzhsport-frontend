{"ast":null,"code":"'use strict';\n\nvar $TypeError = require('es-errors/type');\n\n// https://262.ecma-international.org/15.0/#sec-arraybufferbytelength\n\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar isArrayBuffer = require('is-array-buffer');\nvar isSharedArrayBuffer = require('is-shared-array-buffer');\nvar arrayBufferByteLength = require('array-buffer-byte-length');\nvar isGrowable = false; // TODO: support this\n\nmodule.exports = function ArrayBufferByteLength(arrayBuffer, order) {\n  var isSAB = isSharedArrayBuffer(arrayBuffer);\n  if (!isArrayBuffer(arrayBuffer) && !isSAB) {\n    throw new $TypeError('Assertion failed: `arrayBuffer` must be an ArrayBuffer or a SharedArrayBuffer');\n  }\n  if (order !== 'SEQ-CST' && order !== 'UNORDERED') {\n    throw new $TypeError('Assertion failed: `order` must be ~SEQ-CST~ or ~UNORDERED~');\n  }\n\n  // 1. If IsSharedArrayBuffer(arrayBuffer) is true and arrayBuffer has an [[ArrayBufferByteLengthData]] internal slot, then\n  // TODO: see if IsFixedLengthArrayBuffer can be used here in the spec instead\n  if (isSAB && isGrowable) {// step 1\n    // a. Let bufferByteLengthBlock be arrayBuffer.[[ArrayBufferByteLengthData]].\n    // b. Let rawLength be GetRawBytesFromSharedBlock(bufferByteLengthBlock, 0, BIGUINT64, true, order).\n    // c. Let isLittleEndian be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n    // d. Return ℝ(RawBytesToNumeric(BIGUINT64, rawLength, isLittleEndian)).\n  }\n  if (IsDetachedBuffer(arrayBuffer)) {\n    throw new $TypeError('Assertion failed: `arrayBuffer` must not be detached'); // step 2\n  }\n  return arrayBufferByteLength(arrayBuffer);\n};","map":{"version":3,"names":["$TypeError","require","IsDetachedBuffer","isArrayBuffer","isSharedArrayBuffer","arrayBufferByteLength","isGrowable","module","exports","ArrayBufferByteLength","arrayBuffer","order","isSAB"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/2024/ArrayBufferByteLength.js"],"sourcesContent":["'use strict';\n\nvar $TypeError = require('es-errors/type');\n\n// https://262.ecma-international.org/15.0/#sec-arraybufferbytelength\n\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\n\nvar isArrayBuffer = require('is-array-buffer');\nvar isSharedArrayBuffer = require('is-shared-array-buffer');\nvar arrayBufferByteLength = require('array-buffer-byte-length');\n\nvar isGrowable = false; // TODO: support this\n\nmodule.exports = function ArrayBufferByteLength(arrayBuffer, order) {\n\tvar isSAB = isSharedArrayBuffer(arrayBuffer);\n\tif (!isArrayBuffer(arrayBuffer) && !isSAB) {\n\t\tthrow new $TypeError('Assertion failed: `arrayBuffer` must be an ArrayBuffer or a SharedArrayBuffer');\n\t}\n\tif (order !== 'SEQ-CST' && order !== 'UNORDERED') {\n\t\tthrow new $TypeError('Assertion failed: `order` must be ~SEQ-CST~ or ~UNORDERED~');\n\t}\n\n\t// 1. If IsSharedArrayBuffer(arrayBuffer) is true and arrayBuffer has an [[ArrayBufferByteLengthData]] internal slot, then\n\t// TODO: see if IsFixedLengthArrayBuffer can be used here in the spec instead\n\tif (isSAB && isGrowable) { // step 1\n\t\t// a. Let bufferByteLengthBlock be arrayBuffer.[[ArrayBufferByteLengthData]].\n\t\t// b. Let rawLength be GetRawBytesFromSharedBlock(bufferByteLengthBlock, 0, BIGUINT64, true, order).\n\t\t// c. Let isLittleEndian be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.\n\t\t// d. Return ℝ(RawBytesToNumeric(BIGUINT64, rawLength, isLittleEndian)).\n\t}\n\n\tif (IsDetachedBuffer(arrayBuffer)) {\n\t\tthrow new $TypeError('Assertion failed: `arrayBuffer` must not be detached'); // step 2\n\t}\n\n\treturn arrayBufferByteLength(arrayBuffer);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,UAAU,GAAGC,OAAO,CAAC,gBAAgB,CAAC;;AAE1C;;AAEA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAEpD,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AAC3D,IAAII,qBAAqB,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AAE/D,IAAIK,UAAU,GAAG,KAAK,CAAC,CAAC;;AAExBC,MAAM,CAACC,OAAO,GAAG,SAASC,qBAAqBA,CAACC,WAAW,EAAEC,KAAK,EAAE;EACnE,IAAIC,KAAK,GAAGR,mBAAmB,CAACM,WAAW,CAAC;EAC5C,IAAI,CAACP,aAAa,CAACO,WAAW,CAAC,IAAI,CAACE,KAAK,EAAE;IAC1C,MAAM,IAAIZ,UAAU,CAAC,+EAA+E,CAAC;EACtG;EACA,IAAIW,KAAK,KAAK,SAAS,IAAIA,KAAK,KAAK,WAAW,EAAE;IACjD,MAAM,IAAIX,UAAU,CAAC,4DAA4D,CAAC;EACnF;;EAEA;EACA;EACA,IAAIY,KAAK,IAAIN,UAAU,EAAE,CAAE;IAC1B;IACA;IACA;IACA;EAAA;EAGD,IAAIJ,gBAAgB,CAACQ,WAAW,CAAC,EAAE;IAClC,MAAM,IAAIV,UAAU,CAAC,sDAAsD,CAAC,CAAC,CAAC;EAC/E;EAEA,OAAOK,qBAAqB,CAACK,WAAW,CAAC;AAC1C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}