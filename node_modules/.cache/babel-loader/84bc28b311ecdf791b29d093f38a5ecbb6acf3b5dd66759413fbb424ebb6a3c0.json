{"ast":null,"code":"// Version simplifiée de X-Ray pour le frontend\n// Cette version est compatible avec le navigateur et ne dépend pas de aws-xray-sdk-core\n// Mock d'AWSXRay pour le frontend\nconst AWSXRay={// Configuration\nserviceName:\"breinzhsport-frontend\",// Méthodes\nsetServiceName:name=>{AWSXRay.serviceName=name;console.log(`X-Ray service name set to: ${name}`);},middleware:{setSamplingRules:rules=>{console.log(\"X-Ray sampling rules set:\",rules);}},beginSegment:name=>{console.log(`X-Ray segment started: ${name}`);const startTime=Date.now();return{addAnnotation:(key,value)=>{console.log(`X-Ray annotation added: ${key}=${value}`);},addError:error=>{console.error(`X-Ray segment error: ${error.message||error}`);},close:()=>{const duration=Date.now()-startTime;console.log(`X-Ray segment closed: ${name} (duration: ${duration}ms)`);}};}};// Fonction pour tracer les requêtes API\nexport const traceApiCall=async(apiName,operation,params)=>{console.log(`Tracing API call: ${apiName}.${operation}`,params);// Cette fonction peut être utilisée pour enregistrer des métriques ou des logs\n};export default AWSXRay;","map":{"version":3,"names":["AWSXRay","serviceName","setServiceName","name","console","log","middleware","setSamplingRules","rules","beginSegment","startTime","Date","now","addAnnotation","key","value","addError","error","message","close","duration","traceApiCall","apiName","operation","params"],"sources":["C:/Users/jonat/aws_poc/frontend/src/xray-config.js"],"sourcesContent":["// Version simplifiée de X-Ray pour le frontend\n// Cette version est compatible avec le navigateur et ne dépend pas de aws-xray-sdk-core\n\n// Mock d'AWSXRay pour le frontend\nconst AWSXRay = {\n  // Configuration\n  serviceName: \"breinzhsport-frontend\",\n\n  // Méthodes\n  setServiceName: (name) => {\n    AWSXRay.serviceName = name;\n    console.log(`X-Ray service name set to: ${name}`);\n  },\n\n  middleware: {\n    setSamplingRules: (rules) => {\n      console.log(\"X-Ray sampling rules set:\", rules);\n    },\n  },\n\n  beginSegment: (name) => {\n    console.log(`X-Ray segment started: ${name}`);\n    const startTime = Date.now();\n\n    return {\n      addAnnotation: (key, value) => {\n        console.log(`X-Ray annotation added: ${key}=${value}`);\n      },\n      addError: (error) => {\n        console.error(`X-Ray segment error: ${error.message || error}`);\n      },\n      close: () => {\n        const duration = Date.now() - startTime;\n        console.log(`X-Ray segment closed: ${name} (duration: ${duration}ms)`);\n      },\n    };\n  },\n};\n\n// Fonction pour tracer les requêtes API\nexport const traceApiCall = async (apiName, operation, params) => {\n  console.log(`Tracing API call: ${apiName}.${operation}`, params);\n  // Cette fonction peut être utilisée pour enregistrer des métriques ou des logs\n};\n\nexport default AWSXRay;\n"],"mappings":"AAAA;AACA;AAEA;AACA,KAAM,CAAAA,OAAO,CAAG,CACd;AACAC,WAAW,CAAE,uBAAuB,CAEpC;AACAC,cAAc,CAAGC,IAAI,EAAK,CACxBH,OAAO,CAACC,WAAW,CAAGE,IAAI,CAC1BC,OAAO,CAACC,GAAG,CAAC,8BAA8BF,IAAI,EAAE,CAAC,CACnD,CAAC,CAEDG,UAAU,CAAE,CACVC,gBAAgB,CAAGC,KAAK,EAAK,CAC3BJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAEG,KAAK,CAAC,CACjD,CACF,CAAC,CAEDC,YAAY,CAAGN,IAAI,EAAK,CACtBC,OAAO,CAACC,GAAG,CAAC,0BAA0BF,IAAI,EAAE,CAAC,CAC7C,KAAM,CAAAO,SAAS,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAE5B,MAAO,CACLC,aAAa,CAAEA,CAACC,GAAG,CAAEC,KAAK,GAAK,CAC7BX,OAAO,CAACC,GAAG,CAAC,2BAA2BS,GAAG,IAAIC,KAAK,EAAE,CAAC,CACxD,CAAC,CACDC,QAAQ,CAAGC,KAAK,EAAK,CACnBb,OAAO,CAACa,KAAK,CAAC,wBAAwBA,KAAK,CAACC,OAAO,EAAID,KAAK,EAAE,CAAC,CACjE,CAAC,CACDE,KAAK,CAAEA,CAAA,GAAM,CACX,KAAM,CAAAC,QAAQ,CAAGT,IAAI,CAACC,GAAG,CAAC,CAAC,CAAGF,SAAS,CACvCN,OAAO,CAACC,GAAG,CAAC,yBAAyBF,IAAI,eAAeiB,QAAQ,KAAK,CAAC,CACxE,CACF,CAAC,CACH,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAAA,CAAOC,OAAO,CAAEC,SAAS,CAAEC,MAAM,GAAK,CAChEpB,OAAO,CAACC,GAAG,CAAC,qBAAqBiB,OAAO,IAAIC,SAAS,EAAE,CAAEC,MAAM,CAAC,CAChE;AACF,CAAC,CAED,cAAe,CAAAxB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}