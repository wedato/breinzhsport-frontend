{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nexport function getUnmarshalledStream(source, options) {\n  var _a;\n  return _a = {}, _a[Symbol.asyncIterator] = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event_1, deserialized, e_1_1;\n      var _a, _b;\n      var e_1, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 12, 13, 18]);\n            source_1 = __asyncValues(source);\n            _d.label = 1;\n          case 1:\n            return [4, __await(source_1.next())];\n          case 2:\n            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3, 11];\n            chunk = source_1_1.value;\n            message = options.eventStreamCodec.decode(chunk);\n            messageType = message.headers[\":message-type\"].value;\n            if (!(messageType === \"error\")) return [3, 3];\n            unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            throw unmodeledError;\n          case 3:\n            if (!(messageType === \"exception\")) return [3, 5];\n            code = message.headers[\":exception-type\"].value;\n            exception = (_a = {}, _a[code] = message, _a);\n            return [4, __await(options.deserializer(exception))];\n          case 4:\n            deserializedException = _d.sent();\n            if (deserializedException.$unknown) {\n              error = new Error(options.toUtf8(message.body));\n              error.name = code;\n              throw error;\n            }\n            throw deserializedException[code];\n          case 5:\n            if (!(messageType === \"event\")) return [3, 9];\n            event_1 = (_b = {}, _b[message.headers[\":event-type\"].value] = message, _b);\n            return [4, __await(options.deserializer(event_1))];\n          case 6:\n            deserialized = _d.sent();\n            if (deserialized.$unknown) return [3, 10];\n            return [4, __await(deserialized)];\n          case 7:\n            return [4, _d.sent()];\n          case 8:\n            _d.sent();\n            return [3, 10];\n          case 9:\n            throw Error(\"Unrecognizable event type: \".concat(message.headers[\":event-type\"].value));\n          case 10:\n            return [3, 1];\n          case 11:\n            return [3, 18];\n          case 12:\n            e_1_1 = _d.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3, 18];\n          case 13:\n            _d.trys.push([13,, 16, 17]);\n            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3, 15];\n            return [4, __await(_c.call(source_1))];\n          case 14:\n            _d.sent();\n            _d.label = 15;\n          case 15:\n            return [3, 17];\n          case 16:\n            if (e_1) throw e_1.error;\n            return [7];\n          case 17:\n            return [7];\n          case 18:\n            return [2];\n        }\n      });\n    });\n  }, _a;\n}","map":{"version":3,"names":["__asyncGenerator","__asyncValues","__await","__generator","getUnmarshalledStream","source","options","_a","Symbol","asyncIterator","arguments","source_1","source_1_1","chunk","message","messageType","unmodeledError","code","exception","deserializedException","error","event_1","deserialized","e_1_1","_b","e_1","_c","_d","label","trys","push","next","sent","done","value","eventStreamCodec","decode","headers","Error","name","deserializer","$unknown","toUtf8","body","concat","return","call"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@aws-sdk/client-lex-runtime-v2/node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js"],"sourcesContent":["import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nexport function getUnmarshalledStream(source, options) {\n    var _a;\n    return _a = {},\n        _a[Symbol.asyncIterator] = function () {\n            return __asyncGenerator(this, arguments, function () {\n                var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event_1, deserialized, e_1_1;\n                var _a, _b;\n                var e_1, _c;\n                return __generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0:\n                            _d.trys.push([0, 12, 13, 18]);\n                            source_1 = __asyncValues(source);\n                            _d.label = 1;\n                        case 1: return [4, __await(source_1.next())];\n                        case 2:\n                            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3, 11];\n                            chunk = source_1_1.value;\n                            message = options.eventStreamCodec.decode(chunk);\n                            messageType = message.headers[\":message-type\"].value;\n                            if (!(messageType === \"error\")) return [3, 3];\n                            unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n                            unmodeledError.name = message.headers[\":error-code\"].value;\n                            throw unmodeledError;\n                        case 3:\n                            if (!(messageType === \"exception\")) return [3, 5];\n                            code = message.headers[\":exception-type\"].value;\n                            exception = (_a = {}, _a[code] = message, _a);\n                            return [4, __await(options.deserializer(exception))];\n                        case 4:\n                            deserializedException = _d.sent();\n                            if (deserializedException.$unknown) {\n                                error = new Error(options.toUtf8(message.body));\n                                error.name = code;\n                                throw error;\n                            }\n                            throw deserializedException[code];\n                        case 5:\n                            if (!(messageType === \"event\")) return [3, 9];\n                            event_1 = (_b = {},\n                                _b[message.headers[\":event-type\"].value] = message,\n                                _b);\n                            return [4, __await(options.deserializer(event_1))];\n                        case 6:\n                            deserialized = _d.sent();\n                            if (deserialized.$unknown)\n                                return [3, 10];\n                            return [4, __await(deserialized)];\n                        case 7: return [4, _d.sent()];\n                        case 8:\n                            _d.sent();\n                            return [3, 10];\n                        case 9: throw Error(\"Unrecognizable event type: \".concat(message.headers[\":event-type\"].value));\n                        case 10: return [3, 1];\n                        case 11: return [3, 18];\n                        case 12:\n                            e_1_1 = _d.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3, 18];\n                        case 13:\n                            _d.trys.push([13, , 16, 17]);\n                            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3, 15];\n                            return [4, __await(_c.call(source_1))];\n                        case 14:\n                            _d.sent();\n                            _d.label = 15;\n                        case 15: return [3, 17];\n                        case 16:\n                            if (e_1) throw e_1.error;\n                            return [7];\n                        case 17: return [7];\n                        case 18: return [2];\n                    }\n                });\n            });\n        },\n        _a;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}