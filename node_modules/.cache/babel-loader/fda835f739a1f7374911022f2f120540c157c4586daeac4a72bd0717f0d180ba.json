{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.captureAWSClient = void 0;\nconst service_error_classification_1 = require(\"@smithy/service-error-classification\");\nconst aws_1 = __importDefault(require(\"../segments/attributes/aws\"));\nconst querystring_1 = require(\"querystring\");\nconst subsegment_1 = __importDefault(require(\"../segments/attributes/subsegment\"));\nconst contextUtils = require('../context_utils');\nconst logger = require('../logger');\nconst {\n  safeParseInt\n} = require('../utils');\nconst utils_1 = require(\"../utils\");\nconst XRAY_PLUGIN_NAME = 'XRaySDKInstrumentation';\nconst buildAttributesFromMetadata = async (service, operation, region, commandInput, res, error) => {\n  var _a, _b, _c;\n  const {\n    extendedRequestId,\n    requestId,\n    httpStatusCode: statusCode,\n    attempts\n  } = ((_a = res === null || res === void 0 ? void 0 : res.output) === null || _a === void 0 ? void 0 : _a.$metadata) || (error === null || error === void 0 ? void 0 : error.$metadata);\n  const aws = new aws_1.default({\n    extendedRequestId,\n    requestId,\n    retryCount: attempts,\n    data: res === null || res === void 0 ? void 0 : res.output,\n    request: {\n      operation,\n      params: commandInput,\n      httpRequest: {\n        region,\n        statusCode\n      }\n    }\n  }, service);\n  const http = {};\n  if (statusCode) {\n    http.response = {};\n    http.response.status = statusCode;\n  }\n  if (((_b = res === null || res === void 0 ? void 0 : res.response) === null || _b === void 0 ? void 0 : _b.headers) && ((_c = res === null || res === void 0 ? void 0 : res.response) === null || _c === void 0 ? void 0 : _c.headers['content-length']) !== undefined) {\n    if (!http.response) {\n      http.response = {};\n    }\n    http.response.content_length = safeParseInt(res.response.headers['content-length']);\n  }\n  return [aws, http];\n};\nfunction addFlags(http, subsegment, err) {\n  var _a, _b, _c;\n  if (err && (0, service_error_classification_1.isThrottlingError)(err)) {\n    subsegment.addThrottleFlag();\n  } else if (safeParseInt((_a = http.response) === null || _a === void 0 ? void 0 : _a.status) === 429 || safeParseInt((_b = err === null || err === void 0 ? void 0 : err.$metadata) === null || _b === void 0 ? void 0 : _b.httpStatusCode) === 429) {\n    subsegment.addThrottleFlag();\n  }\n  const cause = (0, utils_1.getCauseTypeFromHttpStatus)(safeParseInt((_c = http.response) === null || _c === void 0 ? void 0 : _c.status));\n  if (cause === 'fault') {\n    subsegment.addFaultFlag();\n  } else if (cause === 'error') {\n    subsegment.addErrorFlag();\n  }\n}\nconst getXRayMiddleware = (config, manualSegment) => (next, context) => async args => {\n  var _a;\n  const segment = contextUtils.isAutomaticMode() ? contextUtils.resolveSegment() : manualSegment;\n  const {\n    clientName,\n    commandName\n  } = context;\n  const commandInput = (_a = args === null || args === void 0 ? void 0 : args.input) !== null && _a !== void 0 ? _a : {};\n  const commandOperation = commandName.slice(0, -7); // Strip trailing \"Command\" string\n  const operation = commandOperation.charAt(0).toLowerCase() + commandOperation.slice(1);\n  const service = clientName.slice(0, -6); // Strip trailing \"Client\" string\n  if (!segment) {\n    const output = service + '.' + operation;\n    if (!contextUtils.isAutomaticMode()) {\n      logger.getLogger().info('Call ' + output + ' requires a segment object' + ' passed to captureAWSv3Client for tracing in manual mode. Ignoring.');\n    } else {\n      logger.getLogger().info('Call ' + output + ' is missing the sub/segment context for automatic mode. Ignoring.');\n    }\n    return next(args);\n  }\n  let subsegment;\n  if (segment.notTraced) {\n    subsegment = segment.addNewSubsegmentWithoutSampling(service);\n  } else {\n    subsegment = segment.addNewSubsegment(service);\n  }\n  subsegment.addAttribute('namespace', 'aws');\n  const parent = segment instanceof subsegment_1.default ? segment.segment : segment;\n  const data = parent.segment ? parent.segment.additionalTraceData : parent.additionalTraceData;\n  let traceHeader = (0, querystring_1.stringify)({\n    Root: parent.trace_id,\n    Parent: subsegment.id,\n    Sampled: subsegment.notTraced ? '0' : '1'\n  }, ';');\n  if (data != null) {\n    for (const [key, value] of Object.entries(data)) {\n      traceHeader += ';' + key + '=' + value;\n    }\n  }\n  if (!segment.noOp) {\n    args.request.headers['X-Amzn-Trace-Id'] = traceHeader;\n  }\n  let res;\n  try {\n    res = await next(args);\n    if (!res) {\n      throw new Error('Failed to get response from instrumented AWS Client.');\n    }\n    const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), commandInput, res, null);\n    subsegment.addAttribute('aws', aws);\n    subsegment.addAttribute('http', http);\n    addFlags(http, subsegment);\n    subsegment.close();\n    return res;\n  } catch (err) {\n    if (err.$metadata) {\n      const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), commandInput, null, err);\n      subsegment.addAttribute('aws', aws);\n      subsegment.addAttribute('http', http);\n      addFlags(http, subsegment, err);\n    }\n    const errObj = {\n      message: err.message,\n      name: err.name,\n      stack: err.stack || new Error().stack\n    };\n    subsegment.close(errObj, true);\n    throw err;\n  }\n};\nconst xRayMiddlewareOptions = {\n  name: XRAY_PLUGIN_NAME,\n  step: 'build'\n};\nconst getXRayPlugin = (config, manualSegment) => ({\n  applyToStack: stack => {\n    stack.add(getXRayMiddleware(config, manualSegment), xRayMiddlewareOptions);\n  }\n});\n/**\n * Instruments AWS SDK V3 clients with X-Ray via middleware.\n *\n * @param client - AWS SDK V3 client to instrument\n * @param manualSegment - Parent segment or subsegment that is passed in for manual mode users\n * @returns - the client with the X-Ray instrumentation middleware added to its middleware stack\n */\nfunction captureAWSClient(client, manualSegment) {\n  // Remove existing middleware to ensure operation is idempotent\n  client.middlewareStack.remove(XRAY_PLUGIN_NAME);\n  client.middlewareStack.use(getXRayPlugin(client.config, manualSegment));\n  return client;\n}\nexports.captureAWSClient = captureAWSClient;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","captureAWSClient","service_error_classification_1","require","aws_1","querystring_1","subsegment_1","contextUtils","logger","safeParseInt","utils_1","XRAY_PLUGIN_NAME","buildAttributesFromMetadata","service","operation","region","commandInput","res","error","_a","_b","_c","extendedRequestId","requestId","httpStatusCode","statusCode","attempts","output","$metadata","aws","default","retryCount","data","request","params","httpRequest","http","response","status","headers","undefined","content_length","addFlags","subsegment","err","isThrottlingError","addThrottleFlag","cause","getCauseTypeFromHttpStatus","addFaultFlag","addErrorFlag","getXRayMiddleware","config","manualSegment","next","context","args","segment","isAutomaticMode","resolveSegment","clientName","commandName","input","commandOperation","slice","charAt","toLowerCase","getLogger","info","notTraced","addNewSubsegmentWithoutSampling","addNewSubsegment","addAttribute","parent","additionalTraceData","traceHeader","stringify","Root","trace_id","Parent","id","Sampled","key","entries","noOp","Error","close","errObj","message","name","stack","xRayMiddlewareOptions","step","getXRayPlugin","applyToStack","add","client","middlewareStack","remove","use"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/patchers/aws3_p.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.captureAWSClient = void 0;\nconst service_error_classification_1 = require(\"@smithy/service-error-classification\");\nconst aws_1 = __importDefault(require(\"../segments/attributes/aws\"));\nconst querystring_1 = require(\"querystring\");\nconst subsegment_1 = __importDefault(require(\"../segments/attributes/subsegment\"));\nconst contextUtils = require('../context_utils');\nconst logger = require('../logger');\nconst { safeParseInt } = require('../utils');\nconst utils_1 = require(\"../utils\");\nconst XRAY_PLUGIN_NAME = 'XRaySDKInstrumentation';\nconst buildAttributesFromMetadata = async (service, operation, region, commandInput, res, error) => {\n    var _a, _b, _c;\n    const { extendedRequestId, requestId, httpStatusCode: statusCode, attempts } = ((_a = res === null || res === void 0 ? void 0 : res.output) === null || _a === void 0 ? void 0 : _a.$metadata) || (error === null || error === void 0 ? void 0 : error.$metadata);\n    const aws = new aws_1.default({\n        extendedRequestId,\n        requestId,\n        retryCount: attempts,\n        data: res === null || res === void 0 ? void 0 : res.output,\n        request: {\n            operation,\n            params: commandInput,\n            httpRequest: {\n                region,\n                statusCode,\n            },\n        },\n    }, service);\n    const http = {};\n    if (statusCode) {\n        http.response = {};\n        http.response.status = statusCode;\n    }\n    if (((_b = res === null || res === void 0 ? void 0 : res.response) === null || _b === void 0 ? void 0 : _b.headers) && ((_c = res === null || res === void 0 ? void 0 : res.response) === null || _c === void 0 ? void 0 : _c.headers['content-length']) !== undefined) {\n        if (!http.response) {\n            http.response = {};\n        }\n        http.response.content_length = safeParseInt(res.response.headers['content-length']);\n    }\n    return [aws, http];\n};\nfunction addFlags(http, subsegment, err) {\n    var _a, _b, _c;\n    if (err && (0, service_error_classification_1.isThrottlingError)(err)) {\n        subsegment.addThrottleFlag();\n    }\n    else if (safeParseInt((_a = http.response) === null || _a === void 0 ? void 0 : _a.status) === 429 || safeParseInt((_b = err === null || err === void 0 ? void 0 : err.$metadata) === null || _b === void 0 ? void 0 : _b.httpStatusCode) === 429) {\n        subsegment.addThrottleFlag();\n    }\n    const cause = (0, utils_1.getCauseTypeFromHttpStatus)(safeParseInt((_c = http.response) === null || _c === void 0 ? void 0 : _c.status));\n    if (cause === 'fault') {\n        subsegment.addFaultFlag();\n    }\n    else if (cause === 'error') {\n        subsegment.addErrorFlag();\n    }\n}\nconst getXRayMiddleware = (config, manualSegment) => (next, context) => async (args) => {\n    var _a;\n    const segment = contextUtils.isAutomaticMode() ? contextUtils.resolveSegment() : manualSegment;\n    const { clientName, commandName } = context;\n    const commandInput = (_a = args === null || args === void 0 ? void 0 : args.input) !== null && _a !== void 0 ? _a : {};\n    const commandOperation = commandName.slice(0, -7); // Strip trailing \"Command\" string\n    const operation = commandOperation.charAt(0).toLowerCase() + commandOperation.slice(1);\n    const service = clientName.slice(0, -6); // Strip trailing \"Client\" string\n    if (!segment) {\n        const output = service + '.' + operation;\n        if (!contextUtils.isAutomaticMode()) {\n            logger.getLogger().info('Call ' + output + ' requires a segment object' +\n                ' passed to captureAWSv3Client for tracing in manual mode. Ignoring.');\n        }\n        else {\n            logger.getLogger().info('Call ' + output +\n                ' is missing the sub/segment context for automatic mode. Ignoring.');\n        }\n        return next(args);\n    }\n    let subsegment;\n    if (segment.notTraced) {\n        subsegment = segment.addNewSubsegmentWithoutSampling(service);\n    }\n    else {\n        subsegment = segment.addNewSubsegment(service);\n    }\n    subsegment.addAttribute('namespace', 'aws');\n    const parent = (segment instanceof subsegment_1.default ? segment.segment : segment);\n    const data = parent.segment ? parent.segment.additionalTraceData : parent.additionalTraceData;\n    let traceHeader = (0, querystring_1.stringify)({\n        Root: parent.trace_id,\n        Parent: subsegment.id,\n        Sampled: subsegment.notTraced ? '0' : '1',\n    }, ';');\n    if (data != null) {\n        for (const [key, value] of Object.entries(data)) {\n            traceHeader += ';' + key + '=' + value;\n        }\n    }\n    if (!segment.noOp) {\n        args.request.headers['X-Amzn-Trace-Id'] = traceHeader;\n    }\n    let res;\n    try {\n        res = await next(args);\n        if (!res) {\n            throw new Error('Failed to get response from instrumented AWS Client.');\n        }\n        const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), commandInput, res, null);\n        subsegment.addAttribute('aws', aws);\n        subsegment.addAttribute('http', http);\n        addFlags(http, subsegment);\n        subsegment.close();\n        return res;\n    }\n    catch (err) {\n        if (err.$metadata) {\n            const [aws, http] = await buildAttributesFromMetadata(service, operation, await config.region(), commandInput, null, err);\n            subsegment.addAttribute('aws', aws);\n            subsegment.addAttribute('http', http);\n            addFlags(http, subsegment, err);\n        }\n        const errObj = { message: err.message, name: err.name, stack: err.stack || new Error().stack };\n        subsegment.close(errObj, true);\n        throw err;\n    }\n};\nconst xRayMiddlewareOptions = {\n    name: XRAY_PLUGIN_NAME,\n    step: 'build',\n};\nconst getXRayPlugin = (config, manualSegment) => ({\n    applyToStack: (stack) => {\n        stack.add(getXRayMiddleware(config, manualSegment), xRayMiddlewareOptions);\n    },\n});\n/**\n * Instruments AWS SDK V3 clients with X-Ray via middleware.\n *\n * @param client - AWS SDK V3 client to instrument\n * @param manualSegment - Parent segment or subsegment that is passed in for manual mode users\n * @returns - the client with the X-Ray instrumentation middleware added to its middleware stack\n */\nfunction captureAWSClient(client, manualSegment) {\n    // Remove existing middleware to ensure operation is idempotent\n    client.middlewareStack.remove(XRAY_PLUGIN_NAME);\n    client.middlewareStack.use(getXRayPlugin(client.config, manualSegment));\n    return client;\n}\nexports.captureAWSClient = captureAWSClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}