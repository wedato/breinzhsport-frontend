{"ast":null,"code":"'use strict';\n\nvar $TypeError = require('es-errors/type');\nvar hasOwnProperty = require('./HasOwnProperty');\nvar ToBigInt64 = require('./ToBigInt64');\nvar ToBigUint64 = require('./ToBigUint64');\nvar ToInt16 = require('./ToInt16');\nvar ToInt32 = require('./ToInt32');\nvar ToInt8 = require('./ToInt8');\nvar ToUint16 = require('./ToUint16');\nvar ToUint32 = require('./ToUint32');\nvar ToUint8 = require('./ToUint8');\nvar ToUint8Clamp = require('./ToUint8Clamp');\nvar valueToFloat32Bytes = require('../helpers/valueToFloat32Bytes');\nvar valueToFloat64Bytes = require('../helpers/valueToFloat64Bytes');\nvar integerToNBytes = require('../helpers/integerToNBytes');\nvar keys = require('object-keys');\n\n// https://262.ecma-international.org/15.0/#table-the-typedarray-constructors\nvar TypeToSizes = {\n  __proto__: null,\n  INT8: 1,\n  UINT8: 1,\n  UINT8C: 1,\n  INT16: 2,\n  UINT16: 2,\n  INT32: 4,\n  UINT32: 4,\n  BIGINT64: 8,\n  BIGUINT64: 8,\n  FLOAT32: 4,\n  FLOAT64: 8\n};\nvar TypeToAO = {\n  __proto__: null,\n  INT8: ToInt8,\n  UINT8: ToUint8,\n  UINT8C: ToUint8Clamp,\n  INT16: ToInt16,\n  UINT16: ToUint16,\n  INT32: ToInt32,\n  UINT32: ToUint32,\n  BIGINT64: ToBigInt64,\n  BIGUINT64: ToBigUint64\n};\n\n// https://262.ecma-international.org/15.0/#sec-numerictorawbytes\n\nmodule.exports = function NumericToRawBytes(type, value, isLittleEndian) {\n  if (typeof type !== 'string' || !hasOwnProperty(TypeToSizes, type)) {\n    throw new $TypeError('Assertion failed: `type` must be a TypedArray element type: ' + keys(TypeToSizes));\n  }\n  if (typeof value !== 'number' && typeof value !== 'bigint') {\n    throw new $TypeError('Assertion failed: `value` must be a Number or a BigInt');\n  }\n  if (typeof isLittleEndian !== 'boolean') {\n    throw new $TypeError('Assertion failed: `isLittleEndian` must be a Boolean');\n  }\n  if (type === 'FLOAT32') {\n    // step 1\n    return valueToFloat32Bytes(value, isLittleEndian);\n  } else if (type === 'FLOAT64') {\n    // step 2\n    return valueToFloat64Bytes(value, isLittleEndian);\n  } // step 3\n\n  var n = TypeToSizes[type]; // step 3.a\n\n  var convOp = TypeToAO[type]; // step 3.b\n\n  var intValue = convOp(value); // step 3.c\n\n  return integerToNBytes(intValue, n, isLittleEndian); // step 3.d, 3.e, 4\n};","map":{"version":3,"names":["$TypeError","require","hasOwnProperty","ToBigInt64","ToBigUint64","ToInt16","ToInt32","ToInt8","ToUint16","ToUint32","ToUint8","ToUint8Clamp","valueToFloat32Bytes","valueToFloat64Bytes","integerToNBytes","keys","TypeToSizes","__proto__","INT8","UINT8","UINT8C","INT16","UINT16","INT32","UINT32","BIGINT64","BIGUINT64","FLOAT32","FLOAT64","TypeToAO","module","exports","NumericToRawBytes","type","value","isLittleEndian","n","convOp","intValue"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/2024/NumericToRawBytes.js"],"sourcesContent":["'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar hasOwnProperty = require('./HasOwnProperty');\nvar ToBigInt64 = require('./ToBigInt64');\nvar ToBigUint64 = require('./ToBigUint64');\nvar ToInt16 = require('./ToInt16');\nvar ToInt32 = require('./ToInt32');\nvar ToInt8 = require('./ToInt8');\nvar ToUint16 = require('./ToUint16');\nvar ToUint32 = require('./ToUint32');\nvar ToUint8 = require('./ToUint8');\nvar ToUint8Clamp = require('./ToUint8Clamp');\n\nvar valueToFloat32Bytes = require('../helpers/valueToFloat32Bytes');\nvar valueToFloat64Bytes = require('../helpers/valueToFloat64Bytes');\nvar integerToNBytes = require('../helpers/integerToNBytes');\n\nvar keys = require('object-keys');\n\n// https://262.ecma-international.org/15.0/#table-the-typedarray-constructors\nvar TypeToSizes = {\n\t__proto__: null,\n\tINT8: 1,\n\tUINT8: 1,\n\tUINT8C: 1,\n\tINT16: 2,\n\tUINT16: 2,\n\tINT32: 4,\n\tUINT32: 4,\n\tBIGINT64: 8,\n\tBIGUINT64: 8,\n\tFLOAT32: 4,\n\tFLOAT64: 8\n};\n\nvar TypeToAO = {\n\t__proto__: null,\n\tINT8: ToInt8,\n\tUINT8: ToUint8,\n\tUINT8C: ToUint8Clamp,\n\tINT16: ToInt16,\n\tUINT16: ToUint16,\n\tINT32: ToInt32,\n\tUINT32: ToUint32,\n\tBIGINT64: ToBigInt64,\n\tBIGUINT64: ToBigUint64\n};\n\n// https://262.ecma-international.org/15.0/#sec-numerictorawbytes\n\nmodule.exports = function NumericToRawBytes(type, value, isLittleEndian) {\n\tif (typeof type !== 'string' || !hasOwnProperty(TypeToSizes, type)) {\n\t\tthrow new $TypeError('Assertion failed: `type` must be a TypedArray element type: ' + keys(TypeToSizes));\n\t}\n\tif (typeof value !== 'number' && typeof value !== 'bigint') {\n\t\tthrow new $TypeError('Assertion failed: `value` must be a Number or a BigInt');\n\t}\n\tif (typeof isLittleEndian !== 'boolean') {\n\t\tthrow new $TypeError('Assertion failed: `isLittleEndian` must be a Boolean');\n\t}\n\n\tif (type === 'FLOAT32') { // step 1\n\t\treturn valueToFloat32Bytes(value, isLittleEndian);\n\t} else if (type === 'FLOAT64') { // step 2\n\t\treturn valueToFloat64Bytes(value, isLittleEndian);\n\t} // step 3\n\n\tvar n = TypeToSizes[type]; // step 3.a\n\n\tvar convOp = TypeToAO[type]; // step 3.b\n\n\tvar intValue = convOp(value); // step 3.c\n\n\treturn integerToNBytes(intValue, n, isLittleEndian); // step 3.d, 3.e, 4\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}