{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetFaceDetectionRequest, GetFaceDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetFaceDetectionCommand, serializeAws_json1_1GetFaceDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets face detection results for a Amazon Rekognition Video analysis started by <a>StartFaceDetection</a>.</p>\n *          <p>Face detection with Amazon Rekognition Video is an asynchronous operation. You start face detection by calling <a>StartFaceDetection</a>\n *      which returns a job identifier (<code>JobId</code>). When the face detection operation finishes, Amazon Rekognition Video publishes a completion status to\n *      the Amazon Simple Notification Service topic registered in the initial call to <code>StartFaceDetection</code>. To get the results\n *      of the face detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      If so, call  <a>GetFaceDetection</a> and pass the job identifier\n *      (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.</p>\n *          <p>\n *             <code>GetFaceDetection</code> returns an array of detected faces (<code>Faces</code>) sorted by the time the faces were detected. </p>\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *    specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n *    of results. To get the next page of results, call <code>GetFaceDetection</code> and populate the <code>NextToken</code> request parameter with the token\n *     value returned from the previous call to <code>GetFaceDetection</code>.</p>\n */\nvar GetFaceDetectionCommand = /** @class */function (_super) {\n  __extends(GetFaceDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetFaceDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetFaceDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetFaceDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetFaceDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetFaceDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetFaceDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetFaceDetectionCommand(input, context);\n  };\n  GetFaceDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetFaceDetectionCommand(output, context);\n  };\n  return GetFaceDetectionCommand;\n}($Command);\nexport { GetFaceDetectionCommand };","map":{"version":3,"names":["GetFaceDetectionRequest","GetFaceDetectionResponse","deserializeAws_json1_1GetFaceDetectionCommand","serializeAws_json1_1GetFaceDetectionCommand","getSerdePlugin","Command","$Command","GetFaceDetectionCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-sdk\\client-rekognition\\commands\\GetFaceDetectionCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { GetFaceDetectionRequest, GetFaceDetectionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetFaceDetectionCommand,\n  serializeAws_json1_1GetFaceDetectionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetFaceDetectionCommandInput = GetFaceDetectionRequest;\nexport type GetFaceDetectionCommandOutput = GetFaceDetectionResponse & __MetadataBearer;\n\n/**\n * <p>Gets face detection results for a Amazon Rekognition Video analysis started by <a>StartFaceDetection</a>.</p>\n *          <p>Face detection with Amazon Rekognition Video is an asynchronous operation. You start face detection by calling <a>StartFaceDetection</a>\n *      which returns a job identifier (<code>JobId</code>). When the face detection operation finishes, Amazon Rekognition Video publishes a completion status to\n *      the Amazon Simple Notification Service topic registered in the initial call to <code>StartFaceDetection</code>. To get the results\n *      of the face detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      If so, call  <a>GetFaceDetection</a> and pass the job identifier\n *      (<code>JobId</code>) from the initial call to <code>StartFaceDetection</code>.</p>\n *          <p>\n *             <code>GetFaceDetection</code> returns an array of detected faces (<code>Faces</code>) sorted by the time the faces were detected. </p>\n *          <p>Use MaxResults parameter to limit the number of labels returned. If there are more results than\n *    specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n *    of results. To get the next page of results, call <code>GetFaceDetection</code> and populate the <code>NextToken</code> request parameter with the token\n *     value returned from the previous call to <code>GetFaceDetection</code>.</p>\n */\nexport class GetFaceDetectionCommand extends $Command<\n  GetFaceDetectionCommandInput,\n  GetFaceDetectionCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetFaceDetectionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetFaceDetectionCommandInput, GetFaceDetectionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"GetFaceDetectionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetFaceDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetFaceDetectionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetFaceDetectionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetFaceDetectionCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetFaceDetectionCommandOutput> {\n    return deserializeAws_json1_1GetFaceDetectionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,uBAAuB,EAAEC,wBAAwB,QAAQ,oBAAoB;AACtF,SACEC,6CAA6C,EAC7CC,2CAA2C,QACtC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;AAeA,IAAAC,uBAAA,0BAAAC,MAAA;EAA6CC,SAAA,CAAAF,uBAAA,EAAAC,MAAA;EAK3C;EACA;EAEA,SAAAD,wBAAqBG,KAAmC;IAAxD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,uBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,yBAAyB;IAC7C,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,uBAAuB,CAAC6B,kBAAkB;MACnEC,wBAAwB,EAAE7B,wBAAwB,CAAC4B;KACpD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,uBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAmC,EAAEyB,OAAuB;IAC5E,OAAOhC,2CAA2C,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACpE,CAAC;EAEO5B,uBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,6CAA6C,CAACkC,MAAM,EAAED,OAAO,CAAC;EACvE,CAAC;EAIH,OAAA5B,uBAAC;AAAD,CAAC,CAtD4CD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}