{"ast":null,"code":"\"use strict\";\n\nvar contextUtils = require('./context_utils');\nvar logging = require('./logger');\nvar segmentUtils = require('./segments/segment_utils');\nvar utils = require('./utils');\nvar LambdaEnv = require('./env/aws_lambda');\n// Import Data from package.json,\n// If the importing of package.json fails leave\n// pkginfo as an empty object\nvar pkginfo = {};\ntry {\n  pkginfo = require('../../package.json');\n} catch (err) {\n  logging.getLogger().debug('Failed to load SDK data:', err);\n}\nvar UNKNOWN = 'unknown';\n/**\n * A module representing the AWSXRay SDK.\n * @namespace AWSXRay\n */\nvar AWSXRay = {\n  /**\n   * @memberof AWSXRay\n   * @type {object}\n   * @namespace AWSXRay.plugins\n   */\n  plugins: {\n    /**\n     * Exposes the AWS EC2 plugin.\n     * @memberof AWSXRay.plugins\n     */\n    EC2Plugin: require('./segments/plugins/ec2_plugin'),\n    /**\n     * Exposes the AWS ECS plugin.\n     * @memberof AWSXRay.plugins\n     */\n    ECSPlugin: require('./segments/plugins/ecs_plugin'),\n    /**\n     * Exposes the AWS Elastic Beanstalk plugin.\n     * @memberof AWSXRay.plugins\n     */\n    ElasticBeanstalkPlugin: require('./segments/plugins/elastic_beanstalk_plugin')\n  },\n  /**\n   * Enables use of plugins to capture additional data for segments.\n   * @param {Array} plugins - A configurable subset of AWSXRay.plugins.\n   * @memberof AWSXRay\n   * @see AWSXRay.plugins\n   */\n  config: function (plugins) {\n    var pluginData = {};\n    plugins.forEach(function (plugin) {\n      plugin.getData(function (data) {\n        if (data) {\n          for (var attribute in data) {\n            pluginData[attribute] = data[attribute];\n          }\n        }\n      });\n      segmentUtils.setOrigin(plugin.originName);\n      segmentUtils.setPluginData(pluginData);\n    });\n  },\n  /**\n   * Overrides the default whitelisting file to specify what params to capture on each AWS Service call.\n   * If a service or API is not listed, no additional data is captured.\n   * The base whitelisting file can be found at /lib/resources/aws_whitelist.json\n   * @param {string|Object} source - The path to the custom whitelist file, or a whitelist source JSON object.\n   * @memberof AWSXRay\n   */\n  setAWSWhitelist: require('./segments/attributes/aws').setAWSWhitelist,\n  /**\n   * Appends to the current whitelisting file.\n   * In the case of a duplicate service API listed, the new source will override the previous values.\n   * @param {string|Object} source - The path to the custom whitelist file, or a whitelist source JSON object.\n   * @memberof AWSXRay\n   */\n  appendAWSWhitelist: require('./segments/attributes/aws').appendAWSWhitelist,\n  /**\n   * Overrides the default streaming threshold (100).\n   * The threshold represents the maximum number of subsegments on a single segment before\n   * the SDK begins to send the completed subsegments out of band of the main segment.\n   * Reduce this threshold if you see the 'Segment too large to send' error.\n   * @param {number} threshold - The new threshold to use.\n   * @memberof AWSXRay\n   */\n  setStreamingThreshold: segmentUtils.setStreamingThreshold,\n  /**\n   * Set your own logger for the SDK.\n   * @param {Object} logger - A logger which responds to debug/info/warn/error calls.\n   * @memberof AWSXRay\n   */\n  setLogger: logging.setLogger,\n  /**\n   * Gets the set logger for the SDK.\n   * @memberof AWSXRay\n   */\n  getLogger: logging.getLogger,\n  /**\n   * Configures the address and port the daemon is expected to be on.\n   * @param {string} address - Address of the daemon the segments should be sent to.  Expects 'x.x.x.x', ':yyyy' or 'x.x.x.x:yyyy' IPv4 formats.\n   * @module DaemonConfig\n   * @memberof AWSXRay\n   * @function\n   * @see module:DaemonConfig.setDaemonAddress\n   */\n  setDaemonAddress: require('./daemon_config').setDaemonAddress,\n  /**\n   * @param {string} name - The name of the new subsegment.\n   * @param {function} fcn - The function conext to wrap.\n   * @param {Segment|Subsegment} [parent] - The parent for the new subsegment, for manual mode.\n   * @memberof AWSXRay\n   * @function\n   * @see module:capture.captureFunc\n   */\n  captureFunc: require('./capture').captureFunc,\n  /**\n   * @param {string} name - The name of the new subsegment.\n   * @param {function} fcn - The function conext to wrap.\n   * @param {Segment|Subsegment} [parent] - The parent for the new subsegment, for manual mode.\n   * @memberof AWSXRay\n   * @function\n   * @see module:capture.captureAsyncFunc\n   */\n  captureAsyncFunc: require('./capture').captureAsyncFunc,\n  /**\n   * @param {string} name - The name of the new subsegment.\n   * @param {function} fcn - The function conext to wrap.\n   * @param {Segment|Subsegment} [parent] - The parent for the new subsegment, for manual mode.\n   * @memberof AWSXRay\n   * @function\n   * @see module:capture.captureCallbackFunc\n   */\n  captureCallbackFunc: require('./capture').captureCallbackFunc,\n  /**\n   * @param {AWS} awssdk - The Javascript AWS SDK.\n   * @memberof AWSXRay\n   * @function\n   * @see module:aws_p.captureAWS\n   */\n  captureAWS: require('./patchers/aws_p').captureAWS,\n  /**\n   * @param {AWS.Service} service - An instance of a AWS service to wrap.\n   * @memberof AWSXRay\n   * @function\n   * @see module:aws_p.captureAWSClient\n   */\n  captureAWSClient: require('./patchers/aws_p').captureAWSClient,\n  /**\n   * @param {AWSv3.Service} service - An instance of a AWS SDK v3 service to wrap.\n   * @param {Segment|Subsegment} segment - Optional segment for manual mode.\n   * @memberof AWSXRay\n   * @function\n   * @see module:aws3_p.captureAWSClient\n   */\n  captureAWSv3Client: require('./patchers/aws3_p').captureAWSClient,\n  /**\n   * @param {http|https} module - The built in Node.js HTTP or HTTPS module.\n   * @memberof AWSXRay\n   * @function\n   * @returns {http|https}\n   * @see module:http_p.captureHTTPs\n   */\n  captureHTTPs: require('./patchers/http_p').captureHTTPs,\n  /**\n   * @param {http|https} module - The built in Node.js HTTP or HTTPS module.\n   * @memberof AWSXRay\n   * @function\n   * @see module:http_p.captureHTTPsGlobal\n   */\n  captureHTTPsGlobal: require('./patchers/http_p').captureHTTPsGlobal,\n  /**\n   * @memberof AWSXRay\n   * @function\n   * @see module:promise_p.capturePromise\n   */\n  capturePromise: require('./patchers/promise_p').capturePromise,\n  /**\n   * Exposes various helper methods.\n   * @memberof AWSXRay\n   * @function\n   * @see module:utils\n   */\n  utils: utils,\n  /**\n   * @memberof AWSXRay\n   * @type {object}\n   * @namespace AWSXRay.database\n   */\n  database: {\n    /**\n     * Exposes the SqlData class.\n     * @memberof AWSXRay.database\n     * @see SqlData\n     */\n    SqlData: require('./database/sql_data')\n  },\n  /**\n   * Exposes the Middleware Utils class.\n   * @memberof AWSXRay\n   * @function\n   * @see module:mw_utils\n   */\n  middleware: require('./middleware/mw_utils'),\n  /**\n   * Gets the current namespace of the context.\n   * Used for supporting functions that can be used in automatic mode.\n   * @memberof AWSXRay\n   * @function\n   * @returns {Segment|Subsegment}\n   * @see module:context_utils.getNamespace\n   */\n  getNamespace: contextUtils.getNamespace,\n  /**\n   * Resolves the current segment or subsegment, checks manual and automatic modes.\n   * Used for supporting functions that can be used in both manual and automatic modes.\n   * @memberof AWSXRay\n   * @function\n   * @returns {Segment|Subsegment}\n   * @see module:context_utils.resolveSegment\n   */\n  resolveSegment: contextUtils.resolveSegment,\n  /**\n   * Resolves the segment or subsegment given manual mode and params on the call required.\n   * @param [Segment|Subsegment] segment - The segment manually provided via params.XraySegment, if provided.\n   * @memberof AWSXRay\n   * @function\n   * @returns {Segment|Subsegment}\n   * @see module:context_utils.resolveManualSegmentParams\n   */\n  resolveManualSegmentParams: contextUtils.resolveManualSegmentParams,\n  /**\n   * Returns the current segment or subsegment. For use with automatic mode only.\n   * @memberof AWSXRay\n   * @function\n   * @returns {Segment|Subsegment}\n   * @see module:context_utils.getSegment\n   */\n  getSegment: contextUtils.getSegment,\n  /**\n   * Sets the current segment or subsegment.  For use with automatic mode only.\n   * @memberof AWSXRay\n   * @function\n   * @see module:context_utils.setSegment\n   */\n  setSegment: contextUtils.setSegment,\n  /**\n   * Returns true if automatic mode is enabled, otherwise false.\n   * @memberof AWSXRay\n   * @function\n   * @see module:context_utils.isAutomaticMode\n   */\n  isAutomaticMode: contextUtils.isAutomaticMode,\n  /**\n   * Enables automatic mode. Automatic mode uses 'cls-hooked'.\n   * @see https://github.com/jeff-lewis/cls-hooked\n   * @memberof AWSXRay\n   * @function\n   * @see module:context_utils.enableAutomaticMode\n   */\n  enableAutomaticMode: contextUtils.enableAutomaticMode,\n  /**\n   * Disables automatic mode. Current segment or subsegment must be passed manually\n   * via the parent optional on captureFunc, captureAsyncFunc etc.\n   * @memberof AWSXRay\n   * @function\n   * @see module:context_utils.enableManualMode\n   */\n  enableManualMode: contextUtils.enableManualMode,\n  /**\n   * Sets the context missing strategy.\n   * @param {Object} strategy - The strategy to set. This object's contextMissing function will be called whenever trace context is not found.\n   */\n  setContextMissingStrategy: contextUtils.setContextMissingStrategy,\n  /**\n   * Exposes the segment class.\n   * @memberof AWSXRay\n   * @function\n   */\n  Segment: require('./segments/segment'),\n  /**\n   * Exposes the subsegment class.\n   * @memberof AWSXRay\n   * @see Subsegment\n   */\n  Subsegment: require('./segments/attributes/subsegment'),\n  SegmentUtils: segmentUtils\n};\n/**\n * Exposes the IncomingRequestData, to capture incoming request data.\n * For use with middleware.\n * @memberof AWSXRay.middleware\n * @see IncomingRequestData\n */\nAWSXRay.middleware.IncomingRequestData = require('./middleware/incoming_request_data'), function () {\n  var data = {\n    runtime: process.release && process.release.name ? process.release.name : UNKNOWN,\n    runtime_version: process.version,\n    version: process.env.npm_package_version || UNKNOWN,\n    name: process.env.npm_package_name || UNKNOWN\n  };\n  var sdkData = {\n    sdk: 'X-Ray for Node.js',\n    sdk_version: pkginfo.version ? pkginfo.version : UNKNOWN,\n    package: pkginfo.name ? pkginfo.name : UNKNOWN\n  };\n  segmentUtils.setSDKData(sdkData);\n  segmentUtils.setServiceData(data);\n  if (process.env.LAMBDA_TASK_ROOT) {\n    LambdaEnv.init();\n  }\n}();\nmodule.exports = AWSXRay;","map":{"version":3,"names":["contextUtils","require","logging","segmentUtils","utils","LambdaEnv","pkginfo","err","getLogger","debug","UNKNOWN","AWSXRay","plugins","EC2Plugin","ECSPlugin","ElasticBeanstalkPlugin","config","pluginData","forEach","plugin","getData","data","attribute","setOrigin","originName","setPluginData","setAWSWhitelist","appendAWSWhitelist","setStreamingThreshold","setLogger","setDaemonAddress","captureFunc","captureAsyncFunc","captureCallbackFunc","captureAWS","captureAWSClient","captureAWSv3Client","captureHTTPs","captureHTTPsGlobal","capturePromise","database","SqlData","middleware","getNamespace","resolveSegment","resolveManualSegmentParams","getSegment","setSegment","isAutomaticMode","enableAutomaticMode","enableManualMode","setContextMissingStrategy","Segment","Subsegment","SegmentUtils","IncomingRequestData","runtime","process","release","name","runtime_version","version","env","npm_package_version","npm_package_name","sdkData","sdk","sdk_version","package","setSDKData","setServiceData","LAMBDA_TASK_ROOT","init","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/aws-xray.js"],"sourcesContent":["\"use strict\";\nvar contextUtils = require('./context_utils');\nvar logging = require('./logger');\nvar segmentUtils = require('./segments/segment_utils');\nvar utils = require('./utils');\nvar LambdaEnv = require('./env/aws_lambda');\n// Import Data from package.json,\n// If the importing of package.json fails leave\n// pkginfo as an empty object\nvar pkginfo = {};\ntry {\n    pkginfo = require('../../package.json');\n}\ncatch (err) {\n    logging.getLogger().debug('Failed to load SDK data:', err);\n}\nvar UNKNOWN = 'unknown';\n/**\n * A module representing the AWSXRay SDK.\n * @namespace AWSXRay\n */\nvar AWSXRay = {\n    /**\n     * @memberof AWSXRay\n     * @type {object}\n     * @namespace AWSXRay.plugins\n     */\n    plugins: {\n        /**\n         * Exposes the AWS EC2 plugin.\n         * @memberof AWSXRay.plugins\n         */\n        EC2Plugin: require('./segments/plugins/ec2_plugin'),\n        /**\n         * Exposes the AWS ECS plugin.\n         * @memberof AWSXRay.plugins\n         */\n        ECSPlugin: require('./segments/plugins/ecs_plugin'),\n        /**\n         * Exposes the AWS Elastic Beanstalk plugin.\n         * @memberof AWSXRay.plugins\n         */\n        ElasticBeanstalkPlugin: require('./segments/plugins/elastic_beanstalk_plugin'),\n    },\n    /**\n     * Enables use of plugins to capture additional data for segments.\n     * @param {Array} plugins - A configurable subset of AWSXRay.plugins.\n     * @memberof AWSXRay\n     * @see AWSXRay.plugins\n     */\n    config: function (plugins) {\n        var pluginData = {};\n        plugins.forEach(function (plugin) {\n            plugin.getData(function (data) {\n                if (data) {\n                    for (var attribute in data) {\n                        pluginData[attribute] = data[attribute];\n                    }\n                }\n            });\n            segmentUtils.setOrigin(plugin.originName);\n            segmentUtils.setPluginData(pluginData);\n        });\n    },\n    /**\n     * Overrides the default whitelisting file to specify what params to capture on each AWS Service call.\n     * If a service or API is not listed, no additional data is captured.\n     * The base whitelisting file can be found at /lib/resources/aws_whitelist.json\n     * @param {string|Object} source - The path to the custom whitelist file, or a whitelist source JSON object.\n     * @memberof AWSXRay\n     */\n    setAWSWhitelist: require('./segments/attributes/aws').setAWSWhitelist,\n    /**\n     * Appends to the current whitelisting file.\n     * In the case of a duplicate service API listed, the new source will override the previous values.\n     * @param {string|Object} source - The path to the custom whitelist file, or a whitelist source JSON object.\n     * @memberof AWSXRay\n     */\n    appendAWSWhitelist: require('./segments/attributes/aws').appendAWSWhitelist,\n    /**\n     * Overrides the default streaming threshold (100).\n     * The threshold represents the maximum number of subsegments on a single segment before\n     * the SDK begins to send the completed subsegments out of band of the main segment.\n     * Reduce this threshold if you see the 'Segment too large to send' error.\n     * @param {number} threshold - The new threshold to use.\n     * @memberof AWSXRay\n     */\n    setStreamingThreshold: segmentUtils.setStreamingThreshold,\n    /**\n     * Set your own logger for the SDK.\n     * @param {Object} logger - A logger which responds to debug/info/warn/error calls.\n     * @memberof AWSXRay\n     */\n    setLogger: logging.setLogger,\n    /**\n     * Gets the set logger for the SDK.\n     * @memberof AWSXRay\n     */\n    getLogger: logging.getLogger,\n    /**\n     * Configures the address and port the daemon is expected to be on.\n     * @param {string} address - Address of the daemon the segments should be sent to.  Expects 'x.x.x.x', ':yyyy' or 'x.x.x.x:yyyy' IPv4 formats.\n     * @module DaemonConfig\n     * @memberof AWSXRay\n     * @function\n     * @see module:DaemonConfig.setDaemonAddress\n     */\n    setDaemonAddress: require('./daemon_config').setDaemonAddress,\n    /**\n     * @param {string} name - The name of the new subsegment.\n     * @param {function} fcn - The function conext to wrap.\n     * @param {Segment|Subsegment} [parent] - The parent for the new subsegment, for manual mode.\n     * @memberof AWSXRay\n     * @function\n     * @see module:capture.captureFunc\n     */\n    captureFunc: require('./capture').captureFunc,\n    /**\n     * @param {string} name - The name of the new subsegment.\n     * @param {function} fcn - The function conext to wrap.\n     * @param {Segment|Subsegment} [parent] - The parent for the new subsegment, for manual mode.\n     * @memberof AWSXRay\n     * @function\n     * @see module:capture.captureAsyncFunc\n     */\n    captureAsyncFunc: require('./capture').captureAsyncFunc,\n    /**\n     * @param {string} name - The name of the new subsegment.\n     * @param {function} fcn - The function conext to wrap.\n     * @param {Segment|Subsegment} [parent] - The parent for the new subsegment, for manual mode.\n     * @memberof AWSXRay\n     * @function\n     * @see module:capture.captureCallbackFunc\n     */\n    captureCallbackFunc: require('./capture').captureCallbackFunc,\n    /**\n     * @param {AWS} awssdk - The Javascript AWS SDK.\n     * @memberof AWSXRay\n     * @function\n     * @see module:aws_p.captureAWS\n     */\n    captureAWS: require('./patchers/aws_p').captureAWS,\n    /**\n     * @param {AWS.Service} service - An instance of a AWS service to wrap.\n     * @memberof AWSXRay\n     * @function\n     * @see module:aws_p.captureAWSClient\n     */\n    captureAWSClient: require('./patchers/aws_p').captureAWSClient,\n    /**\n     * @param {AWSv3.Service} service - An instance of a AWS SDK v3 service to wrap.\n     * @param {Segment|Subsegment} segment - Optional segment for manual mode.\n     * @memberof AWSXRay\n     * @function\n     * @see module:aws3_p.captureAWSClient\n     */\n    captureAWSv3Client: require('./patchers/aws3_p').captureAWSClient,\n    /**\n     * @param {http|https} module - The built in Node.js HTTP or HTTPS module.\n     * @memberof AWSXRay\n     * @function\n     * @returns {http|https}\n     * @see module:http_p.captureHTTPs\n     */\n    captureHTTPs: require('./patchers/http_p').captureHTTPs,\n    /**\n     * @param {http|https} module - The built in Node.js HTTP or HTTPS module.\n     * @memberof AWSXRay\n     * @function\n     * @see module:http_p.captureHTTPsGlobal\n     */\n    captureHTTPsGlobal: require('./patchers/http_p').captureHTTPsGlobal,\n    /**\n     * @memberof AWSXRay\n     * @function\n     * @see module:promise_p.capturePromise\n     */\n    capturePromise: require('./patchers/promise_p').capturePromise,\n    /**\n     * Exposes various helper methods.\n     * @memberof AWSXRay\n     * @function\n     * @see module:utils\n     */\n    utils: utils,\n    /**\n     * @memberof AWSXRay\n     * @type {object}\n     * @namespace AWSXRay.database\n     */\n    database: {\n        /**\n         * Exposes the SqlData class.\n         * @memberof AWSXRay.database\n         * @see SqlData\n         */\n        SqlData: require('./database/sql_data'),\n    },\n    /**\n     * Exposes the Middleware Utils class.\n     * @memberof AWSXRay\n     * @function\n     * @see module:mw_utils\n     */\n    middleware: require('./middleware/mw_utils'),\n    /**\n     * Gets the current namespace of the context.\n     * Used for supporting functions that can be used in automatic mode.\n     * @memberof AWSXRay\n     * @function\n     * @returns {Segment|Subsegment}\n     * @see module:context_utils.getNamespace\n     */\n    getNamespace: contextUtils.getNamespace,\n    /**\n     * Resolves the current segment or subsegment, checks manual and automatic modes.\n     * Used for supporting functions that can be used in both manual and automatic modes.\n     * @memberof AWSXRay\n     * @function\n     * @returns {Segment|Subsegment}\n     * @see module:context_utils.resolveSegment\n     */\n    resolveSegment: contextUtils.resolveSegment,\n    /**\n     * Resolves the segment or subsegment given manual mode and params on the call required.\n     * @param [Segment|Subsegment] segment - The segment manually provided via params.XraySegment, if provided.\n     * @memberof AWSXRay\n     * @function\n     * @returns {Segment|Subsegment}\n     * @see module:context_utils.resolveManualSegmentParams\n     */\n    resolveManualSegmentParams: contextUtils.resolveManualSegmentParams,\n    /**\n     * Returns the current segment or subsegment. For use with automatic mode only.\n     * @memberof AWSXRay\n     * @function\n     * @returns {Segment|Subsegment}\n     * @see module:context_utils.getSegment\n     */\n    getSegment: contextUtils.getSegment,\n    /**\n     * Sets the current segment or subsegment.  For use with automatic mode only.\n     * @memberof AWSXRay\n     * @function\n     * @see module:context_utils.setSegment\n     */\n    setSegment: contextUtils.setSegment,\n    /**\n     * Returns true if automatic mode is enabled, otherwise false.\n     * @memberof AWSXRay\n     * @function\n     * @see module:context_utils.isAutomaticMode\n     */\n    isAutomaticMode: contextUtils.isAutomaticMode,\n    /**\n     * Enables automatic mode. Automatic mode uses 'cls-hooked'.\n     * @see https://github.com/jeff-lewis/cls-hooked\n     * @memberof AWSXRay\n     * @function\n     * @see module:context_utils.enableAutomaticMode\n     */\n    enableAutomaticMode: contextUtils.enableAutomaticMode,\n    /**\n     * Disables automatic mode. Current segment or subsegment must be passed manually\n     * via the parent optional on captureFunc, captureAsyncFunc etc.\n     * @memberof AWSXRay\n     * @function\n     * @see module:context_utils.enableManualMode\n     */\n    enableManualMode: contextUtils.enableManualMode,\n    /**\n     * Sets the context missing strategy.\n     * @param {Object} strategy - The strategy to set. This object's contextMissing function will be called whenever trace context is not found.\n     */\n    setContextMissingStrategy: contextUtils.setContextMissingStrategy,\n    /**\n     * Exposes the segment class.\n     * @memberof AWSXRay\n     * @function\n     */\n    Segment: require('./segments/segment'),\n    /**\n     * Exposes the subsegment class.\n     * @memberof AWSXRay\n     * @see Subsegment\n     */\n    Subsegment: require('./segments/attributes/subsegment'),\n    SegmentUtils: segmentUtils\n};\n/**\n * Exposes the IncomingRequestData, to capture incoming request data.\n * For use with middleware.\n * @memberof AWSXRay.middleware\n * @see IncomingRequestData\n */\nAWSXRay.middleware.IncomingRequestData = require('./middleware/incoming_request_data'),\n    (function () {\n        var data = {\n            runtime: (process.release && process.release.name) ? process.release.name : UNKNOWN,\n            runtime_version: process.version,\n            version: process.env.npm_package_version || UNKNOWN,\n            name: process.env.npm_package_name || UNKNOWN\n        };\n        var sdkData = {\n            sdk: 'X-Ray for Node.js',\n            sdk_version: pkginfo.version ? pkginfo.version : UNKNOWN,\n            package: pkginfo.name ? pkginfo.name : UNKNOWN,\n        };\n        segmentUtils.setSDKData(sdkData);\n        segmentUtils.setServiceData(data);\n        if (process.env.LAMBDA_TASK_ROOT) {\n            LambdaEnv.init();\n        }\n    })();\nmodule.exports = AWSXRay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}