{"ast":null,"code":"import toDenseArray from './lib/to_dense_array.js';\nimport StringSet from './lib/string_set.js';\nimport render from './render.js';\nimport * as Constants from './constants.js';\nexport default function Store(ctx) {\n  this._features = {};\n  this._featureIds = new StringSet();\n  this._selectedFeatureIds = new StringSet();\n  this._selectedCoordinates = [];\n  this._changedFeatureIds = new StringSet();\n  this._emitSelectionChange = false;\n  this._mapInitialConfig = {};\n  this.ctx = ctx;\n  this.sources = {\n    hot: [],\n    cold: []\n  };\n\n  // Deduplicate requests to render and tie them to animation frames.\n  let renderRequest;\n  this.render = () => {\n    if (!renderRequest) {\n      renderRequest = requestAnimationFrame(() => {\n        renderRequest = null;\n        render.call(this);\n\n        // Fire deduplicated selection change event\n        if (this._emitSelectionChange) {\n          this.ctx.events.fire(Constants.events.SELECTION_CHANGE, {\n            features: this.getSelected().map(feature => feature.toGeoJSON()),\n            points: this.getSelectedCoordinates().map(coordinate => ({\n              type: Constants.geojsonTypes.FEATURE,\n              properties: {},\n              geometry: {\n                type: Constants.geojsonTypes.POINT,\n                coordinates: coordinate.coordinates\n              }\n            }))\n          });\n          this._emitSelectionChange = false;\n        }\n\n        // Fire render event\n        this.ctx.events.fire(Constants.events.RENDER, {});\n      });\n    }\n  };\n  this.isDirty = false;\n}\n\n/**\n * Delays all rendering until the returned function is invoked\n * @return {Function} renderBatch\n */\nStore.prototype.createRenderBatch = function () {\n  const holdRender = this.render;\n  let numRenders = 0;\n  this.render = function () {\n    numRenders++;\n  };\n  return () => {\n    this.render = holdRender;\n    if (numRenders > 0) {\n      this.render();\n    }\n  };\n};\n\n/**\n * Sets the store's state to dirty.\n * @return {Store} this\n */\nStore.prototype.setDirty = function () {\n  this.isDirty = true;\n  return this;\n};\n\n/**\n * Sets a feature's state to changed.\n * @param {string} featureId\n * @return {Store} this\n */\nStore.prototype.featureCreated = function (featureId, options = {}) {\n  this._changedFeatureIds.add(featureId);\n  const silent = options.silent != null ? options.silent : this.ctx.options.suppressAPIEvents;\n  if (silent !== true) {\n    const feature = this.get(featureId);\n    this.ctx.events.fire(Constants.events.CREATE, {\n      features: [feature.toGeoJSON()]\n    });\n  }\n  return this;\n};\n\n/**\n * Sets a feature's state to changed.\n * @param {string} featureId\n * @return {Store} this\n */\nStore.prototype.featureChanged = function (featureId, options = {}) {\n  this._changedFeatureIds.add(featureId);\n  const silent = options.silent != null ? options.silent : this.ctx.options.suppressAPIEvents;\n  if (silent !== true) {\n    this.ctx.events.fire(Constants.events.UPDATE, {\n      action: options.action ? options.action : Constants.updateActions.CHANGE_COORDINATES,\n      features: [this.get(featureId).toGeoJSON()]\n    });\n  }\n  return this;\n};\n\n/**\n * Gets the ids of all features currently in changed state.\n * @return {Store} this\n */\nStore.prototype.getChangedIds = function () {\n  return this._changedFeatureIds.values();\n};\n\n/**\n * Sets all features to unchanged state.\n * @return {Store} this\n */\nStore.prototype.clearChangedIds = function () {\n  this._changedFeatureIds.clear();\n  return this;\n};\n\n/**\n * Gets the ids of all features in the store.\n * @return {Store} this\n */\nStore.prototype.getAllIds = function () {\n  return this._featureIds.values();\n};\n\n/**\n * Adds a feature to the store.\n * @param {Object} feature\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n *\n * @return {Store} this\n */\nStore.prototype.add = function (feature, options = {}) {\n  this._features[feature.id] = feature;\n  this._featureIds.add(feature.id);\n  this.featureCreated(feature.id, {\n    silent: options.silent\n  });\n  return this;\n};\n\n/**\n * Deletes a feature or array of features from the store.\n * Cleans up after the deletion by deselecting the features.\n * If changes were made, sets the state to the dirty\n * and fires an event.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.delete = function (featureIds, options = {}) {\n  const deletedFeaturesToEmit = [];\n  toDenseArray(featureIds).forEach(id => {\n    if (!this._featureIds.has(id)) return;\n    this._featureIds.delete(id);\n    this._selectedFeatureIds.delete(id);\n    if (!options.silent) {\n      if (deletedFeaturesToEmit.indexOf(this._features[id]) === -1) {\n        deletedFeaturesToEmit.push(this._features[id].toGeoJSON());\n      }\n    }\n    delete this._features[id];\n    this.isDirty = true;\n  });\n  if (deletedFeaturesToEmit.length) {\n    this.ctx.events.fire(Constants.events.DELETE, {\n      features: deletedFeaturesToEmit\n    });\n  }\n  refreshSelectedCoordinates(this, options);\n  return this;\n};\n\n/**\n * Returns a feature in the store matching the specified value.\n * @return {Object | undefined} feature\n */\nStore.prototype.get = function (id) {\n  return this._features[id];\n};\n\n/**\n * Returns all features in the store.\n * @return {Array<Object>}\n */\nStore.prototype.getAll = function () {\n  return Object.keys(this._features).map(id => this._features[id]);\n};\n\n/**\n * Adds features to the current selection.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.select = function (featureIds, options = {}) {\n  toDenseArray(featureIds).forEach(id => {\n    if (this._selectedFeatureIds.has(id)) return;\n    this._selectedFeatureIds.add(id);\n    this._changedFeatureIds.add(id);\n    if (!options.silent) {\n      this._emitSelectionChange = true;\n    }\n  });\n  return this;\n};\n\n/**\n * Deletes features from the current selection.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.deselect = function (featureIds, options = {}) {\n  toDenseArray(featureIds).forEach(id => {\n    if (!this._selectedFeatureIds.has(id)) return;\n    this._selectedFeatureIds.delete(id);\n    this._changedFeatureIds.add(id);\n    if (!options.silent) {\n      this._emitSelectionChange = true;\n    }\n  });\n  refreshSelectedCoordinates(this, options);\n  return this;\n};\n\n/**\n * Clears the current selection.\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.clearSelected = function (options = {}) {\n  this.deselect(this._selectedFeatureIds.values(), {\n    silent: options.silent\n  });\n  return this;\n};\n\n/**\n * Sets the store's selection, clearing any prior values.\n * If no feature ids are passed, the store is just cleared.\n * @param {string | Array<string> | undefined} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.setSelected = function (featureIds, options = {}) {\n  featureIds = toDenseArray(featureIds);\n\n  // Deselect any features not in the new selection\n  this.deselect(this._selectedFeatureIds.values().filter(id => featureIds.indexOf(id) === -1), {\n    silent: options.silent\n  });\n\n  // Select any features in the new selection that were not already selected\n  this.select(featureIds.filter(id => !this._selectedFeatureIds.has(id)), {\n    silent: options.silent\n  });\n  return this;\n};\n\n/**\n * Sets the store's coordinates selection, clearing any prior values.\n * @param {Array<Array<string>>} coordinates\n * @return {Store} this\n */\nStore.prototype.setSelectedCoordinates = function (coordinates) {\n  this._selectedCoordinates = coordinates;\n  this._emitSelectionChange = true;\n  return this;\n};\n\n/**\n * Clears the current coordinates selection.\n * @param {Object} [options]\n * @return {Store} this\n */\nStore.prototype.clearSelectedCoordinates = function () {\n  this._selectedCoordinates = [];\n  this._emitSelectionChange = true;\n  return this;\n};\n\n/**\n * Returns the ids of features in the current selection.\n * @return {Array<string>} Selected feature ids.\n */\nStore.prototype.getSelectedIds = function () {\n  return this._selectedFeatureIds.values();\n};\n\n/**\n * Returns features in the current selection.\n * @return {Array<Object>} Selected features.\n */\nStore.prototype.getSelected = function () {\n  return this.getSelectedIds().map(id => this.get(id));\n};\n\n/**\n * Returns selected coordinates in the currently selected feature.\n * @return {Array<Object>} Selected coordinates.\n */\nStore.prototype.getSelectedCoordinates = function () {\n  const selected = this._selectedCoordinates.map(coordinate => {\n    const feature = this.get(coordinate.feature_id);\n    return {\n      coordinates: feature.getCoordinate(coordinate.coord_path)\n    };\n  });\n  return selected;\n};\n\n/**\n * Indicates whether a feature is selected.\n * @param {string} featureId\n * @return {boolean} `true` if the feature is selected, `false` if not.\n */\nStore.prototype.isSelected = function (featureId) {\n  return this._selectedFeatureIds.has(featureId);\n};\n\n/**\n * Sets a property on the given feature\n * @param {string} featureId\n * @param {string} property property\n * @param {string} property value\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n*/\nStore.prototype.setFeatureProperty = function (featureId, property, value, options = {}) {\n  this.get(featureId).setProperty(property, value);\n  this.featureChanged(featureId, {\n    silent: options.silent,\n    action: Constants.updateActions.CHANGE_PROPERTIES\n  });\n};\nfunction refreshSelectedCoordinates(store, options = {}) {\n  const newSelectedCoordinates = store._selectedCoordinates.filter(point => store._selectedFeatureIds.has(point.feature_id));\n  if (store._selectedCoordinates.length !== newSelectedCoordinates.length && !options.silent) {\n    store._emitSelectionChange = true;\n  }\n  store._selectedCoordinates = newSelectedCoordinates;\n}\n\n/**\n * Stores the initial config for a map, so that we can set it again after we're done.\n*/\nStore.prototype.storeMapConfig = function () {\n  Constants.interactions.forEach(interaction => {\n    const interactionSet = this.ctx.map[interaction];\n    if (interactionSet) {\n      this._mapInitialConfig[interaction] = this.ctx.map[interaction].isEnabled();\n    }\n  });\n};\n\n/**\n * Restores the initial config for a map, ensuring all is well.\n*/\nStore.prototype.restoreMapConfig = function () {\n  Object.keys(this._mapInitialConfig).forEach(key => {\n    const value = this._mapInitialConfig[key];\n    if (value) {\n      this.ctx.map[key].enable();\n    } else {\n      this.ctx.map[key].disable();\n    }\n  });\n};\n\n/**\n * Returns the initial state of an interaction setting.\n * @param {string} interaction\n * @return {boolean} `true` if the interaction is enabled, `false` if not.\n * Defaults to `true`. (Todo: include defaults.)\n*/\nStore.prototype.getInitialConfigValue = function (interaction) {\n  if (this._mapInitialConfig[interaction] !== undefined) {\n    return this._mapInitialConfig[interaction];\n  } else {\n    // This needs to be set to whatever the default is for that interaction\n    // It seems to be true for all cases currently, so let's send back `true`.\n    return true;\n  }\n};","map":{"version":3,"names":["toDenseArray","StringSet","render","Constants","Store","ctx","_features","_featureIds","_selectedFeatureIds","_selectedCoordinates","_changedFeatureIds","_emitSelectionChange","_mapInitialConfig","sources","hot","cold","renderRequest","requestAnimationFrame","call","events","fire","SELECTION_CHANGE","features","getSelected","map","feature","toGeoJSON","points","getSelectedCoordinates","coordinate","type","geojsonTypes","FEATURE","properties","geometry","POINT","coordinates","RENDER","isDirty","prototype","createRenderBatch","holdRender","numRenders","setDirty","featureCreated","featureId","options","add","silent","suppressAPIEvents","get","CREATE","featureChanged","UPDATE","action","updateActions","CHANGE_COORDINATES","getChangedIds","values","clearChangedIds","clear","getAllIds","id","delete","featureIds","deletedFeaturesToEmit","forEach","has","indexOf","push","length","DELETE","refreshSelectedCoordinates","getAll","Object","keys","select","deselect","clearSelected","setSelected","filter","setSelectedCoordinates","clearSelectedCoordinates","getSelectedIds","selected","feature_id","getCoordinate","coord_path","isSelected","setFeatureProperty","property","value","setProperty","CHANGE_PROPERTIES","store","newSelectedCoordinates","point","storeMapConfig","interactions","interaction","interactionSet","isEnabled","restoreMapConfig","key","enable","disable","getInitialConfigValue","undefined"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@mapbox/mapbox-gl-draw/src/store.js"],"sourcesContent":["import toDenseArray from './lib/to_dense_array.js';\nimport StringSet from './lib/string_set.js';\nimport render from './render.js';\nimport * as Constants from './constants.js';\n\nexport default function Store(ctx) {\n  this._features = {};\n  this._featureIds = new StringSet();\n  this._selectedFeatureIds = new StringSet();\n  this._selectedCoordinates = [];\n  this._changedFeatureIds = new StringSet();\n  this._emitSelectionChange = false;\n  this._mapInitialConfig = {};\n  this.ctx = ctx;\n  this.sources = {\n    hot: [],\n    cold: []\n  };\n\n  // Deduplicate requests to render and tie them to animation frames.\n  let renderRequest;\n  this.render = () => {\n    if (!renderRequest) {\n      renderRequest = requestAnimationFrame(() => {\n        renderRequest = null;\n        render.call(this);\n\n        // Fire deduplicated selection change event\n        if (this._emitSelectionChange) {\n          this.ctx.events.fire(Constants.events.SELECTION_CHANGE, {\n            features: this.getSelected().map(feature => feature.toGeoJSON()),\n            points: this.getSelectedCoordinates().map(coordinate => ({\n              type: Constants.geojsonTypes.FEATURE,\n              properties: {},\n              geometry: {\n                type: Constants.geojsonTypes.POINT,\n                coordinates: coordinate.coordinates\n              }\n            }))\n          });\n\n          this._emitSelectionChange = false;\n        }\n\n        // Fire render event\n        this.ctx.events.fire(Constants.events.RENDER, {});\n      });\n    }\n  };\n\n  this.isDirty = false;\n}\n\n/**\n * Delays all rendering until the returned function is invoked\n * @return {Function} renderBatch\n */\nStore.prototype.createRenderBatch = function() {\n  const holdRender = this.render;\n  let numRenders = 0;\n  this.render = function() {\n    numRenders++;\n  };\n\n  return () => {\n    this.render = holdRender;\n    if (numRenders > 0) {\n      this.render();\n    }\n  };\n};\n\n/**\n * Sets the store's state to dirty.\n * @return {Store} this\n */\nStore.prototype.setDirty = function() {\n  this.isDirty = true;\n  return this;\n};\n\n/**\n * Sets a feature's state to changed.\n * @param {string} featureId\n * @return {Store} this\n */\nStore.prototype.featureCreated = function(featureId, options = {}) {\n  this._changedFeatureIds.add(featureId);\n\n  const silent = options.silent != null ? options.silent : this.ctx.options.suppressAPIEvents;\n  if (silent !== true) {\n    const feature = this.get(featureId);\n    this.ctx.events.fire(Constants.events.CREATE, {\n      features: [feature.toGeoJSON()]\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a feature's state to changed.\n * @param {string} featureId\n * @return {Store} this\n */\nStore.prototype.featureChanged = function(featureId, options = {}) {\n  this._changedFeatureIds.add(featureId);\n\n  const silent = options.silent != null ? options.silent : this.ctx.options.suppressAPIEvents;\n  if (silent !== true) {\n    this.ctx.events.fire(Constants.events.UPDATE, {\n      action: options.action ? options.action : Constants.updateActions.CHANGE_COORDINATES,\n      features: [this.get(featureId).toGeoJSON()]\n    });\n  }\n\n  return this;\n};\n\n/**\n * Gets the ids of all features currently in changed state.\n * @return {Store} this\n */\nStore.prototype.getChangedIds = function() {\n  return this._changedFeatureIds.values();\n};\n\n/**\n * Sets all features to unchanged state.\n * @return {Store} this\n */\nStore.prototype.clearChangedIds = function() {\n  this._changedFeatureIds.clear();\n  return this;\n};\n\n/**\n * Gets the ids of all features in the store.\n * @return {Store} this\n */\nStore.prototype.getAllIds = function() {\n  return this._featureIds.values();\n};\n\n/**\n * Adds a feature to the store.\n * @param {Object} feature\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n *\n * @return {Store} this\n */\nStore.prototype.add = function(feature, options = {}) {\n  this._features[feature.id] = feature;\n  this._featureIds.add(feature.id);\n  this.featureCreated(feature.id, {silent: options.silent});\n  return this;\n};\n\n/**\n * Deletes a feature or array of features from the store.\n * Cleans up after the deletion by deselecting the features.\n * If changes were made, sets the state to the dirty\n * and fires an event.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.delete = function(featureIds, options = {}) {\n  const deletedFeaturesToEmit = [];\n  toDenseArray(featureIds).forEach((id) => {\n    if (!this._featureIds.has(id)) return;\n    this._featureIds.delete(id);\n    this._selectedFeatureIds.delete(id);\n    if (!options.silent) {\n      if (deletedFeaturesToEmit.indexOf(this._features[id]) === -1) {\n        deletedFeaturesToEmit.push(this._features[id].toGeoJSON());\n      }\n    }\n    delete this._features[id];\n    this.isDirty = true;\n  });\n\n  if (deletedFeaturesToEmit.length) {\n    this.ctx.events.fire(Constants.events.DELETE, {features: deletedFeaturesToEmit});\n  }\n\n  refreshSelectedCoordinates(this, options);\n  return this;\n};\n\n/**\n * Returns a feature in the store matching the specified value.\n * @return {Object | undefined} feature\n */\nStore.prototype.get = function(id) {\n  return this._features[id];\n};\n\n/**\n * Returns all features in the store.\n * @return {Array<Object>}\n */\nStore.prototype.getAll = function() {\n  return Object.keys(this._features).map(id => this._features[id]);\n};\n\n/**\n * Adds features to the current selection.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.select = function(featureIds, options = {}) {\n  toDenseArray(featureIds).forEach((id) => {\n    if (this._selectedFeatureIds.has(id)) return;\n    this._selectedFeatureIds.add(id);\n    this._changedFeatureIds.add(id);\n    if (!options.silent) {\n      this._emitSelectionChange = true;\n    }\n  });\n  return this;\n};\n\n/**\n * Deletes features from the current selection.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.deselect = function(featureIds, options = {}) {\n  toDenseArray(featureIds).forEach((id) => {\n    if (!this._selectedFeatureIds.has(id)) return;\n    this._selectedFeatureIds.delete(id);\n    this._changedFeatureIds.add(id);\n    if (!options.silent) {\n      this._emitSelectionChange = true;\n    }\n  });\n  refreshSelectedCoordinates(this, options);\n  return this;\n};\n\n/**\n * Clears the current selection.\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.clearSelected = function(options = {}) {\n  this.deselect(this._selectedFeatureIds.values(), { silent: options.silent });\n  return this;\n};\n\n/**\n * Sets the store's selection, clearing any prior values.\n * If no feature ids are passed, the store is just cleared.\n * @param {string | Array<string> | undefined} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.setSelected = function(featureIds, options = {}) {\n  featureIds = toDenseArray(featureIds);\n\n  // Deselect any features not in the new selection\n  this.deselect(this._selectedFeatureIds.values().filter(id => featureIds.indexOf(id) === -1), { silent: options.silent });\n\n  // Select any features in the new selection that were not already selected\n  this.select(featureIds.filter(id => !this._selectedFeatureIds.has(id)), { silent: options.silent });\n\n  return this;\n};\n\n/**\n * Sets the store's coordinates selection, clearing any prior values.\n * @param {Array<Array<string>>} coordinates\n * @return {Store} this\n */\nStore.prototype.setSelectedCoordinates = function(coordinates) {\n  this._selectedCoordinates = coordinates;\n  this._emitSelectionChange = true;\n  return this;\n};\n\n/**\n * Clears the current coordinates selection.\n * @param {Object} [options]\n * @return {Store} this\n */\nStore.prototype.clearSelectedCoordinates = function() {\n  this._selectedCoordinates = [];\n  this._emitSelectionChange = true;\n  return this;\n};\n\n/**\n * Returns the ids of features in the current selection.\n * @return {Array<string>} Selected feature ids.\n */\nStore.prototype.getSelectedIds = function() {\n  return this._selectedFeatureIds.values();\n};\n\n/**\n * Returns features in the current selection.\n * @return {Array<Object>} Selected features.\n */\nStore.prototype.getSelected = function() {\n  return this.getSelectedIds().map(id => this.get(id));\n};\n\n/**\n * Returns selected coordinates in the currently selected feature.\n * @return {Array<Object>} Selected coordinates.\n */\nStore.prototype.getSelectedCoordinates = function() {\n  const selected = this._selectedCoordinates.map((coordinate) => {\n    const feature = this.get(coordinate.feature_id);\n    return {\n      coordinates: feature.getCoordinate(coordinate.coord_path)\n    };\n  });\n  return selected;\n};\n\n/**\n * Indicates whether a feature is selected.\n * @param {string} featureId\n * @return {boolean} `true` if the feature is selected, `false` if not.\n */\nStore.prototype.isSelected = function(featureId) {\n  return this._selectedFeatureIds.has(featureId);\n};\n\n/**\n * Sets a property on the given feature\n * @param {string} featureId\n * @param {string} property property\n * @param {string} property value\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n*/\nStore.prototype.setFeatureProperty = function(featureId, property, value, options = {}) {\n  this.get(featureId).setProperty(property, value);\n\n  this.featureChanged(featureId, {\n    silent: options.silent,\n    action: Constants.updateActions.CHANGE_PROPERTIES\n  });\n};\n\nfunction refreshSelectedCoordinates(store, options = {}) {\n  const newSelectedCoordinates = store._selectedCoordinates.filter(point => store._selectedFeatureIds.has(point.feature_id));\n  if (store._selectedCoordinates.length !== newSelectedCoordinates.length && !options.silent) {\n    store._emitSelectionChange = true;\n  }\n  store._selectedCoordinates = newSelectedCoordinates;\n}\n\n/**\n * Stores the initial config for a map, so that we can set it again after we're done.\n*/\nStore.prototype.storeMapConfig = function() {\n  Constants.interactions.forEach((interaction) => {\n    const interactionSet = this.ctx.map[interaction];\n    if (interactionSet) {\n      this._mapInitialConfig[interaction] = this.ctx.map[interaction].isEnabled();\n    }\n  });\n};\n\n/**\n * Restores the initial config for a map, ensuring all is well.\n*/\nStore.prototype.restoreMapConfig = function() {\n  Object.keys(this._mapInitialConfig).forEach((key) => {\n    const value = this._mapInitialConfig[key];\n    if (value) {\n      this.ctx.map[key].enable();\n    } else {\n      this.ctx.map[key].disable();\n    }\n  });\n};\n\n/**\n * Returns the initial state of an interaction setting.\n * @param {string} interaction\n * @return {boolean} `true` if the interaction is enabled, `false` if not.\n * Defaults to `true`. (Todo: include defaults.)\n*/\nStore.prototype.getInitialConfigValue = function(interaction) {\n  if (this._mapInitialConfig[interaction] !== undefined) {\n    return this._mapInitialConfig[interaction];\n  } else {\n    // This needs to be set to whatever the default is for that interaction\n    // It seems to be true for all cases currently, so let's send back `true`.\n    return true;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}