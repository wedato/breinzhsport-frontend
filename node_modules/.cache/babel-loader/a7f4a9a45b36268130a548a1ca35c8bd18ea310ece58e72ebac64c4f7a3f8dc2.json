{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $Number = GetIntrinsic('%Number%');\nvar $TypeError = require('es-errors/type');\nvar $SyntaxError = require('es-errors/syntax');\nvar StringToBigInt = require('./StringToBigInt');\nvar ToPrimitive = require('./ToPrimitive');\n\n// https://262.ecma-international.org/13.0/#sec-tobigint\n\nmodule.exports = function ToBigInt(argument) {\n  if (!$BigInt) {\n    throw new $SyntaxError('BigInts are not supported in this environment');\n  }\n  var prim = ToPrimitive(argument, $Number);\n  if (prim == null) {\n    throw new $TypeError('Cannot convert null or undefined to a BigInt');\n  }\n  if (typeof prim === 'boolean') {\n    return prim ? $BigInt(1) : $BigInt(0);\n  }\n  if (typeof prim === 'number') {\n    throw new $TypeError('Cannot convert a Number value to a BigInt');\n  }\n  if (typeof prim === 'string') {\n    var n = StringToBigInt(prim);\n    if (typeof n === 'undefined') {\n      throw new $TypeError('Failed to parse String to BigInt');\n    }\n    return n;\n  }\n  if (typeof prim === 'symbol') {\n    throw new $TypeError('Cannot convert a Symbol value to a BigInt');\n  }\n  if (typeof prim !== 'bigint') {\n    throw new $SyntaxError('Assertion failed: unknown primitive type');\n  }\n  return prim;\n};","map":{"version":3,"names":["GetIntrinsic","require","$BigInt","$Number","$TypeError","$SyntaxError","StringToBigInt","ToPrimitive","module","exports","ToBigInt","argument","prim","n"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/2024/ToBigInt.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $Number = GetIntrinsic('%Number%');\nvar $TypeError = require('es-errors/type');\nvar $SyntaxError = require('es-errors/syntax');\n\nvar StringToBigInt = require('./StringToBigInt');\nvar ToPrimitive = require('./ToPrimitive');\n\n// https://262.ecma-international.org/13.0/#sec-tobigint\n\nmodule.exports = function ToBigInt(argument) {\n\tif (!$BigInt) {\n\t\tthrow new $SyntaxError('BigInts are not supported in this environment');\n\t}\n\n\tvar prim = ToPrimitive(argument, $Number);\n\n\tif (prim == null) {\n\t\tthrow new $TypeError('Cannot convert null or undefined to a BigInt');\n\t}\n\n\tif (typeof prim === 'boolean') {\n\t\treturn prim ? $BigInt(1) : $BigInt(0);\n\t}\n\n\tif (typeof prim === 'number') {\n\t\tthrow new $TypeError('Cannot convert a Number value to a BigInt');\n\t}\n\n\tif (typeof prim === 'string') {\n\t\tvar n = StringToBigInt(prim);\n\t\tif (typeof n === 'undefined') {\n\t\t\tthrow new $TypeError('Failed to parse String to BigInt');\n\t\t}\n\t\treturn n;\n\t}\n\n\tif (typeof prim === 'symbol') {\n\t\tthrow new $TypeError('Cannot convert a Symbol value to a BigInt');\n\t}\n\n\tif (typeof prim !== 'bigint') {\n\t\tthrow new $SyntaxError('Assertion failed: unknown primitive type');\n\t}\n\n\treturn prim;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC;AAC5C,IAAIG,OAAO,GAAGH,YAAY,CAAC,UAAU,CAAC;AACtC,IAAII,UAAU,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAC1C,IAAII,YAAY,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;AAE9C,IAAIK,cAAc,GAAGL,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIM,WAAW,GAAGN,OAAO,CAAC,eAAe,CAAC;;AAE1C;;AAEAO,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQA,CAACC,QAAQ,EAAE;EAC5C,IAAI,CAACT,OAAO,EAAE;IACb,MAAM,IAAIG,YAAY,CAAC,+CAA+C,CAAC;EACxE;EAEA,IAAIO,IAAI,GAAGL,WAAW,CAACI,QAAQ,EAAER,OAAO,CAAC;EAEzC,IAAIS,IAAI,IAAI,IAAI,EAAE;IACjB,MAAM,IAAIR,UAAU,CAAC,8CAA8C,CAAC;EACrE;EAEA,IAAI,OAAOQ,IAAI,KAAK,SAAS,EAAE;IAC9B,OAAOA,IAAI,GAAGV,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC;EACtC;EAEA,IAAI,OAAOU,IAAI,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAIR,UAAU,CAAC,2CAA2C,CAAC;EAClE;EAEA,IAAI,OAAOQ,IAAI,KAAK,QAAQ,EAAE;IAC7B,IAAIC,CAAC,GAAGP,cAAc,CAACM,IAAI,CAAC;IAC5B,IAAI,OAAOC,CAAC,KAAK,WAAW,EAAE;MAC7B,MAAM,IAAIT,UAAU,CAAC,kCAAkC,CAAC;IACzD;IACA,OAAOS,CAAC;EACT;EAEA,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAIR,UAAU,CAAC,2CAA2C,CAAC;EAClE;EAEA,IAAI,OAAOQ,IAAI,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAIP,YAAY,CAAC,0CAA0C,CAAC;EACnE;EAEA,OAAOO,IAAI;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}