{"ast":null,"code":"'use strict';\n\nvar MAX_ITER = 1075; // 1023+52 (subnormals) => BIAS+NUM_SIGNFICAND_BITS-1\nvar maxBits = 54; // only 53 bits for fraction\n\nmodule.exports = function fractionToBitString(x) {\n  var str = '';\n  if (x === 0) {\n    return str;\n  }\n  var j = MAX_ITER;\n  var y;\n  // Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n  for (var i = 0; i < MAX_ITER; i += 1) {\n    y = x * 2;\n    if (y >= 1) {\n      x = y - 1; // eslint-disable-line no-param-reassign\n      str += '1';\n      if (j === MAX_ITER) {\n        j = i; // first 1\n      }\n    } else {\n      x = y; // eslint-disable-line no-param-reassign\n      str += '0';\n    }\n    // Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n    if (y === 1 || i - j > maxBits) {\n      return str;\n    }\n  }\n  return str;\n};","map":{"version":3,"names":["MAX_ITER","maxBits","module","exports","fractionToBitString","x","str","j","y","i"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/helpers/fractionToBinaryString.js"],"sourcesContent":["'use strict';\n\nvar MAX_ITER = 1075; // 1023+52 (subnormals) => BIAS+NUM_SIGNFICAND_BITS-1\nvar maxBits = 54; // only 53 bits for fraction\n\nmodule.exports = function fractionToBitString(x) {\n\tvar str = '';\n\tif (x === 0) {\n\t\treturn str;\n\t}\n\tvar j = MAX_ITER;\n\n\tvar y;\n\t// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n\tfor (var i = 0; i < MAX_ITER; i += 1) {\n\t\ty = x * 2;\n\t\tif (y >= 1) {\n\t\t\tx = y - 1; // eslint-disable-line no-param-reassign\n\t\t\tstr += '1';\n\t\t\tif (j === MAX_ITER) {\n\t\t\t\tj = i; // first 1\n\t\t\t}\n\t\t} else {\n\t\t\tx = y; // eslint-disable-line no-param-reassign\n\t\t\tstr += '0';\n\t\t}\n\t\t// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n\t\tif (y === 1 || i - j > maxBits) {\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn str;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAG,IAAI,CAAC,CAAC;AACrB,IAAIC,OAAO,GAAG,EAAE,CAAC,CAAC;;AAElBC,MAAM,CAACC,OAAO,GAAG,SAASC,mBAAmBA,CAACC,CAAC,EAAE;EAChD,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAID,CAAC,KAAK,CAAC,EAAE;IACZ,OAAOC,GAAG;EACX;EACA,IAAIC,CAAC,GAAGP,QAAQ;EAEhB,IAAIQ,CAAC;EACL;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,QAAQ,EAAES,CAAC,IAAI,CAAC,EAAE;IACrCD,CAAC,GAAGH,CAAC,GAAG,CAAC;IACT,IAAIG,CAAC,IAAI,CAAC,EAAE;MACXH,CAAC,GAAGG,CAAC,GAAG,CAAC,CAAC,CAAC;MACXF,GAAG,IAAI,GAAG;MACV,IAAIC,CAAC,KAAKP,QAAQ,EAAE;QACnBO,CAAC,GAAGE,CAAC,CAAC,CAAC;MACR;IACD,CAAC,MAAM;MACNJ,CAAC,GAAGG,CAAC,CAAC,CAAC;MACPF,GAAG,IAAI,GAAG;IACX;IACA;IACA,IAAIE,CAAC,KAAK,CAAC,IAAIC,CAAC,GAAGF,CAAC,GAAGN,OAAO,EAAE;MAC/B,OAAOK,GAAG;IACX;EACD;EACA,OAAOA,GAAG;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}