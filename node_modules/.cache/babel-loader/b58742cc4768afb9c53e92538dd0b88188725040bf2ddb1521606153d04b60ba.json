{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\nvar $RangeError = require('es-errors/range');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar hasOwnProperty = require('./HasOwnProperty');\nvar IsArray = require('./IsArray');\nvar IsBigIntElementType = require('./IsBigIntElementType');\nvar IsUnsignedElementType = require('./IsUnsignedElementType');\nvar bytesAsFloat32 = require('../helpers/bytesAsFloat32');\nvar bytesAsFloat64 = require('../helpers/bytesAsFloat64');\nvar bytesAsInteger = require('../helpers/bytesAsInteger');\nvar every = require('../helpers/every');\nvar isByteValue = require('../helpers/isByteValue');\nvar $reverse = callBound('Array.prototype.reverse');\nvar $slice = callBound('Array.prototype.slice');\nvar keys = require('object-keys');\n\n// https://262.ecma-international.org/15.0/#table-the-typedarray-constructors\nvar TypeToSizes = {\n  __proto__: null,\n  INT8: 1,\n  UINT8: 1,\n  UINT8C: 1,\n  INT16: 2,\n  UINT16: 2,\n  INT32: 4,\n  UINT32: 4,\n  BIGINT64: 8,\n  BIGUINT64: 8,\n  FLOAT32: 4,\n  FLOAT64: 8\n};\n\n// https://262.ecma-international.org/15.0/#sec-rawbytestonumeric\n\nmodule.exports = function RawBytesToNumeric(type, rawBytes, isLittleEndian) {\n  if (!hasOwnProperty(TypeToSizes, type)) {\n    throw new $TypeError('Assertion failed: `type` must be a TypedArray element type: ' + keys(TypeToSizes));\n  }\n  if (!IsArray(rawBytes) || !every(rawBytes, isByteValue)) {\n    throw new $TypeError('Assertion failed: `rawBytes` must be an Array of bytes');\n  }\n  if (typeof isLittleEndian !== 'boolean') {\n    throw new $TypeError('Assertion failed: `isLittleEndian` must be a Boolean');\n  }\n  var elementSize = TypeToSizes[type]; // step 1\n\n  if (rawBytes.length !== elementSize) {\n    // this assertion is not in the spec, but it'd be an editorial error if it were ever violated\n    throw new $RangeError('Assertion failed: `rawBytes` must have a length of ' + elementSize + ' for type ' + type);\n  }\n  var isBigInt = IsBigIntElementType(type);\n  if (isBigInt && !$BigInt) {\n    throw new $SyntaxError('this environment does not support BigInts');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  rawBytes = $slice(rawBytes, 0, elementSize);\n  if (!isLittleEndian) {\n    $reverse(rawBytes); // step 2\n  }\n  if (type === 'FLOAT32') {\n    // step 3\n    return bytesAsFloat32(rawBytes);\n  }\n  if (type === 'FLOAT64') {\n    // step 4\n    return bytesAsFloat64(rawBytes);\n  }\n  return bytesAsInteger(rawBytes, elementSize, IsUnsignedElementType(type), isBigInt);\n};","map":{"version":3,"names":["GetIntrinsic","require","callBound","$RangeError","$SyntaxError","$TypeError","$BigInt","hasOwnProperty","IsArray","IsBigIntElementType","IsUnsignedElementType","bytesAsFloat32","bytesAsFloat64","bytesAsInteger","every","isByteValue","$reverse","$slice","keys","TypeToSizes","__proto__","INT8","UINT8","UINT8C","INT16","UINT16","INT32","UINT32","BIGINT64","BIGUINT64","FLOAT32","FLOAT64","module","exports","RawBytesToNumeric","type","rawBytes","isLittleEndian","elementSize","length","isBigInt"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/2024/RawBytesToNumeric.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\n\nvar $RangeError = require('es-errors/range');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $BigInt = GetIntrinsic('%BigInt%', true);\n\nvar hasOwnProperty = require('./HasOwnProperty');\nvar IsArray = require('./IsArray');\nvar IsBigIntElementType = require('./IsBigIntElementType');\nvar IsUnsignedElementType = require('./IsUnsignedElementType');\n\nvar bytesAsFloat32 = require('../helpers/bytesAsFloat32');\nvar bytesAsFloat64 = require('../helpers/bytesAsFloat64');\nvar bytesAsInteger = require('../helpers/bytesAsInteger');\nvar every = require('../helpers/every');\nvar isByteValue = require('../helpers/isByteValue');\n\nvar $reverse = callBound('Array.prototype.reverse');\nvar $slice = callBound('Array.prototype.slice');\n\nvar keys = require('object-keys');\n\n// https://262.ecma-international.org/15.0/#table-the-typedarray-constructors\nvar TypeToSizes = {\n\t__proto__: null,\n\tINT8: 1,\n\tUINT8: 1,\n\tUINT8C: 1,\n\tINT16: 2,\n\tUINT16: 2,\n\tINT32: 4,\n\tUINT32: 4,\n\tBIGINT64: 8,\n\tBIGUINT64: 8,\n\tFLOAT32: 4,\n\tFLOAT64: 8\n};\n\n// https://262.ecma-international.org/15.0/#sec-rawbytestonumeric\n\nmodule.exports = function RawBytesToNumeric(type, rawBytes, isLittleEndian) {\n\tif (!hasOwnProperty(TypeToSizes, type)) {\n\t\tthrow new $TypeError('Assertion failed: `type` must be a TypedArray element type: ' + keys(TypeToSizes));\n\t}\n\tif (!IsArray(rawBytes) || !every(rawBytes, isByteValue)) {\n\t\tthrow new $TypeError('Assertion failed: `rawBytes` must be an Array of bytes');\n\t}\n\tif (typeof isLittleEndian !== 'boolean') {\n\t\tthrow new $TypeError('Assertion failed: `isLittleEndian` must be a Boolean');\n\t}\n\n\tvar elementSize = TypeToSizes[type]; // step 1\n\n\tif (rawBytes.length !== elementSize) {\n\t\t// this assertion is not in the spec, but it'd be an editorial error if it were ever violated\n\t\tthrow new $RangeError('Assertion failed: `rawBytes` must have a length of ' + elementSize + ' for type ' + type);\n\t}\n\n\tvar isBigInt = IsBigIntElementType(type);\n\tif (isBigInt && !$BigInt) {\n\t\tthrow new $SyntaxError('this environment does not support BigInts');\n\t}\n\n\t// eslint-disable-next-line no-param-reassign\n\trawBytes = $slice(rawBytes, 0, elementSize);\n\tif (!isLittleEndian) {\n\t\t$reverse(rawBytes); // step 2\n\t}\n\n\tif (type === 'FLOAT32') { // step 3\n\t\treturn bytesAsFloat32(rawBytes);\n\t}\n\n\tif (type === 'FLOAT64') { // step 4\n\t\treturn bytesAsFloat64(rawBytes);\n\t}\n\n\treturn bytesAsInteger(rawBytes, elementSize, IsUnsignedElementType(type), isBigInt);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}