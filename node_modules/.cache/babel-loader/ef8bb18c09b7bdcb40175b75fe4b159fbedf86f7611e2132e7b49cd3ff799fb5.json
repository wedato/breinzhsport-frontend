{"ast":null,"code":"\"use strict\";\n\n/**\n * Middleware Utils module.\n *\n * Exposes various configuration and helper methods to be used by the middleware.\n * @module mw_utils\n */\nvar Segment = require('../segments/segment');\nvar IncomingRequestData = require('./incoming_request_data');\nvar logger = require('../logger');\nvar coreUtils = require('../utils');\nvar wildcardMatch = require('../utils').wildcardMatch;\nvar processTraceData = require('../utils').processTraceData;\n//headers are case-insensitive\nvar XRAY_HEADER = 'x-amzn-trace-id';\nvar overrideFlag = !!process.env.AWS_XRAY_TRACING_NAME;\nvar utils = {\n  defaultName: process.env.AWS_XRAY_TRACING_NAME,\n  dynamicNaming: false,\n  hostPattern: null,\n  sampler: require('./sampling/default_sampler'),\n  /**\n   * Enables dynamic naming for segments via the middleware. Use 'AWSXRay.middleware.enableDynamicNaming()'.\n   * @param {string} [hostPattern] - The pattern to match the host header. See the README on dynamic and fixed naming modes.\n   * @alias module:mw_utils.enableDynamicNaming\n   */\n  enableDynamicNaming: function (hostPattern) {\n    this.dynamicNaming = true;\n    if (hostPattern && typeof hostPattern !== 'string') {\n      throw new Error('Host pattern must be a string.');\n    }\n    this.hostPattern = hostPattern || null;\n  },\n  /**\n   * Splits out the 'x-amzn-trace-id' header params from the incoming request.  Used by the middleware.\n   * @param {http.IncomingMessage|https.IncomingMessage} req - The request object from the incoming call.\n   * @returns {object}\n   * @alias module:mw_utils.processHeaders\n   */\n  processHeaders: function processHeaders(req) {\n    var amznTraceHeader = {};\n    if (req && req.headers && req.headers[XRAY_HEADER]) {\n      amznTraceHeader = processTraceData(req.headers[XRAY_HEADER]);\n    }\n    return amznTraceHeader;\n  },\n  /**\n   * Resolves the name of the segment as determined by fixed or dynamic mode options. Used by the middleware.\n   * @param {string} hostHeader - The string from the request.headers.host property.\n   * @returns {string}\n   * @alias module:mw_utils.resolveName\n   */\n  resolveName: function resolveName(hostHeader) {\n    var name;\n    if (this.dynamicNaming && hostHeader) {\n      name = this.hostPattern ? wildcardMatch(this.hostPattern, hostHeader) ? hostHeader : this.defaultName : hostHeader;\n    } else {\n      name = this.defaultName;\n    }\n    return name;\n  },\n  /**\n   * Resolves the sampling decision as determined by the values given and options set. Used by the middleware.\n   * @param {object} amznTraceHeader - The object as returned by the processHeaders function.\n   * @param {Segment} segment - The string from the request.headers.host property.\n   * @param {http.ServerResponse|https.ServerResponse} res - The response object from the incoming call.\n   * @returns {boolean}\n   * @alias module:mw_utils.resolveSampling\n   */\n  resolveSampling: function resolveSampling(amznTraceHeader, segment, res) {\n    var isSampled;\n    if (amznTraceHeader.sampled === '1') {\n      isSampled = true;\n    } else if (amznTraceHeader.sampled === '0') {\n      isSampled = false;\n    } else {\n      var sampleRequest = {\n        host: res.req.headers.host,\n        httpMethod: res.req.method,\n        urlPath: res.req.url,\n        serviceName: segment.name\n      };\n      isSampled = this.sampler.shouldSample(sampleRequest);\n      if (isSampled instanceof String || typeof isSampled === 'string') {\n        segment.setMatchedSamplingRule(isSampled);\n        isSampled = true;\n      }\n    }\n    if (amznTraceHeader.sampled === '?' && res.header) {\n      res.header(XRAY_HEADER, 'Root=' + amznTraceHeader.root + ';Sampled=' + (isSampled ? '1' : '0'));\n    }\n    if (!isSampled) {\n      segment.notTraced = true;\n    }\n  },\n  /**\n   * Sets the default name of created segments. Used with the middleware.\n   * Can be overridden by the AWS_XRAY_TRACING_NAME environment variable.\n   * @param {string} name - The default name for segments created in the middleware.\n   * @alias module:mw_utils.setDefaultName\n   */\n  setDefaultName: function setDefaultName(name) {\n    if (!overrideFlag) {\n      this.defaultName = name;\n    }\n  },\n  disableCentralizedSampling: function disableCentralizedSampling() {\n    this.sampler = require('./sampling/local_sampler');\n  },\n  /**\n   * Overrides the default sampling rules file to specify at what rate to sample at for specific routes.\n   * The base sampling rules file can be found at /lib/resources/default_sampling_rules.json\n   * @param {string|Object} source - The path to the custom sampling rules file, or the source JSON object.\n   * @memberof AWSXRay\n   */\n  setSamplingRules: function setSamplingRules(source) {\n    if (!source || source instanceof String || !(typeof source === 'string' || source instanceof Object)) {\n      throw new Error('Please specify a path to the local sampling rules file, or supply an object containing the rules.');\n    }\n    this.sampler.setLocalRules(source);\n  },\n  /**\n   * Logs a debug message including core request and segment information\n   * @param {string} message - The message to be logged\n   * @param {string} url - The request url being traced\n   * @param {Segment} - The current segment\n   */\n  middlewareLog: function middlewareLog(message, url, segment) {\n    logger.getLogger().debug(message + ': { url: ' + url + ', name: ' + segment.name + ', trace_id: ' + segment.trace_id + ', id: ' + segment.id + ', sampled: ' + !segment.notTraced + ' }');\n  },\n  /**\n   * Traces the request/response cycle of an http.IncomingMessage / http.ServerResponse pair.\n   * Resolves sampling rules, creates a segment, adds the core request / response data adding\n   * throttling / error / fault flags based on the response status code.\n   * @param {http.IncomingMessage} req - The incoming request.\n   * @param {http.ServerResponse} res - The server response.\n   * @returns {Segment}\n   * @memberof AWSXRay\n   */\n  traceRequestResponseCycle: function traceRequestResponseCycle(req, res) {\n    var amznTraceHeader = this.processHeaders(req);\n    var name = this.resolveName(req.headers.host);\n    var segment = new Segment(name, amznTraceHeader.root, amznTraceHeader.parent);\n    if (!res.req) {\n      res.req = req;\n    }\n    this.resolveSampling(amznTraceHeader, segment, res);\n    segment.addIncomingRequestData(new IncomingRequestData(req));\n    this.middlewareLog('Starting middleware segment', req.url, segment);\n    var middlewareLog = this.middlewareLog;\n    var didEnd = false;\n    var endSegment = function () {\n      // ensure `endSegment` is only called once\n      // in some versions of node.js 10.x and in all versions of node.js 11.x and higher,\n      // the 'finish' and 'close' event are BOTH triggered.\n      // Previously, only one or the other was triggered:\n      // https://github.com/nodejs/node/pull/20611\n      if (didEnd) {\n        return;\n      }\n      didEnd = true;\n      if (res.statusCode === 429) {\n        segment.addThrottleFlag();\n      }\n      const cause = coreUtils.getCauseTypeFromHttpStatus(res.statusCode);\n      if (cause) {\n        segment[cause] = true;\n      }\n      segment.http.close(res);\n      segment.close();\n      middlewareLog('Closed middleware segment successfully', req.url, segment);\n    };\n    res.on('finish', endSegment);\n    res.on('close', endSegment);\n    return segment;\n  }\n};\nmodule.exports = utils;","map":{"version":3,"names":["Segment","require","IncomingRequestData","logger","coreUtils","wildcardMatch","processTraceData","XRAY_HEADER","overrideFlag","process","env","AWS_XRAY_TRACING_NAME","utils","defaultName","dynamicNaming","hostPattern","sampler","enableDynamicNaming","Error","processHeaders","req","amznTraceHeader","headers","resolveName","hostHeader","name","resolveSampling","segment","res","isSampled","sampled","sampleRequest","host","httpMethod","method","urlPath","url","serviceName","shouldSample","String","setMatchedSamplingRule","header","root","notTraced","setDefaultName","disableCentralizedSampling","setSamplingRules","source","Object","setLocalRules","middlewareLog","message","getLogger","debug","trace_id","id","traceRequestResponseCycle","parent","addIncomingRequestData","didEnd","endSegment","statusCode","addThrottleFlag","cause","getCauseTypeFromHttpStatus","http","close","on","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/middleware/mw_utils.js"],"sourcesContent":["\"use strict\";\n/**\n * Middleware Utils module.\n *\n * Exposes various configuration and helper methods to be used by the middleware.\n * @module mw_utils\n */\nvar Segment = require('../segments/segment');\nvar IncomingRequestData = require('./incoming_request_data');\nvar logger = require('../logger');\nvar coreUtils = require('../utils');\nvar wildcardMatch = require('../utils').wildcardMatch;\nvar processTraceData = require('../utils').processTraceData;\n//headers are case-insensitive\nvar XRAY_HEADER = 'x-amzn-trace-id';\nvar overrideFlag = !!process.env.AWS_XRAY_TRACING_NAME;\nvar utils = {\n    defaultName: process.env.AWS_XRAY_TRACING_NAME,\n    dynamicNaming: false,\n    hostPattern: null,\n    sampler: require('./sampling/default_sampler'),\n    /**\n     * Enables dynamic naming for segments via the middleware. Use 'AWSXRay.middleware.enableDynamicNaming()'.\n     * @param {string} [hostPattern] - The pattern to match the host header. See the README on dynamic and fixed naming modes.\n     * @alias module:mw_utils.enableDynamicNaming\n     */\n    enableDynamicNaming: function (hostPattern) {\n        this.dynamicNaming = true;\n        if (hostPattern && typeof hostPattern !== 'string') {\n            throw new Error('Host pattern must be a string.');\n        }\n        this.hostPattern = hostPattern || null;\n    },\n    /**\n     * Splits out the 'x-amzn-trace-id' header params from the incoming request.  Used by the middleware.\n     * @param {http.IncomingMessage|https.IncomingMessage} req - The request object from the incoming call.\n     * @returns {object}\n     * @alias module:mw_utils.processHeaders\n     */\n    processHeaders: function processHeaders(req) {\n        var amznTraceHeader = {};\n        if (req && req.headers && req.headers[XRAY_HEADER]) {\n            amznTraceHeader = processTraceData(req.headers[XRAY_HEADER]);\n        }\n        return amznTraceHeader;\n    },\n    /**\n     * Resolves the name of the segment as determined by fixed or dynamic mode options. Used by the middleware.\n     * @param {string} hostHeader - The string from the request.headers.host property.\n     * @returns {string}\n     * @alias module:mw_utils.resolveName\n     */\n    resolveName: function resolveName(hostHeader) {\n        var name;\n        if (this.dynamicNaming && hostHeader) {\n            name = this.hostPattern ? (wildcardMatch(this.hostPattern, hostHeader) ? hostHeader : this.defaultName) : hostHeader;\n        }\n        else {\n            name = this.defaultName;\n        }\n        return name;\n    },\n    /**\n     * Resolves the sampling decision as determined by the values given and options set. Used by the middleware.\n     * @param {object} amznTraceHeader - The object as returned by the processHeaders function.\n     * @param {Segment} segment - The string from the request.headers.host property.\n     * @param {http.ServerResponse|https.ServerResponse} res - The response object from the incoming call.\n     * @returns {boolean}\n     * @alias module:mw_utils.resolveSampling\n     */\n    resolveSampling: function resolveSampling(amznTraceHeader, segment, res) {\n        var isSampled;\n        if (amznTraceHeader.sampled === '1') {\n            isSampled = true;\n        }\n        else if (amznTraceHeader.sampled === '0') {\n            isSampled = false;\n        }\n        else {\n            var sampleRequest = {\n                host: res.req.headers.host,\n                httpMethod: res.req.method,\n                urlPath: res.req.url,\n                serviceName: segment.name\n            };\n            isSampled = this.sampler.shouldSample(sampleRequest);\n            if (isSampled instanceof String || typeof isSampled === 'string') {\n                segment.setMatchedSamplingRule(isSampled);\n                isSampled = true;\n            }\n        }\n        if (amznTraceHeader.sampled === '?' && res.header) {\n            res.header(XRAY_HEADER, 'Root=' + amznTraceHeader.root + ';Sampled=' + (isSampled ? '1' : '0'));\n        }\n        if (!isSampled) {\n            segment.notTraced = true;\n        }\n    },\n    /**\n     * Sets the default name of created segments. Used with the middleware.\n     * Can be overridden by the AWS_XRAY_TRACING_NAME environment variable.\n     * @param {string} name - The default name for segments created in the middleware.\n     * @alias module:mw_utils.setDefaultName\n     */\n    setDefaultName: function setDefaultName(name) {\n        if (!overrideFlag) {\n            this.defaultName = name;\n        }\n    },\n    disableCentralizedSampling: function disableCentralizedSampling() {\n        this.sampler = require('./sampling/local_sampler');\n    },\n    /**\n     * Overrides the default sampling rules file to specify at what rate to sample at for specific routes.\n     * The base sampling rules file can be found at /lib/resources/default_sampling_rules.json\n     * @param {string|Object} source - The path to the custom sampling rules file, or the source JSON object.\n     * @memberof AWSXRay\n     */\n    setSamplingRules: function setSamplingRules(source) {\n        if (!source || source instanceof String || !(typeof source === 'string' || (source instanceof Object))) {\n            throw new Error('Please specify a path to the local sampling rules file, or supply an object containing the rules.');\n        }\n        this.sampler.setLocalRules(source);\n    },\n    /**\n     * Logs a debug message including core request and segment information\n     * @param {string} message - The message to be logged\n     * @param {string} url - The request url being traced\n     * @param {Segment} - The current segment\n     */\n    middlewareLog: function middlewareLog(message, url, segment) {\n        logger.getLogger().debug(message + ': { url: ' + url + ', name: ' + segment.name + ', trace_id: ' +\n            segment.trace_id + ', id: ' + segment.id + ', sampled: ' + !segment.notTraced + ' }');\n    },\n    /**\n     * Traces the request/response cycle of an http.IncomingMessage / http.ServerResponse pair.\n     * Resolves sampling rules, creates a segment, adds the core request / response data adding\n     * throttling / error / fault flags based on the response status code.\n     * @param {http.IncomingMessage} req - The incoming request.\n     * @param {http.ServerResponse} res - The server response.\n     * @returns {Segment}\n     * @memberof AWSXRay\n     */\n    traceRequestResponseCycle: function traceRequestResponseCycle(req, res) {\n        var amznTraceHeader = this.processHeaders(req);\n        var name = this.resolveName(req.headers.host);\n        var segment = new Segment(name, amznTraceHeader.root, amznTraceHeader.parent);\n        if (!res.req) {\n            res.req = req;\n        }\n        this.resolveSampling(amznTraceHeader, segment, res);\n        segment.addIncomingRequestData(new IncomingRequestData(req));\n        this.middlewareLog('Starting middleware segment', req.url, segment);\n        var middlewareLog = this.middlewareLog;\n        var didEnd = false;\n        var endSegment = function () {\n            // ensure `endSegment` is only called once\n            // in some versions of node.js 10.x and in all versions of node.js 11.x and higher,\n            // the 'finish' and 'close' event are BOTH triggered.\n            // Previously, only one or the other was triggered:\n            // https://github.com/nodejs/node/pull/20611\n            if (didEnd) {\n                return;\n            }\n            didEnd = true;\n            if (res.statusCode === 429) {\n                segment.addThrottleFlag();\n            }\n            const cause = coreUtils.getCauseTypeFromHttpStatus(res.statusCode);\n            if (cause) {\n                segment[cause] = true;\n            }\n            segment.http.close(res);\n            segment.close();\n            middlewareLog('Closed middleware segment successfully', req.url, segment);\n        };\n        res.on('finish', endSegment);\n        res.on('close', endSegment);\n        return segment;\n    }\n};\nmodule.exports = utils;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}