{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $pow = require('math-intrinsics/pow');\nvar $Number = GetIntrinsic('%Number%');\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nmodule.exports = function bytesAsInteger(rawBytes, elementSize, isUnsigned, isBigInt) {\n  var Z = isBigInt ? $BigInt : $Number;\n\n  // this is common to both branches\n  var intValue = Z(0);\n  for (var i = 0; i < rawBytes.length; i++) {\n    intValue += Z(rawBytes[i] * $pow(2, 8 * i));\n  }\n  /*\n  Let intValue be the byte elements of rawBytes concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.\n  */\n\n  if (!isUnsigned) {\n    // steps 5-6\n    // Let intValue be the byte elements of rawBytes concatenated and interpreted as a bit string encoding of a binary little-endian 2's complement number of bit length elementSize × 8.\n    var bitLength = elementSize * 8;\n    if (rawBytes[elementSize - 1] & 0x80) {\n      intValue -= Z($pow(2, bitLength));\n    }\n  }\n  return intValue; // step 7\n};","map":{"version":3,"names":["GetIntrinsic","require","$pow","$Number","$BigInt","module","exports","bytesAsInteger","rawBytes","elementSize","isUnsigned","isBigInt","Z","intValue","i","length","bitLength"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/es-abstract/helpers/bytesAsInteger.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $pow = require('math-intrinsics/pow');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $BigInt = GetIntrinsic('%BigInt%', true);\n\nmodule.exports = function bytesAsInteger(rawBytes, elementSize, isUnsigned, isBigInt) {\n\tvar Z = isBigInt ? $BigInt : $Number;\n\n\t// this is common to both branches\n\tvar intValue = Z(0);\n\tfor (var i = 0; i < rawBytes.length; i++) {\n\t\tintValue += Z(rawBytes[i] * $pow(2, 8 * i));\n\t}\n\t/*\n\tLet intValue be the byte elements of rawBytes concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.\n\t*/\n\n\tif (!isUnsigned) { // steps 5-6\n\t\t// Let intValue be the byte elements of rawBytes concatenated and interpreted as a bit string encoding of a binary little-endian 2's complement number of bit length elementSize × 8.\n\t\tvar bitLength = elementSize * 8;\n\n\t\tif (rawBytes[elementSize - 1] & 0x80) {\n\t\t\tintValue -= Z($pow(2, bitLength));\n\t\t}\n\t}\n\n\treturn intValue; // step 7\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,IAAI,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAEzC,IAAIE,OAAO,GAAGH,YAAY,CAAC,UAAU,CAAC;AACtC,IAAII,OAAO,GAAGJ,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC;AAE5CK,MAAM,CAACC,OAAO,GAAG,SAASC,cAAcA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,QAAQ,EAAE;EACrF,IAAIC,CAAC,GAAGD,QAAQ,GAAGP,OAAO,GAAGD,OAAO;;EAEpC;EACA,IAAIU,QAAQ,GAAGD,CAAC,CAAC,CAAC,CAAC;EACnB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACzCD,QAAQ,IAAID,CAAC,CAACJ,QAAQ,CAACM,CAAC,CAAC,GAAGZ,IAAI,CAAC,CAAC,EAAE,CAAC,GAAGY,CAAC,CAAC,CAAC;EAC5C;EACA;AACD;AACA;;EAEC,IAAI,CAACJ,UAAU,EAAE;IAAE;IAClB;IACA,IAAIM,SAAS,GAAGP,WAAW,GAAG,CAAC;IAE/B,IAAID,QAAQ,CAACC,WAAW,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE;MACrCI,QAAQ,IAAID,CAAC,CAACV,IAAI,CAAC,CAAC,EAAEc,SAAS,CAAC,CAAC;IAClC;EACD;EAEA,OAAOH,QAAQ,CAAC,CAAC;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}