{"ast":null,"code":"import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, {\n  fillColor: markerColor = MARKER_COLOR,\n  smCircleSize: smallSize = 60,\n  smThreshold: smallThreshold = 50,\n  mdCircleSize: mediumSize = 100,\n  mdThreshold: mediumThreshold = 100,\n  lgCircleSize: largeSize = 140,\n  lgThreshold: largeThreshold = 500,\n  xlCircleSize: extraLargeSize = 180,\n  borderWidth = 4,\n  borderColor = COLOR_WHITE,\n  clusterPaint,\n  onClick,\n  showCount,\n  clusterCountLayout,\n  fontColor = COLOR_WHITE\n}, mapStyle) {\n  const clusterLayerId = `${sourceName}-layer-clusters`;\n  const clusterSymbolLayerId = `${sourceName}-layer-cluster-count`;\n  // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n  const paintOptions = Object.assign({\n    \"circle-color\": [\"step\", [\"get\", \"point_count\"], markerColor, smallThreshold, markerColor, mediumThreshold, markerColor, largeThreshold, markerColor],\n    \"circle-radius\": [\"step\", [\"get\", \"point_count\"], smallSize, smallThreshold, mediumSize, mediumThreshold, largeSize, largeThreshold, extraLargeSize],\n    \"circle-stroke-width\": borderWidth,\n    \"circle-stroke-color\": borderColor\n  }, clusterPaint);\n  const defaultClusterLayer = {\n    id: clusterLayerId,\n    type: \"circle\",\n    source: sourceName,\n    filter: [\"has\", \"point_count\"],\n    paint: paintOptions\n  };\n  map.addLayer(Object.assign({}, defaultClusterLayer));\n  /*\n   * Inspect cluster on click\n   */\n  map.on(\"click\", clusterLayerId, function (e) {\n    if (typeof onClick === \"function\") onClick(e);\n    const features = map.queryRenderedFeatures(e.point, {\n      layers: [clusterLayerId]\n    });\n    const clusterId = features[0].properties.cluster_id;\n    const source = map.getSource(sourceName);\n    if (isGeoJsonSource(source)) {\n      source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n        if (err) return;\n        map.easeTo({\n          center: features[0].geometry.coordinates,\n          zoom: zoom\n        });\n      });\n    }\n  });\n  /*\n   * Symbol Layer for cluster point count\n   */\n  if (showCount) {\n    const defaultLayoutOptions = {\n      \"text-field\": \"{point_count_abbreviated}\",\n      \"text-size\": 24\n    };\n    const locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n    if (locationServiceStyle) {\n      defaultLayoutOptions[\"text-font\"] = [FONT_DEFAULT_BY_STYLE[locationServiceStyle]];\n    }\n    const layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n    const paintOptions = {\n      \"text-color\": fontColor\n    };\n    const defaultClusterCount = {\n      id: clusterSymbolLayerId,\n      type: \"symbol\",\n      source: sourceName,\n      filter: [\"has\", \"point_count\"],\n      layout: layoutOptions,\n      paint: paintOptions\n    };\n    map.addLayer(Object.assign({}, defaultClusterCount));\n  }\n  return {\n    clusterLayerId,\n    clusterSymbolLayerId\n  };\n}","map":{"version":3,"names":["Geo","COLOR_WHITE","MARKER_COLOR","isGeoJsonSource","FONT_DEFAULT_BY_STYLE","drawClusterLayer","sourceName","map","fillColor","markerColor","smCircleSize","smallSize","smThreshold","smallThreshold","mdCircleSize","mediumSize","mdThreshold","mediumThreshold","lgCircleSize","largeSize","lgThreshold","largeThreshold","xlCircleSize","extraLargeSize","borderWidth","borderColor","clusterPaint","onClick","showCount","clusterCountLayout","fontColor","mapStyle","clusterLayerId","clusterSymbolLayerId","paintOptions","Object","assign","defaultClusterLayer","id","type","source","filter","paint","addLayer","on","e","features","queryRenderedFeatures","point","layers","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","geometry","coordinates","defaultLayoutOptions","locationServiceStyle","getDefaultMap","style","layoutOptions","defaultClusterCount","layout"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/maplibre-gl-js-amplify/lib/esm/drawClusterLayer.js"],"sourcesContent":["import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, { fillColor: markerColor = MARKER_COLOR, smCircleSize: smallSize = 60, smThreshold: smallThreshold = 50, mdCircleSize: mediumSize = 100, mdThreshold: mediumThreshold = 100, lgCircleSize: largeSize = 140, lgThreshold: largeThreshold = 500, xlCircleSize: extraLargeSize = 180, borderWidth = 4, borderColor = COLOR_WHITE, clusterPaint, onClick, showCount, clusterCountLayout, fontColor = COLOR_WHITE, }, mapStyle) {\n    const clusterLayerId = `${sourceName}-layer-clusters`;\n    const clusterSymbolLayerId = `${sourceName}-layer-cluster-count`;\n    // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n    const paintOptions = Object.assign({ \"circle-color\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            markerColor,\n            smallThreshold,\n            markerColor,\n            mediumThreshold,\n            markerColor,\n            largeThreshold,\n            markerColor,\n        ], \"circle-radius\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            smallSize,\n            smallThreshold,\n            mediumSize,\n            mediumThreshold,\n            largeSize,\n            largeThreshold,\n            extraLargeSize,\n        ], \"circle-stroke-width\": borderWidth, \"circle-stroke-color\": borderColor }, clusterPaint);\n    const defaultClusterLayer = {\n        id: clusterLayerId,\n        type: \"circle\",\n        source: sourceName,\n        filter: [\"has\", \"point_count\"],\n        paint: paintOptions,\n    };\n    map.addLayer(Object.assign({}, defaultClusterLayer));\n    /*\n     * Inspect cluster on click\n     */\n    map.on(\"click\", clusterLayerId, function (e) {\n        if (typeof onClick === \"function\")\n            onClick(e);\n        const features = map.queryRenderedFeatures(e.point, {\n            layers: [clusterLayerId],\n        });\n        const clusterId = features[0].properties.cluster_id;\n        const source = map.getSource(sourceName);\n        if (isGeoJsonSource(source)) {\n            source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n                if (err)\n                    return;\n                map.easeTo({\n                    center: features[0].geometry.coordinates,\n                    zoom: zoom,\n                });\n            });\n        }\n    });\n    /*\n     * Symbol Layer for cluster point count\n     */\n    if (showCount) {\n        const defaultLayoutOptions = {\n            \"text-field\": \"{point_count_abbreviated}\",\n            \"text-size\": 24,\n        };\n        const locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n        if (locationServiceStyle) {\n            defaultLayoutOptions[\"text-font\"] = [\n                FONT_DEFAULT_BY_STYLE[locationServiceStyle],\n            ];\n        }\n        const layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n        const paintOptions = {\n            \"text-color\": fontColor,\n        };\n        const defaultClusterCount = {\n            id: clusterSymbolLayerId,\n            type: \"symbol\",\n            source: sourceName,\n            filter: [\"has\", \"point_count\"],\n            layout: layoutOptions,\n            paint: paintOptions,\n        };\n        map.addLayer(Object.assign({}, defaultClusterCount));\n    }\n    return { clusterLayerId, clusterSymbolLayerId };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}