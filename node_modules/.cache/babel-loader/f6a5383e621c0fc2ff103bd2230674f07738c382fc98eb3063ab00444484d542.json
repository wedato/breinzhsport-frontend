{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartCelebrityRecognitionRequest, StartCelebrityRecognitionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartCelebrityRecognitionCommand, serializeAws_json1_1StartCelebrityRecognitionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts asynchronous recognition of celebrities in a stored video.</p>\n *          <p>Amazon Rekognition Video can detect celebrities in a video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *       and the filename of the video.\n *       <code>StartCelebrityRecognition</code>\n *       returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n *       When celebrity recognition analysis is finished, Amazon Rekognition Video publishes a completion status\n *       to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.\n *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <a>GetCelebrityRecognition</a> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartCelebrityRecognition</code>. </p>\n *\n *          <p>For more information, see Recognizing Celebrities in the Amazon Rekognition Developer Guide.</p>\n */\nvar StartCelebrityRecognitionCommand = /** @class */function (_super) {\n  __extends(StartCelebrityRecognitionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function StartCelebrityRecognitionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  StartCelebrityRecognitionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"StartCelebrityRecognitionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartCelebrityRecognitionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartCelebrityRecognitionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  StartCelebrityRecognitionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartCelebrityRecognitionCommand(input, context);\n  };\n  StartCelebrityRecognitionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartCelebrityRecognitionCommand(output, context);\n  };\n  return StartCelebrityRecognitionCommand;\n}($Command);\nexport { StartCelebrityRecognitionCommand };","map":{"version":3,"names":["StartCelebrityRecognitionRequest","StartCelebrityRecognitionResponse","deserializeAws_json1_1StartCelebrityRecognitionCommand","serializeAws_json1_1StartCelebrityRecognitionCommand","getSerdePlugin","Command","$Command","StartCelebrityRecognitionCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-sdk\\client-rekognition\\commands\\StartCelebrityRecognitionCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { StartCelebrityRecognitionRequest, StartCelebrityRecognitionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StartCelebrityRecognitionCommand,\n  serializeAws_json1_1StartCelebrityRecognitionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StartCelebrityRecognitionCommandInput = StartCelebrityRecognitionRequest;\nexport type StartCelebrityRecognitionCommandOutput = StartCelebrityRecognitionResponse & __MetadataBearer;\n\n/**\n * <p>Starts asynchronous recognition of celebrities in a stored video.</p>\n *          <p>Amazon Rekognition Video can detect celebrities in a video must be stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name\n *       and the filename of the video.\n *       <code>StartCelebrityRecognition</code>\n *       returns a job identifier (<code>JobId</code>) which you use to get the results of the analysis.\n *       When celebrity recognition analysis is finished, Amazon Rekognition Video publishes a completion status\n *       to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.\n *       To get the results of the celebrity recognition analysis, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <a>GetCelebrityRecognition</a> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartCelebrityRecognition</code>. </p>\n *\n *          <p>For more information, see Recognizing Celebrities in the Amazon Rekognition Developer Guide.</p>\n */\nexport class StartCelebrityRecognitionCommand extends $Command<\n  StartCelebrityRecognitionCommandInput,\n  StartCelebrityRecognitionCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StartCelebrityRecognitionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StartCelebrityRecognitionCommandInput, StartCelebrityRecognitionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"StartCelebrityRecognitionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StartCelebrityRecognitionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartCelebrityRecognitionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: StartCelebrityRecognitionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1StartCelebrityRecognitionCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<StartCelebrityRecognitionCommandOutput> {\n    return deserializeAws_json1_1StartCelebrityRecognitionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,gCAAgC,EAAEC,iCAAiC,QAAQ,oBAAoB;AACxG,SACEC,sDAAsD,EACtDC,oDAAoD,QAC/C,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;AAcA,IAAAC,gCAAA,0BAAAC,MAAA;EAAsDC,SAAA,CAAAF,gCAAA,EAAAC,MAAA;EAKpD;EACA;EAEA,SAAAD,iCAAqBG,KAA4C;IAAjE,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,gCAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,kCAAkC;IACtD,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,gCAAgC,CAAC6B,kBAAkB;MAC5EC,wBAAwB,EAAE7B,iCAAiC,CAAC4B;KAC7D;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,gCAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAA4C,EAAEyB,OAAuB;IACrF,OAAOhC,oDAAoD,CAACO,KAAK,EAAEyB,OAAO,CAAC;EAC7E,CAAC;EAEO5B,gCAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UACEe,MAAsB,EACtBD,OAAuB;IAEvB,OAAOjC,sDAAsD,CAACkC,MAAM,EAAED,OAAO,CAAC;EAChF,CAAC;EAIH,OAAA5B,gCAAC;AAAD,CAAC,CAzDqDD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}