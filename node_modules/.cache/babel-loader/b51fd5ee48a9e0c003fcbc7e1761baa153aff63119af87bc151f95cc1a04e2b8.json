{"ast":null,"code":"import { __values } from \"tslib\";\nimport { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nvar HeaderMarshaller = function () {\n  function HeaderMarshaller(toUtf8, fromUtf8) {\n    this.toUtf8 = toUtf8;\n    this.fromUtf8 = fromUtf8;\n  }\n  HeaderMarshaller.prototype.format = function (headers) {\n    var e_1, _a, e_2, _b;\n    var chunks = [];\n    try {\n      for (var _c = __values(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var headerName = _d.value;\n        var bytes = this.fromUtf8(headerName);\n        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var out = new Uint8Array(chunks.reduce(function (carry, bytes) {\n      return carry + bytes.byteLength;\n    }, 0));\n    var position = 0;\n    try {\n      for (var chunks_1 = __values(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {\n        var chunk = chunks_1_1.value;\n        out.set(chunk, position);\n        position += chunk.byteLength;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return out;\n  };\n  HeaderMarshaller.prototype.formatHeaderValue = function (header) {\n    switch (header.type) {\n      case \"boolean\":\n        return Uint8Array.from([header.value ? 0 : 1]);\n      case \"byte\":\n        return Uint8Array.from([2, header.value]);\n      case \"short\":\n        var shortView = new DataView(new ArrayBuffer(3));\n        shortView.setUint8(0, 3);\n        shortView.setInt16(1, header.value, false);\n        return new Uint8Array(shortView.buffer);\n      case \"integer\":\n        var intView = new DataView(new ArrayBuffer(5));\n        intView.setUint8(0, 4);\n        intView.setInt32(1, header.value, false);\n        return new Uint8Array(intView.buffer);\n      case \"long\":\n        var longBytes = new Uint8Array(9);\n        longBytes[0] = 5;\n        longBytes.set(header.value.bytes, 1);\n        return longBytes;\n      case \"binary\":\n        var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n        binView.setUint8(0, 6);\n        binView.setUint16(1, header.value.byteLength, false);\n        var binBytes = new Uint8Array(binView.buffer);\n        binBytes.set(header.value, 3);\n        return binBytes;\n      case \"string\":\n        var utf8Bytes = this.fromUtf8(header.value);\n        var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n        strView.setUint8(0, 7);\n        strView.setUint16(1, utf8Bytes.byteLength, false);\n        var strBytes = new Uint8Array(strView.buffer);\n        strBytes.set(utf8Bytes, 3);\n        return strBytes;\n      case \"timestamp\":\n        var tsBytes = new Uint8Array(9);\n        tsBytes[0] = 8;\n        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n        return tsBytes;\n      case \"uuid\":\n        if (!UUID_PATTERN.test(header.value)) {\n          throw new Error(\"Invalid UUID received: \".concat(header.value));\n        }\n        var uuidBytes = new Uint8Array(17);\n        uuidBytes[0] = 9;\n        uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n        return uuidBytes;\n    }\n  };\n  HeaderMarshaller.prototype.parse = function (headers) {\n    var out = {};\n    var position = 0;\n    while (position < headers.byteLength) {\n      var nameLength = headers.getUint8(position++);\n      var name_1 = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n      position += nameLength;\n      switch (headers.getUint8(position++)) {\n        case 0:\n          out[name_1] = {\n            type: BOOLEAN_TAG,\n            value: true\n          };\n          break;\n        case 1:\n          out[name_1] = {\n            type: BOOLEAN_TAG,\n            value: false\n          };\n          break;\n        case 2:\n          out[name_1] = {\n            type: BYTE_TAG,\n            value: headers.getInt8(position++)\n          };\n          break;\n        case 3:\n          out[name_1] = {\n            type: SHORT_TAG,\n            value: headers.getInt16(position, false)\n          };\n          position += 2;\n          break;\n        case 4:\n          out[name_1] = {\n            type: INT_TAG,\n            value: headers.getInt32(position, false)\n          };\n          position += 4;\n          break;\n        case 5:\n          out[name_1] = {\n            type: LONG_TAG,\n            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))\n          };\n          position += 8;\n          break;\n        case 6:\n          var binaryLength = headers.getUint16(position, false);\n          position += 2;\n          out[name_1] = {\n            type: BINARY_TAG,\n            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)\n          };\n          position += binaryLength;\n          break;\n        case 7:\n          var stringLength = headers.getUint16(position, false);\n          position += 2;\n          out[name_1] = {\n            type: STRING_TAG,\n            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))\n          };\n          position += stringLength;\n          break;\n        case 8:\n          out[name_1] = {\n            type: TIMESTAMP_TAG,\n            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())\n          };\n          position += 8;\n          break;\n        case 9:\n          var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n          position += 16;\n          out[name_1] = {\n            type: UUID_TAG,\n            value: \"\".concat(toHex(uuidBytes.subarray(0, 4)), \"-\").concat(toHex(uuidBytes.subarray(4, 6)), \"-\").concat(toHex(uuidBytes.subarray(6, 8)), \"-\").concat(toHex(uuidBytes.subarray(8, 10)), \"-\").concat(toHex(uuidBytes.subarray(10)))\n          };\n          break;\n        default:\n          throw new Error(\"Unrecognized header type tag\");\n      }\n    }\n    return out;\n  };\n  return HeaderMarshaller;\n}();\nexport { HeaderMarshaller };\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nvar BOOLEAN_TAG = \"boolean\";\nvar BYTE_TAG = \"byte\";\nvar SHORT_TAG = \"short\";\nvar INT_TAG = \"integer\";\nvar LONG_TAG = \"long\";\nvar BINARY_TAG = \"binary\";\nvar STRING_TAG = \"string\";\nvar TIMESTAMP_TAG = \"timestamp\";\nvar UUID_TAG = \"uuid\";\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;","map":{"version":3,"names":["__values","fromHex","toHex","Int64","HeaderMarshaller","toUtf8","fromUtf8","prototype","format","headers","e_1","_a","e_2","_b","chunks","_c","Object","keys","_d","next","done","headerName","value","bytes","push","Uint8Array","from","byteLength","formatHeaderValue","e_1_1","error","return","call","out","reduce","carry","position","chunks_1","chunks_1_1","chunk","set","e_2_1","header","type","shortView","DataView","ArrayBuffer","setUint8","setInt16","buffer","intView","setInt32","longBytes","binView","setUint16","binBytes","utf8Bytes","strView","strBytes","tsBytes","fromNumber","valueOf","UUID_PATTERN","test","Error","concat","uuidBytes","replace","parse","nameLength","getUint8","name_1","byteOffset","BOOLEAN_TAG","BYTE_TAG","getInt8","SHORT_TAG","getInt16","INT_TAG","getInt32","LONG_TAG","binaryLength","getUint16","BINARY_TAG","stringLength","STRING_TAG","TIMESTAMP_TAG","Date","UUID_TAG","subarray","HEADER_VALUE_TYPE"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js"],"sourcesContent":["import { __values } from \"tslib\";\nimport { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nvar HeaderMarshaller = (function () {\n    function HeaderMarshaller(toUtf8, fromUtf8) {\n        this.toUtf8 = toUtf8;\n        this.fromUtf8 = fromUtf8;\n    }\n    HeaderMarshaller.prototype.format = function (headers) {\n        var e_1, _a, e_2, _b;\n        var chunks = [];\n        try {\n            for (var _c = __values(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var headerName = _d.value;\n                var bytes = this.fromUtf8(headerName);\n                chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var out = new Uint8Array(chunks.reduce(function (carry, bytes) { return carry + bytes.byteLength; }, 0));\n        var position = 0;\n        try {\n            for (var chunks_1 = __values(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {\n                var chunk = chunks_1_1.value;\n                out.set(chunk, position);\n                position += chunk.byteLength;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return out;\n    };\n    HeaderMarshaller.prototype.formatHeaderValue = function (header) {\n        switch (header.type) {\n            case \"boolean\":\n                return Uint8Array.from([header.value ? 0 : 1]);\n            case \"byte\":\n                return Uint8Array.from([2, header.value]);\n            case \"short\":\n                var shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                var intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                var longBytes = new Uint8Array(9);\n                longBytes[0] = 5;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6);\n                binView.setUint16(1, header.value.byteLength, false);\n                var binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                var utf8Bytes = this.fromUtf8(header.value);\n                var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                var strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                var tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8;\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(\"Invalid UUID received: \".concat(header.value));\n                }\n                var uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9;\n                uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    };\n    HeaderMarshaller.prototype.parse = function (headers) {\n        var out = {};\n        var position = 0;\n        while (position < headers.byteLength) {\n            var nameLength = headers.getUint8(position++);\n            var name_1 = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n            position += nameLength;\n            switch (headers.getUint8(position++)) {\n                case 0:\n                    out[name_1] = {\n                        type: BOOLEAN_TAG,\n                        value: true,\n                    };\n                    break;\n                case 1:\n                    out[name_1] = {\n                        type: BOOLEAN_TAG,\n                        value: false,\n                    };\n                    break;\n                case 2:\n                    out[name_1] = {\n                        type: BYTE_TAG,\n                        value: headers.getInt8(position++),\n                    };\n                    break;\n                case 3:\n                    out[name_1] = {\n                        type: SHORT_TAG,\n                        value: headers.getInt16(position, false),\n                    };\n                    position += 2;\n                    break;\n                case 4:\n                    out[name_1] = {\n                        type: INT_TAG,\n                        value: headers.getInt32(position, false),\n                    };\n                    position += 4;\n                    break;\n                case 5:\n                    out[name_1] = {\n                        type: LONG_TAG,\n                        value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n                    };\n                    position += 8;\n                    break;\n                case 6:\n                    var binaryLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name_1] = {\n                        type: BINARY_TAG,\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n                    };\n                    position += binaryLength;\n                    break;\n                case 7:\n                    var stringLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name_1] = {\n                        type: STRING_TAG,\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n                    };\n                    position += stringLength;\n                    break;\n                case 8:\n                    out[name_1] = {\n                        type: TIMESTAMP_TAG,\n                        value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n                    };\n                    position += 8;\n                    break;\n                case 9:\n                    var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n                    position += 16;\n                    out[name_1] = {\n                        type: UUID_TAG,\n                        value: \"\".concat(toHex(uuidBytes.subarray(0, 4)), \"-\").concat(toHex(uuidBytes.subarray(4, 6)), \"-\").concat(toHex(uuidBytes.subarray(6, 8)), \"-\").concat(toHex(uuidBytes.subarray(8, 10)), \"-\").concat(toHex(uuidBytes.subarray(10))),\n                    };\n                    break;\n                default:\n                    throw new Error(\"Unrecognized header type tag\");\n            }\n        }\n        return out;\n    };\n    return HeaderMarshaller;\n}());\nexport { HeaderMarshaller };\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nvar BOOLEAN_TAG = \"boolean\";\nvar BYTE_TAG = \"byte\";\nvar SHORT_TAG = \"short\";\nvar INT_TAG = \"integer\";\nvar LONG_TAG = \"long\";\nvar BINARY_TAG = \"binary\";\nvar STRING_TAG = \"string\";\nvar TIMESTAMP_TAG = \"timestamp\";\nvar UUID_TAG = \"uuid\";\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}