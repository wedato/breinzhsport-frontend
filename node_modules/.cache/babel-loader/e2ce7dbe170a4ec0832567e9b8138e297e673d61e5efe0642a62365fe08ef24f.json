{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetSegmentDetectionRequest, GetSegmentDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetSegmentDetectionCommand, serializeAws_json1_1GetSegmentDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the segment detection results of a Amazon Rekognition Video analysis started by <a>StartSegmentDetection</a>.</p>\n *          <p>Segment detection with Amazon Rekognition Video is an asynchronous operation. You start segment detection by\n *       calling <a>StartSegmentDetection</a> which returns a job identifier (<code>JobId</code>).\n *       When the segment detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartSegmentDetection</code>. To get the results\n *       of the segment detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *       if so, call <code>GetSegmentDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *       of <code>StartSegmentDetection</code>.</p>\n *          <p>\n *             <code>GetSegmentDetection</code> returns detected segments in an array (<code>Segments</code>)\n *       of <a>SegmentDetection</a> objects. <code>Segments</code> is sorted by the segment types\n *       specified in the <code>SegmentTypes</code> input parameter of <code>StartSegmentDetection</code>.\n *     Each element of the array includes the detected segment, the precentage confidence in the acuracy\n *       of the detected segment, the type of the segment, and the frame in which the segment was detected.</p>\n *          <p>Use <code>SelectedSegmentTypes</code> to find out the type of segment detection requested in the\n *     call to <code>StartSegmentDetection</code>.</p>\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of segment detections returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *       a pagination token for getting the next set of results. To get the next page of results, call <code>GetSegmentDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *       call to <code>GetSegmentDetection</code>.</p>\n *\n *          <p>For more information, see Detecting Video Segments in Stored Video in the Amazon Rekognition Developer Guide.</p>\n */\nvar GetSegmentDetectionCommand = /** @class */function (_super) {\n  __extends(GetSegmentDetectionCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function GetSegmentDetectionCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  GetSegmentDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetSegmentDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetSegmentDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetSegmentDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  GetSegmentDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetSegmentDetectionCommand(input, context);\n  };\n  GetSegmentDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetSegmentDetectionCommand(output, context);\n  };\n  return GetSegmentDetectionCommand;\n}($Command);\nexport { GetSegmentDetectionCommand };","map":{"version":3,"names":["GetSegmentDetectionRequest","GetSegmentDetectionResponse","deserializeAws_json1_1GetSegmentDetectionCommand","serializeAws_json1_1GetSegmentDetectionCommand","getSerdePlugin","Command","$Command","GetSegmentDetectionCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-sdk\\client-rekognition\\commands\\GetSegmentDetectionCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { GetSegmentDetectionRequest, GetSegmentDetectionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetSegmentDetectionCommand,\n  serializeAws_json1_1GetSegmentDetectionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetSegmentDetectionCommandInput = GetSegmentDetectionRequest;\nexport type GetSegmentDetectionCommandOutput = GetSegmentDetectionResponse & __MetadataBearer;\n\n/**\n * <p>Gets the segment detection results of a Amazon Rekognition Video analysis started by <a>StartSegmentDetection</a>.</p>\n *          <p>Segment detection with Amazon Rekognition Video is an asynchronous operation. You start segment detection by\n *       calling <a>StartSegmentDetection</a> which returns a job identifier (<code>JobId</code>).\n *       When the segment detection operation finishes, Amazon Rekognition publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartSegmentDetection</code>. To get the results\n *       of the segment detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *       if so, call <code>GetSegmentDetection</code> and pass the job identifier (<code>JobId</code>) from the initial call\n *       of <code>StartSegmentDetection</code>.</p>\n *          <p>\n *             <code>GetSegmentDetection</code> returns detected segments in an array (<code>Segments</code>)\n *       of <a>SegmentDetection</a> objects. <code>Segments</code> is sorted by the segment types\n *       specified in the <code>SegmentTypes</code> input parameter of <code>StartSegmentDetection</code>.\n *     Each element of the array includes the detected segment, the precentage confidence in the acuracy\n *       of the detected segment, the type of the segment, and the frame in which the segment was detected.</p>\n *          <p>Use <code>SelectedSegmentTypes</code> to find out the type of segment detection requested in the\n *     call to <code>StartSegmentDetection</code>.</p>\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of segment detections returned. If there are more results than\n *       specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains\n *       a pagination token for getting the next set of results. To get the next page of results, call <code>GetSegmentDetection</code>\n *       and populate the <code>NextToken</code> request parameter with the token value returned from the previous\n *       call to <code>GetSegmentDetection</code>.</p>\n *\n *          <p>For more information, see Detecting Video Segments in Stored Video in the Amazon Rekognition Developer Guide.</p>\n */\nexport class GetSegmentDetectionCommand extends $Command<\n  GetSegmentDetectionCommandInput,\n  GetSegmentDetectionCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetSegmentDetectionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetSegmentDetectionCommandInput, GetSegmentDetectionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"GetSegmentDetectionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetSegmentDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetSegmentDetectionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetSegmentDetectionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetSegmentDetectionCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetSegmentDetectionCommandOutput> {\n    return deserializeAws_json1_1GetSegmentDetectionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AACA,SAASA,0BAA0B,EAAEC,2BAA2B,QAAQ,oBAAoB;AAC5F,SACEC,gDAAgD,EAChDC,8CAA8C,QACzC,0BAA0B;AACjC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAAC,0BAAA,0BAAAC,MAAA;EAAgDC,SAAA,CAAAF,0BAAA,EAAAC,MAAA;EAK9C;EACA;EAEA,SAAAD,2BAAqBG,KAAsC;IAA3D,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,0BAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAA8C,EAC9CC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,mBAAmB;IACtC,IAAMC,WAAW,GAAG,4BAA4B;IAChD,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,0BAA0B,CAAC6B,kBAAkB;MACtEC,wBAAwB,EAAE7B,2BAA2B,CAAC4B;KACvD;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,0BAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAAsC,EAAEyB,OAAuB;IAC/E,OAAOhC,8CAA8C,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACvE,CAAC;EAEO5B,0BAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,gDAAgD,CAACkC,MAAM,EAAED,OAAO,CAAC;EAC1E,CAAC;EAIH,OAAA5B,0BAAC;AAAD,CAAC,CAtD+CD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}