{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { TranslateClient } from \"./TranslateClient\";\nimport { CreateParallelDataCommand } from \"./commands/CreateParallelDataCommand\";\nimport { DeleteParallelDataCommand } from \"./commands/DeleteParallelDataCommand\";\nimport { DeleteTerminologyCommand } from \"./commands/DeleteTerminologyCommand\";\nimport { DescribeTextTranslationJobCommand } from \"./commands/DescribeTextTranslationJobCommand\";\nimport { GetParallelDataCommand } from \"./commands/GetParallelDataCommand\";\nimport { GetTerminologyCommand } from \"./commands/GetTerminologyCommand\";\nimport { ImportTerminologyCommand } from \"./commands/ImportTerminologyCommand\";\nimport { ListParallelDataCommand } from \"./commands/ListParallelDataCommand\";\nimport { ListTerminologiesCommand } from \"./commands/ListTerminologiesCommand\";\nimport { ListTextTranslationJobsCommand } from \"./commands/ListTextTranslationJobsCommand\";\nimport { StartTextTranslationJobCommand } from \"./commands/StartTextTranslationJobCommand\";\nimport { StopTextTranslationJobCommand } from \"./commands/StopTextTranslationJobCommand\";\nimport { TranslateTextCommand } from \"./commands/TranslateTextCommand\";\nimport { UpdateParallelDataCommand } from \"./commands/UpdateParallelDataCommand\";\n/**\n * <p>Provides translation between one source language and another of the same set of\n *       languages.</p>\n */\nvar Translate = /** @class */function (_super) {\n  __extends(Translate, _super);\n  function Translate() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Translate.prototype.createParallelData = function (args, optionsOrCb, cb) {\n    var command = new CreateParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.deleteParallelData = function (args, optionsOrCb, cb) {\n    var command = new DeleteParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.deleteTerminology = function (args, optionsOrCb, cb) {\n    var command = new DeleteTerminologyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.describeTextTranslationJob = function (args, optionsOrCb, cb) {\n    var command = new DescribeTextTranslationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.getParallelData = function (args, optionsOrCb, cb) {\n    var command = new GetParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.getTerminology = function (args, optionsOrCb, cb) {\n    var command = new GetTerminologyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.importTerminology = function (args, optionsOrCb, cb) {\n    var command = new ImportTerminologyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.listParallelData = function (args, optionsOrCb, cb) {\n    var command = new ListParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.listTerminologies = function (args, optionsOrCb, cb) {\n    var command = new ListTerminologiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.listTextTranslationJobs = function (args, optionsOrCb, cb) {\n    var command = new ListTextTranslationJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.startTextTranslationJob = function (args, optionsOrCb, cb) {\n    var command = new StartTextTranslationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.stopTextTranslationJob = function (args, optionsOrCb, cb) {\n    var command = new StopTextTranslationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.translateText = function (args, optionsOrCb, cb) {\n    var command = new TranslateTextCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  Translate.prototype.updateParallelData = function (args, optionsOrCb, cb) {\n    var command = new UpdateParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  return Translate;\n}(TranslateClient);\nexport { Translate };","map":{"version":3,"names":["TranslateClient","CreateParallelDataCommand","DeleteParallelDataCommand","DeleteTerminologyCommand","DescribeTextTranslationJobCommand","GetParallelDataCommand","GetTerminologyCommand","ImportTerminologyCommand","ListParallelDataCommand","ListTerminologiesCommand","ListTextTranslationJobsCommand","StartTextTranslationJobCommand","StopTextTranslationJobCommand","TranslateTextCommand","UpdateParallelDataCommand","Translate","_super","__extends","prototype","createParallelData","args","optionsOrCb","cb","command","send","Error","deleteParallelData","deleteTerminology","describeTextTranslationJob","getParallelData","getTerminology","importTerminology","listParallelData","listTerminologies","listTextTranslationJobs","startTextTranslationJob","stopTextTranslationJob","translateText","updateParallelData"],"sources":["C:\\Users\\jonat\\aws_poc\\frontend\\node_modules\\@aws-sdk\\client-translate\\Translate.ts"],"sourcesContent":["import { TranslateClient } from \"./TranslateClient\";\nimport {\n  CreateParallelDataCommand,\n  CreateParallelDataCommandInput,\n  CreateParallelDataCommandOutput,\n} from \"./commands/CreateParallelDataCommand\";\nimport {\n  DeleteParallelDataCommand,\n  DeleteParallelDataCommandInput,\n  DeleteParallelDataCommandOutput,\n} from \"./commands/DeleteParallelDataCommand\";\nimport {\n  DeleteTerminologyCommand,\n  DeleteTerminologyCommandInput,\n  DeleteTerminologyCommandOutput,\n} from \"./commands/DeleteTerminologyCommand\";\nimport {\n  DescribeTextTranslationJobCommand,\n  DescribeTextTranslationJobCommandInput,\n  DescribeTextTranslationJobCommandOutput,\n} from \"./commands/DescribeTextTranslationJobCommand\";\nimport {\n  GetParallelDataCommand,\n  GetParallelDataCommandInput,\n  GetParallelDataCommandOutput,\n} from \"./commands/GetParallelDataCommand\";\nimport {\n  GetTerminologyCommand,\n  GetTerminologyCommandInput,\n  GetTerminologyCommandOutput,\n} from \"./commands/GetTerminologyCommand\";\nimport {\n  ImportTerminologyCommand,\n  ImportTerminologyCommandInput,\n  ImportTerminologyCommandOutput,\n} from \"./commands/ImportTerminologyCommand\";\nimport {\n  ListParallelDataCommand,\n  ListParallelDataCommandInput,\n  ListParallelDataCommandOutput,\n} from \"./commands/ListParallelDataCommand\";\nimport {\n  ListTerminologiesCommand,\n  ListTerminologiesCommandInput,\n  ListTerminologiesCommandOutput,\n} from \"./commands/ListTerminologiesCommand\";\nimport {\n  ListTextTranslationJobsCommand,\n  ListTextTranslationJobsCommandInput,\n  ListTextTranslationJobsCommandOutput,\n} from \"./commands/ListTextTranslationJobsCommand\";\nimport {\n  StartTextTranslationJobCommand,\n  StartTextTranslationJobCommandInput,\n  StartTextTranslationJobCommandOutput,\n} from \"./commands/StartTextTranslationJobCommand\";\nimport {\n  StopTextTranslationJobCommand,\n  StopTextTranslationJobCommandInput,\n  StopTextTranslationJobCommandOutput,\n} from \"./commands/StopTextTranslationJobCommand\";\nimport {\n  TranslateTextCommand,\n  TranslateTextCommandInput,\n  TranslateTextCommandOutput,\n} from \"./commands/TranslateTextCommand\";\nimport {\n  UpdateParallelDataCommand,\n  UpdateParallelDataCommandInput,\n  UpdateParallelDataCommandOutput,\n} from \"./commands/UpdateParallelDataCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p>Provides translation between one source language and another of the same set of\n *       languages.</p>\n */\nexport class Translate extends TranslateClient {\n  /**\n   * <p>Creates a parallel data resource in Amazon Translate by importing an input file from\n   *       Amazon S3. Parallel data files contain examples of source phrases and their translations from\n   *       your translation memory. By adding parallel data, you can influence the style, tone, and word\n   *       choice in your translation output.</p>\n   */\n  public createParallelData(\n    args: CreateParallelDataCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateParallelDataCommandOutput>;\n  public createParallelData(\n    args: CreateParallelDataCommandInput,\n    cb: (err: any, data?: CreateParallelDataCommandOutput) => void\n  ): void;\n  public createParallelData(\n    args: CreateParallelDataCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateParallelDataCommandOutput) => void\n  ): void;\n  public createParallelData(\n    args: CreateParallelDataCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateParallelDataCommandOutput) => void),\n    cb?: (err: any, data?: CreateParallelDataCommandOutput) => void\n  ): Promise<CreateParallelDataCommandOutput> | void {\n    const command = new CreateParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes a parallel data resource in Amazon Translate.</p>\n   */\n  public deleteParallelData(\n    args: DeleteParallelDataCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteParallelDataCommandOutput>;\n  public deleteParallelData(\n    args: DeleteParallelDataCommandInput,\n    cb: (err: any, data?: DeleteParallelDataCommandOutput) => void\n  ): void;\n  public deleteParallelData(\n    args: DeleteParallelDataCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteParallelDataCommandOutput) => void\n  ): void;\n  public deleteParallelData(\n    args: DeleteParallelDataCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteParallelDataCommandOutput) => void),\n    cb?: (err: any, data?: DeleteParallelDataCommandOutput) => void\n  ): Promise<DeleteParallelDataCommandOutput> | void {\n    const command = new DeleteParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>A synchronous action that deletes a custom terminology.</p>\n   */\n  public deleteTerminology(\n    args: DeleteTerminologyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteTerminologyCommandOutput>;\n  public deleteTerminology(\n    args: DeleteTerminologyCommandInput,\n    cb: (err: any, data?: DeleteTerminologyCommandOutput) => void\n  ): void;\n  public deleteTerminology(\n    args: DeleteTerminologyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteTerminologyCommandOutput) => void\n  ): void;\n  public deleteTerminology(\n    args: DeleteTerminologyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteTerminologyCommandOutput) => void),\n    cb?: (err: any, data?: DeleteTerminologyCommandOutput) => void\n  ): Promise<DeleteTerminologyCommandOutput> | void {\n    const command = new DeleteTerminologyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the properties associated with an asycnhronous batch translation job including name,\n   *       ID, status, source and target languages, input/output S3 buckets, and so on.</p>\n   */\n  public describeTextTranslationJob(\n    args: DescribeTextTranslationJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeTextTranslationJobCommandOutput>;\n  public describeTextTranslationJob(\n    args: DescribeTextTranslationJobCommandInput,\n    cb: (err: any, data?: DescribeTextTranslationJobCommandOutput) => void\n  ): void;\n  public describeTextTranslationJob(\n    args: DescribeTextTranslationJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeTextTranslationJobCommandOutput) => void\n  ): void;\n  public describeTextTranslationJob(\n    args: DescribeTextTranslationJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeTextTranslationJobCommandOutput) => void),\n    cb?: (err: any, data?: DescribeTextTranslationJobCommandOutput) => void\n  ): Promise<DescribeTextTranslationJobCommandOutput> | void {\n    const command = new DescribeTextTranslationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Provides information about a parallel data resource.</p>\n   */\n  public getParallelData(\n    args: GetParallelDataCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetParallelDataCommandOutput>;\n  public getParallelData(\n    args: GetParallelDataCommandInput,\n    cb: (err: any, data?: GetParallelDataCommandOutput) => void\n  ): void;\n  public getParallelData(\n    args: GetParallelDataCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetParallelDataCommandOutput) => void\n  ): void;\n  public getParallelData(\n    args: GetParallelDataCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetParallelDataCommandOutput) => void),\n    cb?: (err: any, data?: GetParallelDataCommandOutput) => void\n  ): Promise<GetParallelDataCommandOutput> | void {\n    const command = new GetParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Retrieves a custom terminology.</p>\n   */\n  public getTerminology(\n    args: GetTerminologyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetTerminologyCommandOutput>;\n  public getTerminology(\n    args: GetTerminologyCommandInput,\n    cb: (err: any, data?: GetTerminologyCommandOutput) => void\n  ): void;\n  public getTerminology(\n    args: GetTerminologyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetTerminologyCommandOutput) => void\n  ): void;\n  public getTerminology(\n    args: GetTerminologyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetTerminologyCommandOutput) => void),\n    cb?: (err: any, data?: GetTerminologyCommandOutput) => void\n  ): Promise<GetTerminologyCommandOutput> | void {\n    const command = new GetTerminologyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates or updates a custom terminology, depending on whether or not one already exists\n   *       for the given terminology name. Importing a terminology with the same name as an existing one\n   *       will merge the terminologies based on the chosen merge strategy. Currently, the only supported\n   *       merge strategy is OVERWRITE, and so the imported terminology will overwrite an existing\n   *       terminology of the same name.</p>\n   *          <p>If you import a terminology that overwrites an existing one, the new terminology take up\n   *       to 10 minutes to fully propagate and be available for use in a translation due to cache\n   *       policies with the DataPlane service that performs the translations.</p>\n   */\n  public importTerminology(\n    args: ImportTerminologyCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ImportTerminologyCommandOutput>;\n  public importTerminology(\n    args: ImportTerminologyCommandInput,\n    cb: (err: any, data?: ImportTerminologyCommandOutput) => void\n  ): void;\n  public importTerminology(\n    args: ImportTerminologyCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ImportTerminologyCommandOutput) => void\n  ): void;\n  public importTerminology(\n    args: ImportTerminologyCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ImportTerminologyCommandOutput) => void),\n    cb?: (err: any, data?: ImportTerminologyCommandOutput) => void\n  ): Promise<ImportTerminologyCommandOutput> | void {\n    const command = new ImportTerminologyCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Provides a list of your parallel data resources in Amazon Translate.</p>\n   */\n  public listParallelData(\n    args: ListParallelDataCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListParallelDataCommandOutput>;\n  public listParallelData(\n    args: ListParallelDataCommandInput,\n    cb: (err: any, data?: ListParallelDataCommandOutput) => void\n  ): void;\n  public listParallelData(\n    args: ListParallelDataCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListParallelDataCommandOutput) => void\n  ): void;\n  public listParallelData(\n    args: ListParallelDataCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListParallelDataCommandOutput) => void),\n    cb?: (err: any, data?: ListParallelDataCommandOutput) => void\n  ): Promise<ListParallelDataCommandOutput> | void {\n    const command = new ListParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Provides a list of custom terminologies associated with your account.</p>\n   */\n  public listTerminologies(\n    args: ListTerminologiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListTerminologiesCommandOutput>;\n  public listTerminologies(\n    args: ListTerminologiesCommandInput,\n    cb: (err: any, data?: ListTerminologiesCommandOutput) => void\n  ): void;\n  public listTerminologies(\n    args: ListTerminologiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListTerminologiesCommandOutput) => void\n  ): void;\n  public listTerminologies(\n    args: ListTerminologiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListTerminologiesCommandOutput) => void),\n    cb?: (err: any, data?: ListTerminologiesCommandOutput) => void\n  ): Promise<ListTerminologiesCommandOutput> | void {\n    const command = new ListTerminologiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets a list of the batch translation jobs that you have submitted.</p>\n   */\n  public listTextTranslationJobs(\n    args: ListTextTranslationJobsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListTextTranslationJobsCommandOutput>;\n  public listTextTranslationJobs(\n    args: ListTextTranslationJobsCommandInput,\n    cb: (err: any, data?: ListTextTranslationJobsCommandOutput) => void\n  ): void;\n  public listTextTranslationJobs(\n    args: ListTextTranslationJobsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListTextTranslationJobsCommandOutput) => void\n  ): void;\n  public listTextTranslationJobs(\n    args: ListTextTranslationJobsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListTextTranslationJobsCommandOutput) => void),\n    cb?: (err: any, data?: ListTextTranslationJobsCommandOutput) => void\n  ): Promise<ListTextTranslationJobsCommandOutput> | void {\n    const command = new ListTextTranslationJobsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Starts an asynchronous batch translation job. Batch translation jobs can be used to\n   *       translate large volumes of text across multiple documents at once. For more information, see\n   *         <a>async</a>.</p>\n   *\n   *          <p>Batch translation jobs can be described with the <a>DescribeTextTranslationJob</a> operation, listed with the <a>ListTextTranslationJobs</a> operation, and stopped with the <a>StopTextTranslationJob</a> operation.</p>\n   *          <note>\n   *             <p>Amazon Translate does not support batch translation of multiple source languages at once.</p>\n   *          </note>\n   */\n  public startTextTranslationJob(\n    args: StartTextTranslationJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StartTextTranslationJobCommandOutput>;\n  public startTextTranslationJob(\n    args: StartTextTranslationJobCommandInput,\n    cb: (err: any, data?: StartTextTranslationJobCommandOutput) => void\n  ): void;\n  public startTextTranslationJob(\n    args: StartTextTranslationJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StartTextTranslationJobCommandOutput) => void\n  ): void;\n  public startTextTranslationJob(\n    args: StartTextTranslationJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StartTextTranslationJobCommandOutput) => void),\n    cb?: (err: any, data?: StartTextTranslationJobCommandOutput) => void\n  ): Promise<StartTextTranslationJobCommandOutput> | void {\n    const command = new StartTextTranslationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Stops an asynchronous batch translation job that is in progress.</p>\n   *          <p>If the job's state is <code>IN_PROGRESS</code>, the job will be marked for termination and\n   *       put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped,\n   *       it is put into the <code>COMPLETED</code> state. Otherwise, the job is put into the\n   *         <code>STOPPED</code> state.</p>\n   *          <p>Asynchronous batch translation jobs are started with the <a>StartTextTranslationJob</a> operation. You can use the <a>DescribeTextTranslationJob</a> or <a>ListTextTranslationJobs</a>\n   *       operations to get a batch translation job's <code>JobId</code>.</p>\n   */\n  public stopTextTranslationJob(\n    args: StopTextTranslationJobCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<StopTextTranslationJobCommandOutput>;\n  public stopTextTranslationJob(\n    args: StopTextTranslationJobCommandInput,\n    cb: (err: any, data?: StopTextTranslationJobCommandOutput) => void\n  ): void;\n  public stopTextTranslationJob(\n    args: StopTextTranslationJobCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: StopTextTranslationJobCommandOutput) => void\n  ): void;\n  public stopTextTranslationJob(\n    args: StopTextTranslationJobCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: StopTextTranslationJobCommandOutput) => void),\n    cb?: (err: any, data?: StopTextTranslationJobCommandOutput) => void\n  ): Promise<StopTextTranslationJobCommandOutput> | void {\n    const command = new StopTextTranslationJobCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Translates input text from the source language to the target language. For a list of\n   *       available languages and language codes, see <a>what-is-languages</a>.</p>\n   */\n  public translateText(\n    args: TranslateTextCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<TranslateTextCommandOutput>;\n  public translateText(\n    args: TranslateTextCommandInput,\n    cb: (err: any, data?: TranslateTextCommandOutput) => void\n  ): void;\n  public translateText(\n    args: TranslateTextCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: TranslateTextCommandOutput) => void\n  ): void;\n  public translateText(\n    args: TranslateTextCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: TranslateTextCommandOutput) => void),\n    cb?: (err: any, data?: TranslateTextCommandOutput) => void\n  ): Promise<TranslateTextCommandOutput> | void {\n    const command = new TranslateTextCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Updates a previously created parallel data resource by importing a new input file from\n   *       Amazon S3.</p>\n   */\n  public updateParallelData(\n    args: UpdateParallelDataCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UpdateParallelDataCommandOutput>;\n  public updateParallelData(\n    args: UpdateParallelDataCommandInput,\n    cb: (err: any, data?: UpdateParallelDataCommandOutput) => void\n  ): void;\n  public updateParallelData(\n    args: UpdateParallelDataCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UpdateParallelDataCommandOutput) => void\n  ): void;\n  public updateParallelData(\n    args: UpdateParallelDataCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UpdateParallelDataCommandOutput) => void),\n    cb?: (err: any, data?: UpdateParallelDataCommandOutput) => void\n  ): Promise<UpdateParallelDataCommandOutput> | void {\n    const command = new UpdateParallelDataCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}