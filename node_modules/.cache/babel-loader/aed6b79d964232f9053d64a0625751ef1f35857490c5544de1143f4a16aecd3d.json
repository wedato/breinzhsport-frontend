{"ast":null,"code":"\"use strict\";\n\n/**\n * @module context_utils\n */\nvar cls = require('cls-hooked/context');\nvar logger = require('./logger');\nvar Segment = require('./segments/segment');\nvar Subsegment = require('./segments/attributes/subsegment');\nvar cls_mode = true;\nvar NAMESPACE = 'AWSXRay';\nvar SEGMENT = 'segment';\nvar contextOverride = false;\nvar contextUtils = {\n  CONTEXT_MISSING_STRATEGY: {\n    RUNTIME_ERROR: {\n      contextMissing: function contextMissingRuntimeError(message) {\n        throw new Error(message);\n      }\n    },\n    LOG_ERROR: {\n      contextMissing: function contextMissingLogError(message) {\n        var err = new Error(message);\n        logger.getLogger().error(err.stack);\n      }\n    },\n    IGNORE_ERROR: {\n      contextMissing: function contextMissingIgnoreError() {}\n    }\n  },\n  contextMissingStrategy: {},\n  /**\n   * Resolves the segment or subsegment given manual mode and params on the call required.\n   * @param [Segment|Subsegment] segment - The segment manually provided via params.XraySegment, if provided.\n   * @returns {Segment|Subsegment}\n   * @alias module:context_utils.resolveManualSegmentParams\n   */\n  resolveManualSegmentParams: function resolveManualSegmentParams(params) {\n    if (params && !contextUtils.isAutomaticMode()) {\n      var xraySegment = params.XRaySegment || params.XraySegment;\n      var segment = params.Segment;\n      var found = null;\n      if (xraySegment && (xraySegment instanceof Segment || xraySegment instanceof Subsegment)) {\n        found = xraySegment;\n        delete params.XRaySegment;\n        delete params.XraySegment;\n      } else if (segment && (segment instanceof Segment || segment instanceof Subsegment)) {\n        found = segment;\n        delete params.Segment;\n      }\n      return found;\n    }\n  },\n  /**\n   * Gets current CLS namespace for X-Ray SDK or creates one if absent.\n   * @returns {Namespace}\n   * @alias module:context_utils.getNamespace\n   */\n  getNamespace: function getNamespace() {\n    return cls.getNamespace(NAMESPACE) || cls.createNamespace(NAMESPACE);\n  },\n  /**\n   * Resolves the segment or subsegment given manual or automatic mode.\n   * @param [Segment|Subsegment] segment - The segment manually provided, if provided.\n   * @returns {Segment|Subsegment}\n   * @alias module:context_utils.resolveSegment\n   */\n  resolveSegment: function resolveSegment(segment) {\n    if (cls_mode) {\n      return this.getSegment();\n    } else if (segment && !cls_mode) {\n      return segment;\n    } else if (!segment && !cls_mode) {\n      contextUtils.contextMissingStrategy.contextMissing('No sub/segment specified. A sub/segment must be provided for manual mode.');\n    }\n  },\n  /**\n   * Returns the current segment or subsegment.  For use with in automatic mode only.\n   * @returns {Segment|Subsegment}\n   * @alias module:context_utils.getSegment\n   */\n  getSegment: function getSegment() {\n    if (cls_mode) {\n      var segment = contextUtils.getNamespace(NAMESPACE).get(SEGMENT);\n      if (!segment) {\n        contextUtils.contextMissingStrategy.contextMissing('Failed to get the current sub/segment from the context.');\n      } else if (segment instanceof Segment && process.env.LAMBDA_TASK_ROOT && segment.facade == true) {\n        segment.resolveLambdaTraceData();\n      }\n      return segment;\n    } else {\n      contextUtils.contextMissingStrategy.contextMissing('Cannot get sub/segment from context. Not supported in manual mode.');\n    }\n  },\n  /**\n   * Sets the current segment or subsegment.  For use with in automatic mode only.\n   * @param [Segment|Subsegment] segment - The sub/segment to set.\n   * @returns {Segment|Subsegment}\n   * @alias module:context_utils.setSegment\n   */\n  setSegment: function setSegment(segment) {\n    if (cls_mode) {\n      if (!contextUtils.getNamespace(NAMESPACE).set(SEGMENT, segment)) {\n        logger.getLogger().warn('Failed to set the current sub/segment on the context.');\n      }\n    } else {\n      contextUtils.contextMissingStrategy.contextMissing('Cannot set sub/segment on context. Not supported in manual mode.');\n    }\n  },\n  /**\n   * Returns true if in automatic mode, otherwise false.\n   * @returns {Segment|Subsegment}\n   * @alias module:context_utils.isAutomaticMode\n   */\n  isAutomaticMode: function isAutomaticMode() {\n    return cls_mode;\n  },\n  /**\n   * Enables automatic mode. Automatic mode uses 'cls-hooked'.\n   * @see https://github.com/jeff-lewis/cls-hooked\n   * @alias module:context_utils.enableAutomaticMode\n   */\n  enableAutomaticMode: function enableAutomaticMode() {\n    cls_mode = true;\n    contextUtils.getNamespace(NAMESPACE);\n    logger.getLogger().debug('Overriding AWS X-Ray SDK mode. Set to automatic mode.');\n  },\n  /**\n   * Disables automatic mode. Current segment or subsegment then must be passed manually\n   * via the parent optional on captureFunc, captureAsyncFunc etc.\n   * @alias module:context_utils.enableManualMode\n   */\n  enableManualMode: function enableManualMode() {\n    cls_mode = false;\n    if (cls.getNamespace(NAMESPACE)) {\n      cls.destroyNamespace(NAMESPACE);\n    }\n    logger.getLogger().debug('Overriding AWS X-Ray SDK mode. Set to manual mode.');\n  },\n  /**\n   * Sets the context missing strategy if no context missing strategy is set using the environment variable with\n   * key AWS_XRAY_CONTEXT_MISSING. The context missing strategy's contextMissing function will be called whenever\n   * trace context is not found.\n   * @param {string|function} strategy - The strategy to set. Valid string values are 'LOG_ERROR' and 'RUNTIME_ERROR'.\n   *                                     Alternatively, a custom function can be supplied, which takes a error message string.\n   */\n  setContextMissingStrategy: function setContextMissingStrategy(strategy) {\n    if (!contextOverride) {\n      if (typeof strategy === 'string') {\n        var lookupStrategy = contextUtils.CONTEXT_MISSING_STRATEGY[strategy.toUpperCase()];\n        if (lookupStrategy) {\n          contextUtils.contextMissingStrategy.contextMissing = lookupStrategy.contextMissing;\n          if (process.env.AWS_XRAY_CONTEXT_MISSING) {\n            logger.getLogger().debug('AWS_XRAY_CONTEXT_MISSING is set. Configured context missing strategy to ' + process.env.AWS_XRAY_CONTEXT_MISSING + '.');\n          } else {\n            logger.getLogger().debug('Configured context missing strategy to: ' + strategy);\n          }\n        } else {\n          throw new Error('Invalid context missing strategy: ' + strategy + '. Valid values are ' + Object.keys(contextUtils.CONTEXT_MISSING_STRATEGY) + '.');\n        }\n      } else if (typeof strategy === 'function') {\n        contextUtils.contextMissingStrategy.contextMissing = strategy;\n        logger.getLogger().info('Configured custom context missing strategy to function: ' + strategy.name);\n      } else {\n        throw new Error('Context missing strategy must be either a string or a custom function.');\n      }\n    } else {\n      logger.getLogger().warn('Ignoring call to setContextMissingStrategy as AWS_XRAY_CONTEXT_MISSING is set. ' + 'The current context missing strategy will not be changed.');\n    }\n  }\n};\nif (process.env.AWS_XRAY_MANUAL_MODE) {\n  cls_mode = false;\n  logger.getLogger().debug('Starting the AWS X-Ray SDK in manual mode.');\n} else {\n  cls.createNamespace(NAMESPACE);\n  logger.getLogger().debug('Starting the AWS X-Ray SDK in automatic mode (default).');\n}\nif (process.env.AWS_XRAY_CONTEXT_MISSING) {\n  contextUtils.setContextMissingStrategy(process.env.AWS_XRAY_CONTEXT_MISSING);\n  contextOverride = true;\n} else {\n  contextUtils.contextMissingStrategy.contextMissing = contextUtils.CONTEXT_MISSING_STRATEGY.LOG_ERROR.contextMissing;\n  logger.getLogger().debug('Using default context missing strategy: LOG_ERROR');\n}\nmodule.exports = contextUtils;","map":{"version":3,"names":["cls","require","logger","Segment","Subsegment","cls_mode","NAMESPACE","SEGMENT","contextOverride","contextUtils","CONTEXT_MISSING_STRATEGY","RUNTIME_ERROR","contextMissing","contextMissingRuntimeError","message","Error","LOG_ERROR","contextMissingLogError","err","getLogger","error","stack","IGNORE_ERROR","contextMissingIgnoreError","contextMissingStrategy","resolveManualSegmentParams","params","isAutomaticMode","xraySegment","XRaySegment","XraySegment","segment","found","getNamespace","createNamespace","resolveSegment","getSegment","get","process","env","LAMBDA_TASK_ROOT","facade","resolveLambdaTraceData","setSegment","set","warn","enableAutomaticMode","debug","enableManualMode","destroyNamespace","setContextMissingStrategy","strategy","lookupStrategy","toUpperCase","AWS_XRAY_CONTEXT_MISSING","Object","keys","info","name","AWS_XRAY_MANUAL_MODE","module","exports"],"sources":["C:/Users/jonat/aws_poc/frontend/node_modules/aws-xray-sdk-core/dist/lib/context_utils.js"],"sourcesContent":["\"use strict\";\n/**\n * @module context_utils\n */\nvar cls = require('cls-hooked/context');\nvar logger = require('./logger');\nvar Segment = require('./segments/segment');\nvar Subsegment = require('./segments/attributes/subsegment');\nvar cls_mode = true;\nvar NAMESPACE = 'AWSXRay';\nvar SEGMENT = 'segment';\nvar contextOverride = false;\nvar contextUtils = {\n    CONTEXT_MISSING_STRATEGY: {\n        RUNTIME_ERROR: {\n            contextMissing: function contextMissingRuntimeError(message) {\n                throw new Error(message);\n            }\n        },\n        LOG_ERROR: {\n            contextMissing: function contextMissingLogError(message) {\n                var err = new Error(message);\n                logger.getLogger().error(err.stack);\n            }\n        },\n        IGNORE_ERROR: {\n            contextMissing: function contextMissingIgnoreError() {\n            }\n        }\n    },\n    contextMissingStrategy: {},\n    /**\n     * Resolves the segment or subsegment given manual mode and params on the call required.\n     * @param [Segment|Subsegment] segment - The segment manually provided via params.XraySegment, if provided.\n     * @returns {Segment|Subsegment}\n     * @alias module:context_utils.resolveManualSegmentParams\n     */\n    resolveManualSegmentParams: function resolveManualSegmentParams(params) {\n        if (params && !contextUtils.isAutomaticMode()) {\n            var xraySegment = params.XRaySegment || params.XraySegment;\n            var segment = params.Segment;\n            var found = null;\n            if (xraySegment && (xraySegment instanceof Segment || xraySegment instanceof Subsegment)) {\n                found = xraySegment;\n                delete params.XRaySegment;\n                delete params.XraySegment;\n            }\n            else if (segment && (segment instanceof Segment || segment instanceof Subsegment)) {\n                found = segment;\n                delete params.Segment;\n            }\n            return found;\n        }\n    },\n    /**\n     * Gets current CLS namespace for X-Ray SDK or creates one if absent.\n     * @returns {Namespace}\n     * @alias module:context_utils.getNamespace\n     */\n    getNamespace: function getNamespace() {\n        return cls.getNamespace(NAMESPACE) || cls.createNamespace(NAMESPACE);\n    },\n    /**\n     * Resolves the segment or subsegment given manual or automatic mode.\n     * @param [Segment|Subsegment] segment - The segment manually provided, if provided.\n     * @returns {Segment|Subsegment}\n     * @alias module:context_utils.resolveSegment\n     */\n    resolveSegment: function resolveSegment(segment) {\n        if (cls_mode) {\n            return this.getSegment();\n        }\n        else if (segment && !cls_mode) {\n            return segment;\n        }\n        else if (!segment && !cls_mode) {\n            contextUtils.contextMissingStrategy.contextMissing('No sub/segment specified. A sub/segment must be provided for manual mode.');\n        }\n    },\n    /**\n     * Returns the current segment or subsegment.  For use with in automatic mode only.\n     * @returns {Segment|Subsegment}\n     * @alias module:context_utils.getSegment\n     */\n    getSegment: function getSegment() {\n        if (cls_mode) {\n            var segment = contextUtils.getNamespace(NAMESPACE).get(SEGMENT);\n            if (!segment) {\n                contextUtils.contextMissingStrategy.contextMissing('Failed to get the current sub/segment from the context.');\n            }\n            else if (segment instanceof Segment && process.env.LAMBDA_TASK_ROOT && segment.facade == true) {\n                segment.resolveLambdaTraceData();\n            }\n            return segment;\n        }\n        else {\n            contextUtils.contextMissingStrategy.contextMissing('Cannot get sub/segment from context. Not supported in manual mode.');\n        }\n    },\n    /**\n     * Sets the current segment or subsegment.  For use with in automatic mode only.\n     * @param [Segment|Subsegment] segment - The sub/segment to set.\n     * @returns {Segment|Subsegment}\n     * @alias module:context_utils.setSegment\n     */\n    setSegment: function setSegment(segment) {\n        if (cls_mode) {\n            if (!contextUtils.getNamespace(NAMESPACE).set(SEGMENT, segment)) {\n                logger.getLogger().warn('Failed to set the current sub/segment on the context.');\n            }\n        }\n        else {\n            contextUtils.contextMissingStrategy.contextMissing('Cannot set sub/segment on context. Not supported in manual mode.');\n        }\n    },\n    /**\n     * Returns true if in automatic mode, otherwise false.\n     * @returns {Segment|Subsegment}\n     * @alias module:context_utils.isAutomaticMode\n     */\n    isAutomaticMode: function isAutomaticMode() {\n        return cls_mode;\n    },\n    /**\n     * Enables automatic mode. Automatic mode uses 'cls-hooked'.\n     * @see https://github.com/jeff-lewis/cls-hooked\n     * @alias module:context_utils.enableAutomaticMode\n     */\n    enableAutomaticMode: function enableAutomaticMode() {\n        cls_mode = true;\n        contextUtils.getNamespace(NAMESPACE);\n        logger.getLogger().debug('Overriding AWS X-Ray SDK mode. Set to automatic mode.');\n    },\n    /**\n     * Disables automatic mode. Current segment or subsegment then must be passed manually\n     * via the parent optional on captureFunc, captureAsyncFunc etc.\n     * @alias module:context_utils.enableManualMode\n     */\n    enableManualMode: function enableManualMode() {\n        cls_mode = false;\n        if (cls.getNamespace(NAMESPACE)) {\n            cls.destroyNamespace(NAMESPACE);\n        }\n        logger.getLogger().debug('Overriding AWS X-Ray SDK mode. Set to manual mode.');\n    },\n    /**\n     * Sets the context missing strategy if no context missing strategy is set using the environment variable with\n     * key AWS_XRAY_CONTEXT_MISSING. The context missing strategy's contextMissing function will be called whenever\n     * trace context is not found.\n     * @param {string|function} strategy - The strategy to set. Valid string values are 'LOG_ERROR' and 'RUNTIME_ERROR'.\n     *                                     Alternatively, a custom function can be supplied, which takes a error message string.\n     */\n    setContextMissingStrategy: function setContextMissingStrategy(strategy) {\n        if (!contextOverride) {\n            if (typeof strategy === 'string') {\n                var lookupStrategy = contextUtils.CONTEXT_MISSING_STRATEGY[strategy.toUpperCase()];\n                if (lookupStrategy) {\n                    contextUtils.contextMissingStrategy.contextMissing = lookupStrategy.contextMissing;\n                    if (process.env.AWS_XRAY_CONTEXT_MISSING) {\n                        logger.getLogger().debug('AWS_XRAY_CONTEXT_MISSING is set. Configured context missing strategy to ' +\n                            process.env.AWS_XRAY_CONTEXT_MISSING + '.');\n                    }\n                    else {\n                        logger.getLogger().debug('Configured context missing strategy to: ' + strategy);\n                    }\n                }\n                else {\n                    throw new Error('Invalid context missing strategy: ' + strategy + '. Valid values are ' +\n                        Object.keys(contextUtils.CONTEXT_MISSING_STRATEGY) + '.');\n                }\n            }\n            else if (typeof strategy === 'function') {\n                contextUtils.contextMissingStrategy.contextMissing = strategy;\n                logger.getLogger().info('Configured custom context missing strategy to function: ' + strategy.name);\n            }\n            else {\n                throw new Error('Context missing strategy must be either a string or a custom function.');\n            }\n        }\n        else {\n            logger.getLogger().warn('Ignoring call to setContextMissingStrategy as AWS_XRAY_CONTEXT_MISSING is set. ' +\n                'The current context missing strategy will not be changed.');\n        }\n    }\n};\nif (process.env.AWS_XRAY_MANUAL_MODE) {\n    cls_mode = false;\n    logger.getLogger().debug('Starting the AWS X-Ray SDK in manual mode.');\n}\nelse {\n    cls.createNamespace(NAMESPACE);\n    logger.getLogger().debug('Starting the AWS X-Ray SDK in automatic mode (default).');\n}\nif (process.env.AWS_XRAY_CONTEXT_MISSING) {\n    contextUtils.setContextMissingStrategy(process.env.AWS_XRAY_CONTEXT_MISSING);\n    contextOverride = true;\n}\nelse {\n    contextUtils.contextMissingStrategy.contextMissing = contextUtils.CONTEXT_MISSING_STRATEGY.LOG_ERROR.contextMissing;\n    logger.getLogger().debug('Using default context missing strategy: LOG_ERROR');\n}\nmodule.exports = contextUtils;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}